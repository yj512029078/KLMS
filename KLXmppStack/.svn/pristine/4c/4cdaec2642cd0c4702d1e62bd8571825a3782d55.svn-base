<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>KLXmpp API: Member List</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">KLXmpp API
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.html"><span>Classes</span></a></li>
      <li><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.html"><span>Class&#160;List</span></a></li>
      <li><a href="classes.html"><span>Class&#160;Index</span></a></li>
      <li><a href="hierarchy.html"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.html"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespacekl.html">kl</a></li><li class="navelem"><a class="el" href="classkl_1_1_xmpp_stack.html">XmppStack</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">kl::XmppStack Member List</div>  </div>
</div><!--header-->
<div class="contents">

<p>This is the complete list of members for <a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a>, including all inherited members.</p>
<table class="directory">
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a6688414b9cfd0890fc1ff204925ba7b0">acceptFt</a>(const gloox::JID &amp;initiator_, const std::string &amp;sid_, gloox::SIProfileFT::StreamType type_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aadf9100621f5f492f26582a87c32b024">addContact</a>(const gloox::JID &amp;contact_, const std::string &amp;name_=&quot;&quot;, const gloox::StringList &amp;groups_=gloox::StringList(), const std::string &amp;msg_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#abd4f3805dfa97ce5208777325186b8c5">addFeature</a>(const std::string &amp;feature_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a90f26ec2425a854253593f781dcb9a67">addRosterItem</a>(const gloox::JID &amp;jid_, const std::string &amp;name_, const gloox::StringList &amp;groups_, bool subscribe_=true, const std::string &amp;msg_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a09252d3109a1d084088c92f604511847">approveSubscription</a>(const gloox::JID &amp;jid_, bool autoSubscribeRemote_=true)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ad4a152da80daa9ac1729d3cd036c84da">banOutMUCRoom</a>(const gloox::JID &amp;room_, const std::string &amp;occupantNickname_, const std::string &amp;reason_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7243c0558237c964d9222e9f394c5e45">changeMUCRoomSubject</a>(const gloox::JID &amp;room_, const std::string &amp;subject_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a21a421657db894eccc7098c4c0a298b4">changeRosterItemName</a>(const gloox::JID &amp;jid_, const std::string &amp;name_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#adc8aa63a2a297ad5624b6ef0ccf1c5a8">changeSelfNicknameInMUCRoom</a>(const gloox::JID &amp;room_, const std::string &amp;nickname_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ad731d2ea5a54d006524fa00733a34f13">closeFtBytestream</a>(const std::string &amp;sid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a73bdd7e06e314e5ddf8a4e32e202bf24">configMUCRoom</a>(const gloox::JID &amp;room_, const MUCRoomConfig &amp;config_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ac269742c84617b564a6916b9fc493b43">configUserTuneNode</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a34fe0a65addb244352bce40a0a84ff36">copyRosterItemToGroup</a>(const gloox::JID &amp;jid_, const std::string &amp;group_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a058a3d5ac70f5f20654ebaec7f2f6765">copyRosterItemToGroups</a>(const gloox::JID &amp;jid_, const gloox::StringList &amp;groups_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a9aa41bc862977ae7fb5d06e7f74c0717">createMUCRoom</a>(const gloox::JID &amp;room_, const MUCRoomConfig &amp;config_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ab599f6045ac152e8cccecd741a1662e0">createPubSubNode</a>(const gloox::JID &amp;service_, const std::string &amp;node_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a0515aff22716b41a217961c6f2910289">deleteMicroblog</a>(const std::string &amp;id_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#af4377456d2a12f9368e72b23a7e34089">deleteRosterItem</a>(const gloox::JID &amp;jid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#abdb74c63c750a385b885e23cf167fb4f">deleteSelfMicroblogNode</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a435e927bd53460c196bd7748443f1370">deleteUserTuneNode</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a159bad2356124f2b657f6665e9816f38">denySubscription</a>(const gloox::JID &amp;jid_, bool autoDeleteRosterItem=true)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a2aefd52ec57a19c3dbecc28026780664">destroyMUCRoom</a>(const gloox::JID &amp;room_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a6e45ada5bbfe36bed3f36d6ad18cbc4e">disableCheckAvatarDataNodeConfig</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aabc282b65bac665e0b7105f92e17759b">disableCheckMicrobolgNodeConfig</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ab932d7e4c788bf3cde0aabdffd3bccf9">discoInfo</a>(const gloox::JID &amp;to_, const std::string &amp;node_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a58edae94fa074ad7e207da0927a4e962">discoItems</a>(const gloox::JID &amp;to_, const std::string &amp;node_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a30a398e65e1370ca9efe70e8bb46d2ac">enableCheckAvatarDataNodeConfig</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a50e729e443a03a44134c3581514ec596">enableCheckMicrobolgNodeConfig</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7d67eeac86387755a49158c841baf771">enterMUCRoom</a>(const gloox::JID &amp;room_, gloox::Presence::PresenceType presType_=gloox::Presence::Available, const std::string &amp;presStatus_=&quot;&quot;, int presPriority_=0, const std::string &amp;password_=&quot;&quot;, bool requestHistory_=true)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a06e2b5845cdc2001e1a01a8da36ebb21">exitMUCRoom</a>(const gloox::JID &amp;room_, const std::string &amp;reason_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a6621cd5732f393ddd4bd4043e0ed4335">getRoster</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7d57caa7c01a85c0eafd294a5080c742">getUserTuneNodeConfig</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#abda0729a66ae17a32e62d0d2b2bd929e">grantMUCRoomMembership</a>(const gloox::JID &amp;room_, const gloox::JID &amp;user_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a195524cbde0a8564f4afa942a0a13fa1">grantMUCRoomMembership</a>(const gloox::JID &amp;room_, const std::string &amp;nickname_, const std::string &amp;reason_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a1aeacabae42166379dafc041c900a369">grantMUCRoomVoice</a>(const gloox::JID &amp;room_, const std::string &amp;occupantNickname_, const std::string &amp;reason_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a98be8f297a890df363597e10e87dcfd3">handleAffiliates</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::PubSub::AffiliateList *list_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a86a99c4ac4b3194c86fd7f3dcc4d1cd0">handleAffiliatesResult</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::PubSub::AffiliateList *list_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a551ef8015cdc7029f35165468b77dc34">handleAffiliations</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const gloox::PubSub::AffiliationMap &amp;affMap_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a28d849848e560e629fc148bf9e6a973b">handleAlreadyRegistered</a>(const gloox::JID &amp;from_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7fe6b231f96f05fd584b480f1ac6d8d5">handleBytestreamClose</a>(gloox::Bytestream *bs_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ac1da845aded0ae6c3a3de951d4e7eacd">handleBytestreamData</a>(gloox::Bytestream *bs_, const std::string &amp;data_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ae2bcceab78254ad8988d151a1c652567">handleBytestreamError</a>(gloox::Bytestream *bs_, const gloox::IQ &amp;iq_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a10dc47ff9eb320594a1dfc4cc8e8e8c3">handleBytestreamOpen</a>(gloox::Bytestream *bs_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ab38e8f560eb56fdb588a55fe00eb99dd">handleDataForm</a>(const gloox::JID &amp;from_, const gloox::DataForm &amp;form_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a3d1ffe1d5c964f3fe11e4eea87d67694">handleDefaultNodeConfig</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const gloox::DataForm *config_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a6b8c8484e620075f322ec40c20ebe50b">handleDiscoError</a>(const gloox::JID &amp;from, const gloox::Error *error_, int context_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#af39bed5cc213252ca9b58b6f02cfdc5c">handleDiscoInfo</a>(const gloox::JID &amp;from_, const gloox::Disco::Info &amp;info_, int context_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a5f4ed79b0bfb3206246f51f0438af58d">handleDiscoItems</a>(const gloox::JID &amp;from_, const gloox::Disco::Items &amp;items_, int context_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aad019c33c302d11851608497ca0711b7">handleFTBytestream</a>(gloox::Bytestream *bs_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a1213f5a9156a24a5bd7278f801cb4a8d">handleFTRequest</a>(const gloox::JID &amp;from_, const gloox::JID &amp;to_, const std::string &amp;sid_, const std::string &amp;name_, long size_, const std::string &amp;hash_, const std::string &amp;date_, const std::string &amp;mimetype_, const std::string &amp;desc_, int stypes_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a4094f4fc6ad562569cf96b3c66d3b9e1">handleFTRequestError</a>(const gloox::IQ &amp;iq_, const std::string &amp;sid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a5ae04bb16fe19c9047fdf753a5c12365">handleItem</a>(const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::Tag *entry_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#abbc21c09f9506cfa4c244e2f39298d34">handleItemAdded</a>(const gloox::JID &amp;jid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a394a90d68a4e0cf37f8d73eeb4f394ec">handleItemDeletion</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::PubSub::ItemList &amp;itemList_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ae866c165417017cedd9e4f8b7ce86baa">handleItemPublication</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::PubSub::ItemList &amp;itemList_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a2675efd9f530f2fd3a39a2e7b8cad508">handleItemRemoved</a>(const gloox::JID &amp;jid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a25cf95c2efe504d53d0558921d5d900b">handleItems</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::PubSub::ItemList &amp;itemList_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aa26b7233c2c76a543a426b2e7b27829a">handleItemSubscribed</a>(const gloox::JID &amp;jid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7798a17e39a2a93ed215df2e4500142f">handleItemUnsubscribed</a>(const gloox::JID &amp;jid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a995fe27f80f36dab9a350bdb32b12431">handleItemUpdated</a>(const gloox::JID &amp;jid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#acf4c663718acba695e0639eef227a7ea">handleLog</a>(gloox::LogLevel level_, gloox::LogArea area_, const std::string &amp;message_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a2f8a5436f94c75a43e5c0debe698a831">handleMessage</a>(const gloox::Message &amp;msg_, gloox::MessageSession *session_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a3dde57b874e616782d6725c3a09d8822">handleMUCConfigForm</a>(gloox::MUCRoom *room_, const gloox::DataForm &amp;form_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a1927e15afd6b5feee8e8beafddf06d7f">handleMUCConfigList</a>(gloox::MUCRoom *room_, const gloox::MUCListItemList &amp;items_, gloox::MUCOperation operation_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a8ec6e43f59ee3645dc4ccb55ed99418c">handleMUCConfigResult</a>(gloox::MUCRoom *room_, bool success_, gloox::MUCOperation operation_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a519c21590a91855a784205e0584ef47f">handleMUCError</a>(gloox::MUCRoom *room_, gloox::StanzaError error_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#abe8375da89deabce78447cfb8dbf3bb0">handleMUCInfo</a>(gloox::MUCRoom *room_, int features_, const std::string &amp;name_, const gloox::DataForm *infoForm_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a75c89256669d8e3c4e9c705645c3cccb">handleMUCInvitation</a>(const gloox::JID &amp;room_, const gloox::JID &amp;from_, const std::string &amp;reason_, const std::string &amp;body_, const std::string &amp;password_, bool cont_, const std::string &amp;thread_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a404c9129e22c486a02844fbbb646a714">handleMUCInviteDecline</a>(gloox::MUCRoom *room_, const gloox::JID &amp;invitee_, const std::string &amp;reason_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a3b331c01b20f67133ccbfd902edd399a">handleMUCItems</a>(gloox::MUCRoom *room_, const gloox::Disco::ItemList &amp;items_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7aad3a74790a3dcc06a7eb501a744075">handleMUCMessage</a>(gloox::MUCRoom *room_, const gloox::Message &amp;msg_, bool priv_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#af75ef7cce37ac053f253be47d589b5d9">handleMUCParticipantPresence</a>(gloox::MUCRoom *room_, const gloox::MUCRoomParticipant participant_, const gloox::Presence &amp;presence_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a523c4294c8202b1ba8e9d492c8263818">handleMUCRequest</a>(gloox::MUCRoom *room_, const gloox::DataForm &amp;form_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a1146d6499385590bf2becb634cf83275">handleMUCRoomCreation</a>(gloox::MUCRoom *room_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#afca850b912abeca68d907f5821addb7a">handleMUCSubject</a>(gloox::MUCRoom *room_, const std::string &amp;nick_, const std::string &amp;subject_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a5c34eca31f311e780b0452738b149fd1">handleNodeConfig</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::DataForm *config_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a332c003d9d2e074bff342a5212a8e7db">handleNodeConfigResult</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a52431895653af2032321bdfc79f1bad1">handleNodeCreation</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a70d09efc1d41ea0325f67397c09375e7">handleNodeDeletion</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a578f6ee9f5d6c59b6d8061b767c2830a">handleNodePurge</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a131127758b25fe461ea6ecbe3b1b03f5">handleNonrosterPresence</a>(const gloox::Presence &amp;presence_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#af85ff9f913d579a30ff84d2bdb77f132">handleOOB</a>(const gloox::JID &amp;from_, const gloox::OOB &amp;oob_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a245a81640ac9f14b87ea31c83a5592f7">handleOOBRequestResult</a>(const gloox::JID &amp;from_, const gloox::JID &amp;to_, const std::string &amp;sid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#acc64bd7b9322a3b4c2a007be9ad364a1">handlePresence</a>(const gloox::Presence &amp;presence_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ae74eb2ff686006478f683c265ad01739">handleRegistrationFields</a>(const gloox::JID &amp;from_, int fields_, std::string instructions_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7c36cf87164c2fe64d696b16c0549e63">handleRegistrationResult</a>(const gloox::JID &amp;from_, gloox::RegistrationResult regResult_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a28e37b7de726faac8fe8c7235037fbd3">handleRoster</a>(const gloox::Roster &amp;roster_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aff2e4800c9ef0ff97a6da76393c266ac">handleRosterError</a>(const gloox::IQ &amp;iq_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a89f24c3e7e242a899c6bb46835d04bf8">handleRosterPresence</a>(const gloox::RosterItem &amp;item_, const std::string &amp;resource_, gloox::Presence::PresenceType presence_, const std::string &amp;msg_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a8b5682c72780a4025f20d34d0c162e57">handleSelfPresence</a>(const gloox::RosterItem &amp;item_, const std::string &amp;resource_, gloox::Presence::PresenceType presence_, const std::string &amp;msg_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ab09a557b6d98dda5796ff2c97f611e6a">handleSubscribers</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::PubSub::SubscriberList *list_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#af7bae0201c6f70168420013abea0de38">handleSubscribersResult</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const gloox::PubSub::SubscriberList *list_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a601a039dcd1f655b9190b5d2d6be3229">handleSubscriptionOptions</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const gloox::JID &amp;jid_, const std::string &amp;node_, const gloox::DataForm *options_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a49e74224cf8c31800e5945a3147c98de">handleSubscriptionOptionsResult</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const gloox::JID &amp;jid_, const std::string &amp;node_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#acf950971448ae86e14ca95d272d935fc">handleSubscriptionRequest</a>(const gloox::JID &amp;jid_, const std::string &amp;msg_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ae95da46a5ff8bf0606498d21d37e2441">handleSubscriptionResult</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const std::string &amp;node_, const std::string &amp;sid_, const gloox::JID &amp;jid_, const gloox::PubSub::SubscriptionType subType_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ae3d81f8008e0b4b5d3d324deff08b195">handleSubscriptions</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const gloox::PubSub::SubscriptionMap &amp;subMap_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#af915791b56851c11bab48cb164cab2db">handleUnsubscriptionRequest</a>(const gloox::JID &amp;jid_, const std::string &amp;msg_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a766bc1293ec79dcbbe1bccaa8c876100">handleUnsubscriptionResult</a>(const std::string &amp;id_, const gloox::JID &amp;service_, const gloox::Error *error_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aef5f1feec694f599902877b863801fa0">host</a>() const </td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a634ade104b76485aa3f901db2b389ae0">init</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aba6a54f705c6c3c2323f908e9507c7c1">inviteIntoMUCRoom</a>(const gloox::JID &amp;room_, const gloox::JID &amp;invitee_, MUCRoomInvitationType type_=MUCRoomInvitationType::Mediated, const std::string &amp;reason_=&quot;&quot;, bool amp_=false, bool receipts_=false)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ab2c8dad9c54c7429c1bbba4863cfe74f">isBytestreamOpened</a>(const std::string &amp;sid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aa1a8a4df59d27fef0986f65ba3f31bf6">isCheckAvatarDataNodeConfig</a>() const </td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a008a7f9add29227bf75fce885ea90df5">isCheckMicrobolgNodeConfig</a>() const </td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">inline</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a9972a8c5bf10da45c876766024b14f1f">isLogined</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7e673d3c7ca833f3b93cc34124679c09">jid</a>() const </td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a55f1833ffac5fc0b8dab1ced2b47813a">kickOutMUCRoom</a>(const gloox::JID &amp;room_, const std::string &amp;occupantNickname_, const std::string &amp;reason_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ac61c47c255563ed2169c892e02e96200">loadAvatar</a>(const gloox::JID &amp;to_, const std::string &amp;id_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a9a97a807c7524cefb8e29d6e247d05a7">login</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ae7af17467edc8ea15d1845a055f9c7b0">logout</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a4921ebb34d1015e68b002566fee7fa45">m_bytestreamTrackMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a25281d5684577f6a881599308760d0c5">m_client</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a96b78b0903634dc83c24ca7eb9516bdb">m_createMUCRoomTrackMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a0597375fda4f2cc865ab7508a24db461">m_deleteMicroblogTrackMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a5cb28f4aa6ca79e5b16347cf58c7875f">m_discoInfoMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ae7bf885574d874c95cde2171c6bfce11">m_entityMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a07cc877af677bc1028c68397220d781b">m_isCheckAvatarDataNodeConfig</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a987022362d70a24c46ffe86b9aab0c39">m_isCheckMicrobolgNodeConfig</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a725b931a88ea55c8cdfbe5e5d872055c">m_mUCRoomMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a4f8710c9e7df21a439177e8aa544d87a">m_notifyAddressBookChangedTrackList</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a6991784cc5d3029f85ba142ad127cffc">m_notifyPersonalInfoChangedTrackList</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7e614c4549f6850a0fb36885b856205d">m_pendingMucInvitations</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a8884d9059554b48b5d2653eae51f5eff">m_publishAvatarDataTrackMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a8a44b28a70ea3842bb4178557d201d67">m_publishAvatarMetadataTrackMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a2f0ba29679fa81684cfe19d9893c81b0">m_publishMicroblogTrackMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#afe171b9ab875afcca28c58aeafd08984">m_publishNicknameTrackMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a762248efa76076bf1bfae969cb6dac13">m_pubSubManager</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a3e1732c192879c3d0f1c89adf6d147ab">m_registration</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a3ea452f2e0fedee198b8a5a2651359b7">m_sIProfileFT</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a2b58531216fe1c57581adb68acd45bb2">m_sOCKS5BytestreamServer</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a863d23ddbf2b10a17749f8635a897fe3">m_verificationMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aba64d0a859e4a440850d5b82562ed965">m_xmppCallbacks</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a2760edbdf3f6ec79b75c2e390d500314">m_xmppEntityTrackMap</a></td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">protected</span></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a2a5fb4e0ca0b8f1fa852f472e3af08fd">modifyMUCRoomMemberList</a>(const gloox::JID &amp;room_, const gloox::StringList &amp;members_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7ccecc04fcf9b1646623105eb2e0d804">modifyMUCRoomOwnerList</a>(const gloox::JID &amp;room_, const gloox::StringList &amp;owners_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a335a883010ca98d6c6ed1c3c2367bf3a">moveRosterItemToGroup</a>(const gloox::JID &amp;jid_, const std::string &amp;group_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aa926c2b653d9b658bf0ba7619be29353">moveRosterItemToGroups</a>(const gloox::JID &amp;jid_, const gloox::StringList &amp;groups_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a4f2786684f4ce1aa9d08f1286e801990">notifyAddressBookChanged</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a49d9b4c3bca386cd67d1aab7aaf8ec39">notifyPersonalInfoChanged</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a8480fcf9a85b528edcd9953a3aed4afc">onConnect</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a1b530fe0ae560c48fe5dcb0755219880">onDisconnect</a>(gloox::ConnectionError e_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#af89508fdafd0f74e7d99e8383d5be274">onResourceBind</a>(const std::string &amp;resource_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a2fadabaadf7ad0fbb5cef4b96622ae60">onResourceBindError</a>(const gloox::Error *error_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#af1bfea8cd0995fddc3ae7b94e2831ca4">onSessionCreateError</a>(const gloox::Error *error_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a0f101a5bcb3e94faafc51cf31ce47215">onStreamEvent</a>(gloox::StreamEvent event_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ab5665e838caecb202fc4c5054f2372fc">onTLSConnect</a>(const gloox::CertInfo &amp;info_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a55a5e80aa52a1ef9d6e58a30b0cb62e9">password</a>() const </td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a042e224b91304c022e489422f32053c6">ping</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a435c797f26c8f58caedd900a53079b15">port</a>() const </td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aa6fc7a8702e00d2b1707996464ee838e">publish</a>(const Microblog &amp;microblog_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a8c50bc32b7d04b11975b820eb5131701">publishAvatar</a>(const std::string &amp;id_, const std::string &amp;base64_, int bytes_, const std::string &amp;type_, int height_=-1, int width_=-1, const std::string &amp;url_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a2b65254c094b54300f3f46e3aafb97fa">publishNickname</a>(const std::string &amp;nickname_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ab6739d4c3314ddc4b4b9d50b03581a2b">publishUserTune</a>(const std::string &amp;title_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a58b31a0d78b21bb977ec28362f141735">queryMUCRoomConfig</a>(const gloox::JID &amp;room_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a24fc0c3bc53f04182065fb56e5a07d07">queryMUCRoomInfo</a>(const gloox::JID &amp;room_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a862dbda9cb2be56a052fa2f7fd11d021">recvS5bFtData</a>(const std::string &amp;sid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a20aff12abce55074cfd30715a200617d">registerXmppCallback</a>(XmppCallback *xmppCallback_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ac9978da2e66b40f7603d178e3c52b18f">rejectFt</a>(const gloox::JID &amp;initiator_, const std::string &amp;sid_, const std::string &amp;reason_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a77e5485ad3f224c8d74acb3b09b73a86">rejectMUCRoomInvitation</a>(const gloox::JID &amp;room_, const gloox::JID &amp;invitor_, const std::string &amp;reason_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a5089c1d2fe883141eb41fd8747dd852f">removeContact</a>(const gloox::JID &amp;contact_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ad80b0a3bc63cc8b3e4807d7aaf782368">removeFeature</a>(const std::string &amp;feature_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aee20a4ae47a0f5c8959ef9456e02500f">removeRosterItemFromAllGroups</a>(const gloox::JID &amp;jid_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a3e910d9ce92864e31e57692b33a47814">removeRosterItemFromGroup</a>(const gloox::JID &amp;jid_, const std::string &amp;group_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a844b8ef424b57f4341ce47c15d0f90f9">removeRosterItemFromGroups</a>(const gloox::JID &amp;jid_, const gloox::StringList &amp;groups_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a957fe42e3fb2aee3d12eb064394776ca">removeXmppCallback</a>(XmppCallback *xmppCallback_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a9cca009ce0943fb0a66497050d60ce80">requestFt</a>(const gloox::JID &amp;to_, const FileMetadata &amp;file_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a39b2c7b08013f7887265e3075ef6eea2">requestMicroblogs</a>(const gloox::JID &amp;to_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a935855c278e11dbd195a111209e745bb">requestMUCRoomMemberList</a>(const gloox::JID &amp;room_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a60175df781b9d37ecad15c54649ca886">requestMUCRoomOwnerList</a>(const gloox::JID &amp;room_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a330143a3d51089486c238236fa693eeb">requestMUCRoomVoice</a>(const gloox::JID &amp;room_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a35d16a9bb1c0c76502fcd72a46b7074f">requestRegistrationFields</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a29977ce80b8cbb61a67ba394abb22adf">revokeMUCRoomMembership</a>(const gloox::JID &amp;room_, const gloox::JID &amp;user_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a4a80bde661e33fa65a1f252e5fc5f1c2">revokeMUCRoomOwnership</a>(const gloox::JID &amp;room_, const gloox::JID &amp;user_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a57de0a3da29a71edede068d9f0523bcb">revokeMUCRoomVoice</a>(const gloox::JID &amp;room_, const std::string &amp;occupantNickname_, const std::string &amp;reason_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ab61c90f1f7a5d53e3cd2d02d4c7793dd">send</a>(const gloox::Message &amp;msg_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a55f11d47690d6fb8931b34f8e4fea9d0">send</a>(const kl::XhtmlMessage &amp;msg_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a51bc48e9bec5d9d32811883fb5fc9481">sendAttentionMessage</a>(const gloox::JID &amp;to_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ab3e2d61989a4c52c8f4a3889c73a2b0c">sendChatMessage</a>(const std::string &amp;id_, const gloox::JID &amp;to_, const std::string &amp;body_, const std::string &amp;xhtml_=&quot;&quot;, const std::string &amp;subject_=&quot;&quot;, const std::string &amp;thread_=&quot;&quot;, bool amp_=false, bool receipts_=false)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ace7719b8fab107b0b725611d1be71f2c">sendFtData</a>(const std::string &amp;sid_, void *data_, long size_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a04236b08bae0b7f41e2d10a39cd6c598">sendIMailMessage</a>(const std::string &amp;id_, const gloox::JID &amp;to_, const IMailSMTPInfo &amp;iMailSMTPInfo_, bool receipts_=false)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#aa111cdf93129d61b12770295860b2aed">sendMUCRoomMessage</a>(const gloox::JID &amp;room_, const std::string &amp;msg_, const std::string &amp;id_=&quot;&quot;, const std::string &amp;xhtml_=&quot;&quot;, bool receipts_=false)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a6db570171dadc253743b4c46743586db">sendMUCRoomPresence</a>(const gloox::JID &amp;room_, gloox::Presence::PresenceType type_=gloox::Presence::Available, const std::string &amp;status_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7497ae7a83169abee39118eedf634b98">sendPresence</a>(gloox::Presence::PresenceType type_, const std::string &amp;status_=&quot;&quot;, int priority_=0)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a8da6537ed3308aa5d08f5bc0253904bb">sendReceiptMessage</a>(const std::string &amp;id_, const gloox::JID &amp;to_, const std::string &amp;receiptId_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a848b2e62e2c6b8394b5c92461e8fefcd">sendXml</a>(const std::string &amp;xml_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a04e5ce64df39663d5c170a789b5db93d">setIdentity</a>(const std::string &amp;category_, const std::string &amp;type_, const std::string &amp;name_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a1a7a9f6972012aa00ccb0370a5432f31">subscribeRosterItem</a>(const gloox::JID &amp;jid_, const std::string &amp;msg_=&quot;&quot;)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#ad931fe9eefb875eb6a8600870e988261">updateContact</a>(const gloox::JID &amp;contact_, const std::string &amp;nickname_, const std::list&lt; std::string &gt; &amp;groups_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#acfded77e03fcff284f393f628a39bf6e">updateRosterItem</a>(const gloox::JID &amp;jid_, const std::string &amp;name_, const gloox::StringList &amp;groups_)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr class="even"><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a70396d950be530fedda8820047a842a8">XmppStack</a>(const gloox::JID &amp;jid_, const std::string &amp;password_, const std::string &amp;host_=&quot;&quot;, int port_=5222)</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"></td></tr>
  <tr><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html#a7ffb5815749dc083a296315e3f264745">~XmppStack</a>()</td><td class="entry"><a class="el" href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></td><td class="entry"><span class="mlabel">virtual</span></td></tr>
</table></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Jun 6 2014 09:50:14 for KLXmpp API by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_klcppwrap(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_klcppwrap(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_klcppwrap(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else


/* Callback for returning strings to C# without leaking memory */
typedef void * (SWIGSTDCALL* SWIG_CSharpWStringHelperCallback)(const wchar_t *);
static SWIG_CSharpWStringHelperCallback SWIG_csharp_wstring_callback = NULL;


#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterWStringCallback_klcppwrap(SWIG_CSharpWStringHelperCallback callback) {
  SWIG_csharp_wstring_callback = callback;
}

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include <string>


#include <map>
#include <algorithm>
#include <stdexcept>



#include <windows.h>

wchar_t* utf82utf16( const char* sz_utf8_ )
{
	int len = -1;
	wchar_t* ret_utf16 = NULL;
	len = MultiByteToWideChar( CP_UTF8, 0, sz_utf8_, -1, NULL, 0 );
	ret_utf16 = (wchar_t*) malloc ( (len+1) * sizeof (wchar_t) );
	memset( ret_utf16, '\0', ( (len+1) * sizeof (wchar_t) ) );
	MultiByteToWideChar( CP_UTF8, 0, sz_utf8_, -1, (LPWSTR) ret_utf16, len);
	return ret_utf16;
}

char* utf162utf8( const wchar_t* sz_utf16_ )
{
	int len = -1;
	char* ret_utf8 = NULL;
	len = WideCharToMultiByte( CP_UTF8, 0, sz_utf16_, -1, NULL, 0, NULL, NULL );
	ret_utf8 = (char*) malloc ( (len+1) * sizeof(char) );
	memset(ret_utf8, '\0', ( (len+1) * sizeof(char) ) );
	WideCharToMultiByte( CP_UTF8, 0, sz_utf16_, -1, ret_utf8, len, NULL, NULL );
	return ret_utf8;
}



#include <stdexcept>


#include <list>
#include <algorithm>
#include <stdexcept>


#include "../../../gloox/src/macros.h"
#include "../../../KLXmpp/include/kl_common.h"
#include "../../../KLXmpp/include/kl_xmppstack.h"
#include "../../../KLXmpp/include/kl_xmppcallback.h"
#include "../../../KLXmpp/include/kl_disco_identity.h"
#include "../../../KLXmpp/include/kl_service.h"
#include "../../../KLXmpp/include/kl_avatarmetadata.h"
#include "../../../KLXmpp/include/kl_mucroominfo.h"
#include "../../../KLXmpp/include/kl_mucroomconfig.h"
#include "../../../KLXmpp/include/kl_filemetadata.h"
#include "../../../KLXmpp/include/kl_bytestreamdata.h"
#include "../../../KLXmpp/include/kl_microblog.h"
#include "../../../KLXmpp/include/kl_vcard.h"
#include "../../../KLXmpp/include/kl_vcardname.h"
#include "../../../KLXmpp/include/kl_vcardphoto.h"
#include "../../../KLXmpp/include/kl_vcardemail.h"
#include "../../../KLXmpp/include/kl_vcardaddress.h"
#include "../../../KLXmpp/include/kl_vcardlabel.h"
#include "../../../KLXmpp/include/kl_vcardtelephone.h"
#include "../../../KLXmpp/include/kl_vcardgeo.h"
#include "../../../KLXmpp/include/kl_vcardorg.h"
#include "../../../KLXmpp/include/kl_addressbookinfo.h"
#include "../../../KLXmpp/include/kl_imailsmtpinfo.h"
#include "../../../KLXmpp/include/kl_geoloc.h"
#include "../../../KLXmpp/include/kl_backgroundinfo.h"


#include "../../../gloox/src/gloox.h"


#include "../../../gloox/src/logsink.h"


#include "../../../gloox/src/jid.h"


#include "../../../gloox/src/stanza.h"


#include "../../../gloox/src/message.h"


#include "../../../gloox/src/presence.h"


#include "../../../gloox/src/rosteritem.h"


#include "../../../gloox/src/bytestream.h"


#include "../../../gloox/src/siprofileft.h"

SWIGINTERN std::string std_list_Sl_std_string_Sg__getitemcopy(std::list< std::string > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				return (*self).front()/*[index]*/;
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN std::list< std::string >::const_reference std_list_Sl_std_string_Sg__getitem(std::list< std::string > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				std::list<std::string>::const_iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				return (*it);
				//return (*self)[index];
			}
			else
			{
				throw std::out_of_range("index");
			}
				
		}
SWIGINTERN void std_list_Sl_std_string_Sg__setitem(std::list< std::string > *self,int index,std::string const &val){
			if (index>=0 && index<(int)self->size())
			{
				std::list<std::string>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				(*it) = val;
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_std_string_Sg__AddRange(std::list< std::string > *self,std::list< std::string > const &values){
			self->insert(self->end(), values.begin(), values.end());
		}
SWIGINTERN void std_list_Sl_std_string_Sg__Insert(std::list< std::string > *self,int index,std::string const &x){
			if (index>=0 && index<(int)self->size()+1)
			{
				std::list<std::string>::iterator it = self->begin();
				while(index--)
				{
					it++;
				}
				self->insert(it, x);
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN void std_list_Sl_std_string_Sg__RemoveAt(std::list< std::string > *self,int index){
			
			if (index>=0 && index<(int)self->size())
			{
				std::list<std::string>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				self->erase(it);
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_std_string_Sg__Reverse(std::list< std::string > *self){
			std::reverse(self->begin(), self->end());
		}
SWIGINTERN bool std_list_Sl_std_string_Sg__Contains(std::list< std::string > *self,std::string const &value){
		return std::find(self->begin(), self->end(), value) != self->end();
	}
SWIGINTERN int std_list_Sl_std_string_Sg__IndexOf(std::list< std::string > *self,std::string const &value){
		int index = -1;
		std::list< std::string >::const_iterator it = self->begin();
		while (it != self->end())
		{
			index++;
			if ( value == (*it) ) // 必须重载==操作符才能生效
			{
				break;
			}
			it++;
		}
		return index;
	}
SWIGINTERN bool std_list_Sl_std_string_Sg__Remove(std::list< std::string > *self,std::string const &value){
		std::list< std::string >::iterator it = std::find(self->begin(), self->end(), value);
		if (it != self->end()) 
		{
			self->erase(it);
			return true;
		}
		return false;
	}
SWIGINTERN int std_list_Sl_int_Sg__getitemcopy(std::list< int > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				return (*self).front()/*[index]*/;
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN std::list< int >::const_reference std_list_Sl_int_Sg__getitem(std::list< int > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				std::list<int>::const_iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				return (*it);
				//return (*self)[index];
			}
			else
			{
				throw std::out_of_range("index");
			}
				
		}
SWIGINTERN void std_list_Sl_int_Sg__setitem(std::list< int > *self,int index,int const &val){
			if (index>=0 && index<(int)self->size())
			{
				std::list<int>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				(*it) = val;
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_int_Sg__AddRange(std::list< int > *self,std::list< int > const &values){
			self->insert(self->end(), values.begin(), values.end());
		}
SWIGINTERN void std_list_Sl_int_Sg__Insert(std::list< int > *self,int index,int const &x){
			if (index>=0 && index<(int)self->size()+1)
			{
				std::list<int>::iterator it = self->begin();
				while(index--)
				{
					it++;
				}
				self->insert(it, x);
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN void std_list_Sl_int_Sg__RemoveAt(std::list< int > *self,int index){
			
			if (index>=0 && index<(int)self->size())
			{
				std::list<int>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				self->erase(it);
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_int_Sg__Reverse(std::list< int > *self){
			std::reverse(self->begin(), self->end());
		}
SWIGINTERN bool std_list_Sl_int_Sg__Contains(std::list< int > *self,int const &value){
		return std::find(self->begin(), self->end(), value) != self->end();
	}
SWIGINTERN int std_list_Sl_int_Sg__IndexOf(std::list< int > *self,int const &value){
		int index = -1;
		std::list< int >::const_iterator it = self->begin();
		while (it != self->end())
		{
			index++;
			if ( value == (*it) ) // 必须重载==操作符才能生效
			{
				break;
			}
			it++;
		}
		return index;
	}
SWIGINTERN bool std_list_Sl_int_Sg__Remove(std::list< int > *self,int const &value){
		std::list< int >::iterator it = std::find(self->begin(), self->end(), value);
		if (it != self->end()) 
		{
			self->erase(it);
			return true;
		}
		return false;
	}
SWIGINTERN std::map< std::string,std::string >::mapped_type const &std_map_Sl_std_string_Sc_std_string_Sg__getitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string,std::string >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__setitem(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__Add(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key,std::map< std::string,std::string >::mapped_type const &val){
        std::map< std::string, std::string >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, std::string >(key, val));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__Remove(std::map< std::string,std::string > *self,std::map< std::string,std::string >::key_type const &key){
        std::map< std::string, std::string >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< std::string,std::string >::iterator *std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(std::map< std::string,std::string > *self){
        return new std::map< std::string, std::string >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,std::string >::key_type const &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(std::map< std::string,std::string > *self,std::map< std::string,std::string >::iterator *swigiterator){
        std::map< std::string, std::string >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(std::map< std::string,std::string > *self,std::map< std::string,std::string >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN std::map< std::string,gloox::RosterItem * >::mapped_type const &std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__getitem(std::map< std::string,gloox::RosterItem * > *self,std::map< std::string,gloox::RosterItem * >::key_type const &key){
        std::map< std::string,gloox::RosterItem * >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__setitem(std::map< std::string,gloox::RosterItem * > *self,std::map< std::string,gloox::RosterItem * >::key_type const &key,std::map< std::string,gloox::RosterItem * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__ContainsKey(std::map< std::string,gloox::RosterItem * > *self,std::map< std::string,gloox::RosterItem * >::key_type const &key){
        std::map< std::string, gloox::RosterItem * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__Add(std::map< std::string,gloox::RosterItem * > *self,std::map< std::string,gloox::RosterItem * >::key_type const &key,std::map< std::string,gloox::RosterItem * >::mapped_type const &val){
        std::map< std::string, gloox::RosterItem * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, gloox::RosterItem * >(key, val));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__Remove(std::map< std::string,gloox::RosterItem * > *self,std::map< std::string,gloox::RosterItem * >::key_type const &key){
        std::map< std::string, gloox::RosterItem * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< std::string,gloox::RosterItem * >::iterator *std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__create_iterator_begin(std::map< std::string,gloox::RosterItem * > *self){
        return new std::map< std::string, gloox::RosterItem * >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,gloox::RosterItem * >::key_type const &std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__get_next_key(std::map< std::string,gloox::RosterItem * > *self,std::map< std::string,gloox::RosterItem * >::iterator *swigiterator){
        std::map< std::string, gloox::RosterItem * >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__destroy_iterator(std::map< std::string,gloox::RosterItem * > *self,std::map< std::string,gloox::RosterItem * >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN kl::disco::Identity *std_list_Sl_kl_disco_Identity_Sm__Sg__getitemcopy(std::list< kl::disco::Identity * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				return (*self).front()/*[index]*/;
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN std::list< kl::disco::Identity * >::const_reference std_list_Sl_kl_disco_Identity_Sm__Sg__getitem(std::list< kl::disco::Identity * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::disco::Identity *>::const_iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				return (*it);
				//return (*self)[index];
			}
			else
			{
				throw std::out_of_range("index");
			}
				
		}
SWIGINTERN void std_list_Sl_kl_disco_Identity_Sm__Sg__setitem(std::list< kl::disco::Identity * > *self,int index,kl::disco::Identity *const &val){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::disco::Identity *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				(*it) = val;
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_disco_Identity_Sm__Sg__AddRange(std::list< kl::disco::Identity * > *self,std::list< kl::disco::Identity * > const &values){
			self->insert(self->end(), values.begin(), values.end());
		}
SWIGINTERN void std_list_Sl_kl_disco_Identity_Sm__Sg__Insert(std::list< kl::disco::Identity * > *self,int index,kl::disco::Identity *const &x){
			if (index>=0 && index<(int)self->size()+1)
			{
				std::list<kl::disco::Identity *>::iterator it = self->begin();
				while(index--)
				{
					it++;
				}
				self->insert(it, x);
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN void std_list_Sl_kl_disco_Identity_Sm__Sg__RemoveAt(std::list< kl::disco::Identity * > *self,int index){
			
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::disco::Identity *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				self->erase(it);
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_disco_Identity_Sm__Sg__Reverse(std::list< kl::disco::Identity * > *self){
			std::reverse(self->begin(), self->end());
		}
SWIGINTERN bool std_list_Sl_kl_disco_Identity_Sm__Sg__Contains(std::list< kl::disco::Identity * > *self,kl::disco::Identity *const &value){
		return std::find(self->begin(), self->end(), value) != self->end();
	}
SWIGINTERN int std_list_Sl_kl_disco_Identity_Sm__Sg__IndexOf(std::list< kl::disco::Identity * > *self,kl::disco::Identity *const &value){
		int index = -1;
		std::list< kl::disco::Identity * >::const_iterator it = self->begin();
		while (it != self->end())
		{
			index++;
			if ( value == (*it) ) // 必须重载==操作符才能生效
			{
				break;
			}
			it++;
		}
		return index;
	}
SWIGINTERN bool std_list_Sl_kl_disco_Identity_Sm__Sg__Remove(std::list< kl::disco::Identity * > *self,kl::disco::Identity *const &value){
		std::list< kl::disco::Identity * >::iterator it = std::find(self->begin(), self->end(), value);
		if (it != self->end()) 
		{
			self->erase(it);
			return true;
		}
		return false;
	}
SWIGINTERN std::map< std::string,kl::Service * >::mapped_type const &std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__getitem(std::map< std::string,kl::Service * > *self,std::map< std::string,kl::Service * >::key_type const &key){
        std::map< std::string,kl::Service * >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__setitem(std::map< std::string,kl::Service * > *self,std::map< std::string,kl::Service * >::key_type const &key,std::map< std::string,kl::Service * >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__ContainsKey(std::map< std::string,kl::Service * > *self,std::map< std::string,kl::Service * >::key_type const &key){
        std::map< std::string, kl::Service * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__Add(std::map< std::string,kl::Service * > *self,std::map< std::string,kl::Service * >::key_type const &key,std::map< std::string,kl::Service * >::mapped_type const &val){
        std::map< std::string, kl::Service * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< std::string, kl::Service * >(key, val));
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__Remove(std::map< std::string,kl::Service * > *self,std::map< std::string,kl::Service * >::key_type const &key){
        std::map< std::string, kl::Service * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< std::string,kl::Service * >::iterator *std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__create_iterator_begin(std::map< std::string,kl::Service * > *self){
        return new std::map< std::string, kl::Service * >::iterator(self->begin());
      }
SWIGINTERN std::map< std::string,kl::Service * >::key_type const &std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__get_next_key(std::map< std::string,kl::Service * > *self,std::map< std::string,kl::Service * >::iterator *swigiterator){
        std::map< std::string, kl::Service * >::iterator iter = *swigiterator;
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__destroy_iterator(std::map< std::string,kl::Service * > *self,std::map< std::string,kl::Service * >::iterator *swigiterator){
        delete swigiterator;
      }
SWIGINTERN kl::VCardEmail *std_list_Sl_kl_VCardEmail_Sm__Sg__getitemcopy(std::list< kl::VCardEmail * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				return (*self).front()/*[index]*/;
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN std::list< kl::VCardEmail * >::const_reference std_list_Sl_kl_VCardEmail_Sm__Sg__getitem(std::list< kl::VCardEmail * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardEmail *>::const_iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				return (*it);
				//return (*self)[index];
			}
			else
			{
				throw std::out_of_range("index");
			}
				
		}
SWIGINTERN void std_list_Sl_kl_VCardEmail_Sm__Sg__setitem(std::list< kl::VCardEmail * > *self,int index,kl::VCardEmail *const &val){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardEmail *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				(*it) = val;
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_VCardEmail_Sm__Sg__AddRange(std::list< kl::VCardEmail * > *self,std::list< kl::VCardEmail * > const &values){
			self->insert(self->end(), values.begin(), values.end());
		}
SWIGINTERN void std_list_Sl_kl_VCardEmail_Sm__Sg__Insert(std::list< kl::VCardEmail * > *self,int index,kl::VCardEmail *const &x){
			if (index>=0 && index<(int)self->size()+1)
			{
				std::list<kl::VCardEmail *>::iterator it = self->begin();
				while(index--)
				{
					it++;
				}
				self->insert(it, x);
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN void std_list_Sl_kl_VCardEmail_Sm__Sg__RemoveAt(std::list< kl::VCardEmail * > *self,int index){
			
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardEmail *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				self->erase(it);
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_VCardEmail_Sm__Sg__Reverse(std::list< kl::VCardEmail * > *self){
			std::reverse(self->begin(), self->end());
		}
SWIGINTERN bool std_list_Sl_kl_VCardEmail_Sm__Sg__Contains(std::list< kl::VCardEmail * > *self,kl::VCardEmail *const &value){
		return std::find(self->begin(), self->end(), value) != self->end();
	}
SWIGINTERN int std_list_Sl_kl_VCardEmail_Sm__Sg__IndexOf(std::list< kl::VCardEmail * > *self,kl::VCardEmail *const &value){
		int index = -1;
		std::list< kl::VCardEmail * >::const_iterator it = self->begin();
		while (it != self->end())
		{
			index++;
			if ( value == (*it) ) // 必须重载==操作符才能生效
			{
				break;
			}
			it++;
		}
		return index;
	}
SWIGINTERN bool std_list_Sl_kl_VCardEmail_Sm__Sg__Remove(std::list< kl::VCardEmail * > *self,kl::VCardEmail *const &value){
		std::list< kl::VCardEmail * >::iterator it = std::find(self->begin(), self->end(), value);
		if (it != self->end()) 
		{
			self->erase(it);
			return true;
		}
		return false;
	}
SWIGINTERN kl::VCardAddress *std_list_Sl_kl_VCardAddress_Sm__Sg__getitemcopy(std::list< kl::VCardAddress * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				return (*self).front()/*[index]*/;
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN std::list< kl::VCardAddress * >::const_reference std_list_Sl_kl_VCardAddress_Sm__Sg__getitem(std::list< kl::VCardAddress * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardAddress *>::const_iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				return (*it);
				//return (*self)[index];
			}
			else
			{
				throw std::out_of_range("index");
			}
				
		}
SWIGINTERN void std_list_Sl_kl_VCardAddress_Sm__Sg__setitem(std::list< kl::VCardAddress * > *self,int index,kl::VCardAddress *const &val){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardAddress *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				(*it) = val;
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_VCardAddress_Sm__Sg__AddRange(std::list< kl::VCardAddress * > *self,std::list< kl::VCardAddress * > const &values){
			self->insert(self->end(), values.begin(), values.end());
		}
SWIGINTERN void std_list_Sl_kl_VCardAddress_Sm__Sg__Insert(std::list< kl::VCardAddress * > *self,int index,kl::VCardAddress *const &x){
			if (index>=0 && index<(int)self->size()+1)
			{
				std::list<kl::VCardAddress *>::iterator it = self->begin();
				while(index--)
				{
					it++;
				}
				self->insert(it, x);
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN void std_list_Sl_kl_VCardAddress_Sm__Sg__RemoveAt(std::list< kl::VCardAddress * > *self,int index){
			
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardAddress *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				self->erase(it);
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_VCardAddress_Sm__Sg__Reverse(std::list< kl::VCardAddress * > *self){
			std::reverse(self->begin(), self->end());
		}
SWIGINTERN bool std_list_Sl_kl_VCardAddress_Sm__Sg__Contains(std::list< kl::VCardAddress * > *self,kl::VCardAddress *const &value){
		return std::find(self->begin(), self->end(), value) != self->end();
	}
SWIGINTERN int std_list_Sl_kl_VCardAddress_Sm__Sg__IndexOf(std::list< kl::VCardAddress * > *self,kl::VCardAddress *const &value){
		int index = -1;
		std::list< kl::VCardAddress * >::const_iterator it = self->begin();
		while (it != self->end())
		{
			index++;
			if ( value == (*it) ) // 必须重载==操作符才能生效
			{
				break;
			}
			it++;
		}
		return index;
	}
SWIGINTERN bool std_list_Sl_kl_VCardAddress_Sm__Sg__Remove(std::list< kl::VCardAddress * > *self,kl::VCardAddress *const &value){
		std::list< kl::VCardAddress * >::iterator it = std::find(self->begin(), self->end(), value);
		if (it != self->end()) 
		{
			self->erase(it);
			return true;
		}
		return false;
	}
SWIGINTERN kl::VCardLabel *std_list_Sl_kl_VCardLabel_Sm__Sg__getitemcopy(std::list< kl::VCardLabel * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				return (*self).front()/*[index]*/;
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN std::list< kl::VCardLabel * >::const_reference std_list_Sl_kl_VCardLabel_Sm__Sg__getitem(std::list< kl::VCardLabel * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardLabel *>::const_iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				return (*it);
				//return (*self)[index];
			}
			else
			{
				throw std::out_of_range("index");
			}
				
		}
SWIGINTERN void std_list_Sl_kl_VCardLabel_Sm__Sg__setitem(std::list< kl::VCardLabel * > *self,int index,kl::VCardLabel *const &val){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardLabel *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				(*it) = val;
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_VCardLabel_Sm__Sg__AddRange(std::list< kl::VCardLabel * > *self,std::list< kl::VCardLabel * > const &values){
			self->insert(self->end(), values.begin(), values.end());
		}
SWIGINTERN void std_list_Sl_kl_VCardLabel_Sm__Sg__Insert(std::list< kl::VCardLabel * > *self,int index,kl::VCardLabel *const &x){
			if (index>=0 && index<(int)self->size()+1)
			{
				std::list<kl::VCardLabel *>::iterator it = self->begin();
				while(index--)
				{
					it++;
				}
				self->insert(it, x);
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN void std_list_Sl_kl_VCardLabel_Sm__Sg__RemoveAt(std::list< kl::VCardLabel * > *self,int index){
			
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardLabel *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				self->erase(it);
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_VCardLabel_Sm__Sg__Reverse(std::list< kl::VCardLabel * > *self){
			std::reverse(self->begin(), self->end());
		}
SWIGINTERN bool std_list_Sl_kl_VCardLabel_Sm__Sg__Contains(std::list< kl::VCardLabel * > *self,kl::VCardLabel *const &value){
		return std::find(self->begin(), self->end(), value) != self->end();
	}
SWIGINTERN int std_list_Sl_kl_VCardLabel_Sm__Sg__IndexOf(std::list< kl::VCardLabel * > *self,kl::VCardLabel *const &value){
		int index = -1;
		std::list< kl::VCardLabel * >::const_iterator it = self->begin();
		while (it != self->end())
		{
			index++;
			if ( value == (*it) ) // 必须重载==操作符才能生效
			{
				break;
			}
			it++;
		}
		return index;
	}
SWIGINTERN bool std_list_Sl_kl_VCardLabel_Sm__Sg__Remove(std::list< kl::VCardLabel * > *self,kl::VCardLabel *const &value){
		std::list< kl::VCardLabel * >::iterator it = std::find(self->begin(), self->end(), value);
		if (it != self->end()) 
		{
			self->erase(it);
			return true;
		}
		return false;
	}
SWIGINTERN kl::VCardTelephone *std_list_Sl_kl_VCardTelephone_Sm__Sg__getitemcopy(std::list< kl::VCardTelephone * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				return (*self).front()/*[index]*/;
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN std::list< kl::VCardTelephone * >::const_reference std_list_Sl_kl_VCardTelephone_Sm__Sg__getitem(std::list< kl::VCardTelephone * > *self,int index){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardTelephone *>::const_iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				return (*it);
				//return (*self)[index];
			}
			else
			{
				throw std::out_of_range("index");
			}
				
		}
SWIGINTERN void std_list_Sl_kl_VCardTelephone_Sm__Sg__setitem(std::list< kl::VCardTelephone * > *self,int index,kl::VCardTelephone *const &val){
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardTelephone *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				(*it) = val;
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_VCardTelephone_Sm__Sg__AddRange(std::list< kl::VCardTelephone * > *self,std::list< kl::VCardTelephone * > const &values){
			self->insert(self->end(), values.begin(), values.end());
		}
SWIGINTERN void std_list_Sl_kl_VCardTelephone_Sm__Sg__Insert(std::list< kl::VCardTelephone * > *self,int index,kl::VCardTelephone *const &x){
			if (index>=0 && index<(int)self->size()+1)
			{
				std::list<kl::VCardTelephone *>::iterator it = self->begin();
				while(index--)
				{
					it++;
				}
				self->insert(it, x);
			}
			else
			{
				throw std::out_of_range("index");
			}
		}
SWIGINTERN void std_list_Sl_kl_VCardTelephone_Sm__Sg__RemoveAt(std::list< kl::VCardTelephone * > *self,int index){
			
			if (index>=0 && index<(int)self->size())
			{
				std::list<kl::VCardTelephone *>::iterator it = (*self).begin();
				while(index--)
				{
					it++;
				}
				self->erase(it);
			}
			else
			{
				throw std::out_of_range("index");
			}
			
		}
SWIGINTERN void std_list_Sl_kl_VCardTelephone_Sm__Sg__Reverse(std::list< kl::VCardTelephone * > *self){
			std::reverse(self->begin(), self->end());
		}
SWIGINTERN bool std_list_Sl_kl_VCardTelephone_Sm__Sg__Contains(std::list< kl::VCardTelephone * > *self,kl::VCardTelephone *const &value){
		return std::find(self->begin(), self->end(), value) != self->end();
	}
SWIGINTERN int std_list_Sl_kl_VCardTelephone_Sm__Sg__IndexOf(std::list< kl::VCardTelephone * > *self,kl::VCardTelephone *const &value){
		int index = -1;
		std::list< kl::VCardTelephone * >::const_iterator it = self->begin();
		while (it != self->end())
		{
			index++;
			if ( value == (*it) ) // 必须重载==操作符才能生效
			{
				break;
			}
			it++;
		}
		return index;
	}
SWIGINTERN bool std_list_Sl_kl_VCardTelephone_Sm__Sg__Remove(std::list< kl::VCardTelephone * > *self,kl::VCardTelephone *const &value){
		std::list< kl::VCardTelephone * >::iterator it = std::find(self->begin(), self->end(), value);
		if (it != self->end()) 
		{
			self->erase(it);
			return true;
		}
		return false;
	}


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "klcppwrap_wrap.h"

SwigDirector_XmppCallback::SwigDirector_XmppCallback() : kl::XmppCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_XmppCallback::~SwigDirector_XmppCallback() {
  
}


void SwigDirector_XmppCallback::onLog(gloox::LogLevel level_, gloox::LogArea area_, std::string const &log_) {
  int jlevel_  ;
  int jarea_  ;
  void * jlog_ = 0 ;
  
  if (!swig_callbackonLog) {
    kl::XmppCallback::onLog(level_,area_,log_);
    return;
  } else {
    jlevel_ = level_;
    jarea_ = area_;
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_log_ = 0;
    temp_log_ = utf82utf16( (&log_)->c_str() );
    jlog_ = SWIG_csharp_wstring_callback( temp_log_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_log_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonLog(jlevel_, jarea_, jlog_);
  }
}

void SwigDirector_XmppCallback::onInvaildJID() {
  if (!swig_callbackonInvaildJID) {
    kl::XmppCallback::onInvaildJID();
    return;
  } else {
    swig_callbackonInvaildJID();
  }
}

void SwigDirector_XmppCallback::onInvaildPassword() {
  if (!swig_callbackonInvaildPassword) {
    kl::XmppCallback::onInvaildPassword();
    return;
  } else {
    swig_callbackonInvaildPassword();
  }
}

void SwigDirector_XmppCallback::onTcpConnSuccess() {
  if (!swig_callbackonTcpConnSuccess) {
    kl::XmppCallback::onTcpConnSuccess();
    return;
  } else {
    swig_callbackonTcpConnSuccess();
  }
}

void SwigDirector_XmppCallback::onTcpConnFailed(gloox::ConnectionError error_) {
  int jerror_  ;
  
  if (!swig_callbackonTcpConnFailed) {
    kl::XmppCallback::onTcpConnFailed(error_);
    return;
  } else {
    jerror_ = error_;
    swig_callbackonTcpConnFailed(jerror_);
  }
}

void SwigDirector_XmppCallback::onNegotiatingEncryption() {
  if (!swig_callbackonNegotiatingEncryption) {
    kl::XmppCallback::onNegotiatingEncryption();
    return;
  } else {
    swig_callbackonNegotiatingEncryption();
  }
}

void SwigDirector_XmppCallback::onNegotiatingCompression() {
  if (!swig_callbackonNegotiatingCompression) {
    kl::XmppCallback::onNegotiatingCompression();
    return;
  } else {
    swig_callbackonNegotiatingCompression();
  }
}

void SwigDirector_XmppCallback::onAuthenticating() {
  if (!swig_callbackonAuthenticating) {
    kl::XmppCallback::onAuthenticating();
    return;
  } else {
    swig_callbackonAuthenticating();
  }
}

void SwigDirector_XmppCallback::onAuthFailed() {
  if (!swig_callbackonAuthFailed) {
    kl::XmppCallback::onAuthFailed();
    return;
  } else {
    swig_callbackonAuthFailed();
  }
}

void SwigDirector_XmppCallback::onBindingResource() {
  if (!swig_callbackonBindingResource) {
    kl::XmppCallback::onBindingResource();
    return;
  } else {
    swig_callbackonBindingResource();
  }
}

void SwigDirector_XmppCallback::onCreatingSession() {
  if (!swig_callbackonCreatingSession) {
    kl::XmppCallback::onCreatingSession();
    return;
  } else {
    swig_callbackonCreatingSession();
  }
}

void SwigDirector_XmppCallback::onLoadingRoster() {
  if (!swig_callbackonLoadingRoster) {
    kl::XmppCallback::onLoadingRoster();
    return;
  } else {
    swig_callbackonLoadingRoster();
  }
}

void SwigDirector_XmppCallback::onLoginSuccess() {
  if (!swig_callbackonLoginSuccess) {
    kl::XmppCallback::onLoginSuccess();
    return;
  } else {
    swig_callbackonLoginSuccess();
  }
}

void SwigDirector_XmppCallback::onLogoutSuccess() {
  if (!swig_callbackonLogoutSuccess) {
    kl::XmppCallback::onLogoutSuccess();
    return;
  } else {
    swig_callbackonLogoutSuccess();
  }
}

void SwigDirector_XmppCallback::onRecvRosterPresence(gloox::RosterItem const &item_, std::string const &resource_, gloox::Presence::PresenceType type_, std::string const &msg_) {
  void * jitem_ = 0 ;
  void * jresource_ = 0 ;
  int jtype_  ;
  void * jmsg_ = 0 ;
  
  if (!swig_callbackonRecvRosterPresence) {
    kl::XmppCallback::onRecvRosterPresence(item_,resource_,type_,msg_);
    return;
  } else {
    jitem_ = (gloox::RosterItem *) &item_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_resource_ = 0;
    temp_resource_ = utf82utf16( (&resource_)->c_str() );
    jresource_ = SWIG_csharp_wstring_callback( temp_resource_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_resource_ );
    /* %typemap(directorin) const std::string & */
    
    jtype_ = type_;
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_msg_ = 0;
    temp_msg_ = utf82utf16( (&msg_)->c_str() );
    jmsg_ = SWIG_csharp_wstring_callback( temp_msg_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_msg_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonRecvRosterPresence(jitem_, jresource_, jtype_, jmsg_);
  }
}

void SwigDirector_XmppCallback::onRecvChatMessage(gloox::Message const &msg_, std::string const &xhtml_, bool receipts_) {
  void * jmsg_ = 0 ;
  void * jxhtml_ = 0 ;
  unsigned int jreceipts_  ;
  
  if (!swig_callbackonRecvChatMessage) {
    kl::XmppCallback::onRecvChatMessage(msg_,xhtml_,receipts_);
    return;
  } else {
    jmsg_ = (gloox::Message *) &msg_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_xhtml_ = 0;
    temp_xhtml_ = utf82utf16( (&xhtml_)->c_str() );
    jxhtml_ = SWIG_csharp_wstring_callback( temp_xhtml_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_xhtml_ );
    /* %typemap(directorin) const std::string & */
    
    jreceipts_ = receipts_;
    swig_callbackonRecvChatMessage(jmsg_, jxhtml_, jreceipts_);
  }
}

void SwigDirector_XmppCallback::onRecvAttentionMessage(gloox::JID const &from_) {
  void * jfrom_ = 0 ;
  
  if (!swig_callbackonRecvAttentionMessage) {
    kl::XmppCallback::onRecvAttentionMessage(from_);
    return;
  } else {
    jfrom_ = (gloox::JID *) &from_; 
    swig_callbackonRecvAttentionMessage(jfrom_);
  }
}

void SwigDirector_XmppCallback::onRecvIMailMessage(std::string const &id_, gloox::JID const &from_, kl::IMailSMTPInfo const &iMailSMTPInfo_, bool receipts_) {
  void * jid_ = 0 ;
  void * jfrom_ = 0 ;
  void * jiMailSMTPInfo_ = 0 ;
  unsigned int jreceipts_  ;
  
  if (!swig_callbackonRecvIMailMessage) {
    kl::XmppCallback::onRecvIMailMessage(id_,from_,iMailSMTPInfo_,receipts_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    jfrom_ = (gloox::JID *) &from_; 
    jiMailSMTPInfo_ = (kl::IMailSMTPInfo *) &iMailSMTPInfo_; 
    jreceipts_ = receipts_;
    swig_callbackonRecvIMailMessage(jid_, jfrom_, jiMailSMTPInfo_, jreceipts_);
  }
}

void SwigDirector_XmppCallback::onRecvLocationMessage(std::string const &id_, gloox::JID const &from_, kl::Geoloc const &geoloc_) {
  void * jid_ = 0 ;
  void * jfrom_ = 0 ;
  void * jgeoloc_ = 0 ;
  
  if (!swig_callbackonRecvLocationMessage) {
    kl::XmppCallback::onRecvLocationMessage(id_,from_,geoloc_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    jfrom_ = (gloox::JID *) &from_; 
    jgeoloc_ = (kl::Geoloc *) &geoloc_; 
    swig_callbackonRecvLocationMessage(jid_, jfrom_, jgeoloc_);
  }
}

void SwigDirector_XmppCallback::onRecvReceiptMessage(std::string const &id_, gloox::JID const &from_, std::string const &receiptId_) {
  void * jid_ = 0 ;
  void * jfrom_ = 0 ;
  void * jreceiptId_ = 0 ;
  
  if (!swig_callbackonRecvReceiptMessage) {
    kl::XmppCallback::onRecvReceiptMessage(id_,from_,receiptId_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    jfrom_ = (gloox::JID *) &from_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_receiptId_ = 0;
    temp_receiptId_ = utf82utf16( (&receiptId_)->c_str() );
    jreceiptId_ = SWIG_csharp_wstring_callback( temp_receiptId_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_receiptId_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonRecvReceiptMessage(jid_, jfrom_, jreceiptId_);
  }
}

void SwigDirector_XmppCallback::onRecvRoster(std::map< std::string,gloox::RosterItem * > const &roster_) {
  void * jroster_ = 0 ;
  
  if (!swig_callbackonRecvRoster) {
    kl::XmppCallback::onRecvRoster(roster_);
    return;
  } else {
    jroster_ = (std::map< std::string,gloox::RosterItem * > *) &roster_; 
    swig_callbackonRecvRoster(jroster_);
  }
}

void SwigDirector_XmppCallback::onRosterItemAdded(gloox::RosterItem *item_) {
  void * jitem_ = 0 ;
  
  if (!swig_callbackonRosterItemAdded) {
    kl::XmppCallback::onRosterItemAdded(item_);
    return;
  } else {
    jitem_ = (void *) item_; 
    swig_callbackonRosterItemAdded(jitem_);
  }
}

void SwigDirector_XmppCallback::onRosterItemUpdated(gloox::RosterItem *item_) {
  void * jitem_ = 0 ;
  
  if (!swig_callbackonRosterItemUpdated) {
    kl::XmppCallback::onRosterItemUpdated(item_);
    return;
  } else {
    jitem_ = (void *) item_; 
    swig_callbackonRosterItemUpdated(jitem_);
  }
}

void SwigDirector_XmppCallback::onRosterItemRemoved(gloox::RosterItem *item_) {
  void * jitem_ = 0 ;
  
  if (!swig_callbackonRosterItemRemoved) {
    kl::XmppCallback::onRosterItemRemoved(item_);
    return;
  } else {
    jitem_ = (void *) item_; 
    swig_callbackonRosterItemRemoved(jitem_);
  }
}

void SwigDirector_XmppCallback::onRosterItemSubscribed(gloox::RosterItem *item_) {
  void * jitem_ = 0 ;
  
  if (!swig_callbackonRosterItemSubscribed) {
    kl::XmppCallback::onRosterItemSubscribed(item_);
    return;
  } else {
    jitem_ = (void *) item_; 
    swig_callbackonRosterItemSubscribed(jitem_);
  }
}

void SwigDirector_XmppCallback::onRosterItemUnsubscribed(gloox::RosterItem *item_) {
  void * jitem_ = 0 ;
  
  if (!swig_callbackonRosterItemUnsubscribed) {
    kl::XmppCallback::onRosterItemUnsubscribed(item_);
    return;
  } else {
    jitem_ = (void *) item_; 
    swig_callbackonRosterItemUnsubscribed(jitem_);
  }
}

void SwigDirector_XmppCallback::onRecvSubscriptionRequest(gloox::JID const &jid_, std::string const &msg_) {
  void * jjid_ = 0 ;
  void * jmsg_ = 0 ;
  
  if (!swig_callbackonRecvSubscriptionRequest) {
    kl::XmppCallback::onRecvSubscriptionRequest(jid_,msg_);
    return;
  } else {
    jjid_ = (gloox::JID *) &jid_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_msg_ = 0;
    temp_msg_ = utf82utf16( (&msg_)->c_str() );
    jmsg_ = SWIG_csharp_wstring_callback( temp_msg_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_msg_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonRecvSubscriptionRequest(jjid_, jmsg_);
  }
}

void SwigDirector_XmppCallback::onRetrieveRegistrationInfo(std::string const &username_, std::string const &name_, std::string const &email_) {
  void * jusername_ = 0 ;
  void * jname_ = 0 ;
  void * jemail_ = 0 ;
  
  if (!swig_callbackonRetrieveRegistrationInfo) {
    kl::XmppCallback::onRetrieveRegistrationInfo(username_,name_,email_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_username_ = 0;
    temp_username_ = utf82utf16( (&username_)->c_str() );
    jusername_ = SWIG_csharp_wstring_callback( temp_username_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_username_ );
    /* %typemap(directorin) const std::string & */
    
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_name_ = 0;
    temp_name_ = utf82utf16( (&name_)->c_str() );
    jname_ = SWIG_csharp_wstring_callback( temp_name_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_name_ );
    /* %typemap(directorin) const std::string & */
    
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_email_ = 0;
    temp_email_ = utf82utf16( (&email_)->c_str() );
    jemail_ = SWIG_csharp_wstring_callback( temp_email_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_email_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonRetrieveRegistrationInfo(jusername_, jname_, jemail_);
  }
}

void SwigDirector_XmppCallback::onPublishNicknameSuccess(std::string const &nickname_) {
  void * jnickname_ = 0 ;
  
  if (!swig_callbackonPublishNicknameSuccess) {
    kl::XmppCallback::onPublishNicknameSuccess(nickname_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_nickname_ = 0;
    temp_nickname_ = utf82utf16( (&nickname_)->c_str() );
    jnickname_ = SWIG_csharp_wstring_callback( temp_nickname_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_nickname_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonPublishNicknameSuccess(jnickname_);
  }
}

void SwigDirector_XmppCallback::onPublishNicknameFailed(std::string const &nickname_) {
  void * jnickname_ = 0 ;
  
  if (!swig_callbackonPublishNicknameFailed) {
    kl::XmppCallback::onPublishNicknameFailed(nickname_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_nickname_ = 0;
    temp_nickname_ = utf82utf16( (&nickname_)->c_str() );
    jnickname_ = SWIG_csharp_wstring_callback( temp_nickname_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_nickname_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonPublishNicknameFailed(jnickname_);
  }
}

void SwigDirector_XmppCallback::onRecvNickname(gloox::JID const &from_, std::string const &nickname_) {
  void * jfrom_ = 0 ;
  void * jnickname_ = 0 ;
  
  if (!swig_callbackonRecvNickname) {
    kl::XmppCallback::onRecvNickname(from_,nickname_);
    return;
  } else {
    jfrom_ = (gloox::JID *) &from_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_nickname_ = 0;
    temp_nickname_ = utf82utf16( (&nickname_)->c_str() );
    jnickname_ = SWIG_csharp_wstring_callback( temp_nickname_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_nickname_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonRecvNickname(jfrom_, jnickname_);
  }
}

void SwigDirector_XmppCallback::onPublishAvatarSuccess(std::string const &id_) {
  void * jid_ = 0 ;
  
  if (!swig_callbackonPublishAvatarSuccess) {
    kl::XmppCallback::onPublishAvatarSuccess(id_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonPublishAvatarSuccess(jid_);
  }
}

void SwigDirector_XmppCallback::onPublishAvatarFailed(std::string const &id_) {
  void * jid_ = 0 ;
  
  if (!swig_callbackonPublishAvatarFailed) {
    kl::XmppCallback::onPublishAvatarFailed(id_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonPublishAvatarFailed(jid_);
  }
}

void SwigDirector_XmppCallback::onRecvAvatarMetadata(gloox::JID const &from_, kl::AvatarMetadata const &metadata_) {
  void * jfrom_ = 0 ;
  void * jmetadata_ = 0 ;
  
  if (!swig_callbackonRecvAvatarMetadata) {
    kl::XmppCallback::onRecvAvatarMetadata(from_,metadata_);
    return;
  } else {
    jfrom_ = (gloox::JID *) &from_; 
    jmetadata_ = (kl::AvatarMetadata *) &metadata_; 
    swig_callbackonRecvAvatarMetadata(jfrom_, jmetadata_);
  }
}

void SwigDirector_XmppCallback::onRecvAvatarData(gloox::JID const &from_, std::string const &id_, std::string const &base64_) {
  void * jfrom_ = 0 ;
  void * jid_ = 0 ;
  void * jbase64_ = 0 ;
  
  if (!swig_callbackonRecvAvatarData) {
    kl::XmppCallback::onRecvAvatarData(from_,id_,base64_);
    return;
  } else {
    jfrom_ = (gloox::JID *) &from_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_base64_ = 0;
    temp_base64_ = utf82utf16( (&base64_)->c_str() );
    jbase64_ = SWIG_csharp_wstring_callback( temp_base64_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_base64_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonRecvAvatarData(jfrom_, jid_, jbase64_);
  }
}

void SwigDirector_XmppCallback::onLoadAvatarSuccess(gloox::JID const &from_, std::string const &id_, std::string const &base64_) {
  void * jfrom_ = 0 ;
  void * jid_ = 0 ;
  void * jbase64_ = 0 ;
  
  if (!swig_callbackonLoadAvatarSuccess) {
    kl::XmppCallback::onLoadAvatarSuccess(from_,id_,base64_);
    return;
  } else {
    jfrom_ = (gloox::JID *) &from_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_base64_ = 0;
    temp_base64_ = utf82utf16( (&base64_)->c_str() );
    jbase64_ = SWIG_csharp_wstring_callback( temp_base64_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_base64_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonLoadAvatarSuccess(jfrom_, jid_, jbase64_);
  }
}

void SwigDirector_XmppCallback::onLoadAvatarFailed(gloox::JID const &from_, std::string const &id_) {
  void * jfrom_ = 0 ;
  void * jid_ = 0 ;
  
  if (!swig_callbackonLoadAvatarFailed) {
    kl::XmppCallback::onLoadAvatarFailed(from_,id_);
    return;
  } else {
    jfrom_ = (gloox::JID *) &from_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonLoadAvatarFailed(jfrom_, jid_);
  }
}

void SwigDirector_XmppCallback::onNotifyPersonalInfoChangedSuccess(std::string const &uid_) {
  void * juid_ = 0 ;
  
  if (!swig_callbackonNotifyPersonalInfoChangedSuccess) {
    kl::XmppCallback::onNotifyPersonalInfoChangedSuccess(uid_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_uid_ = 0;
    temp_uid_ = utf82utf16( (&uid_)->c_str() );
    juid_ = SWIG_csharp_wstring_callback( temp_uid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_uid_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonNotifyPersonalInfoChangedSuccess(juid_);
  }
}

void SwigDirector_XmppCallback::onNotifyPersonalInfoChangedFailed(std::string const &uid_) {
  void * juid_ = 0 ;
  
  if (!swig_callbackonNotifyPersonalInfoChangedFailed) {
    kl::XmppCallback::onNotifyPersonalInfoChangedFailed(uid_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_uid_ = 0;
    temp_uid_ = utf82utf16( (&uid_)->c_str() );
    juid_ = SWIG_csharp_wstring_callback( temp_uid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_uid_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonNotifyPersonalInfoChangedFailed(juid_);
  }
}

void SwigDirector_XmppCallback::onRecvPersonalInfoChangedNotification(gloox::JID const &from_) {
  void * jfrom_ = 0 ;
  
  if (!swig_callbackonRecvPersonalInfoChangedNotification) {
    kl::XmppCallback::onRecvPersonalInfoChangedNotification(from_);
    return;
  } else {
    jfrom_ = (gloox::JID *) &from_; 
    swig_callbackonRecvPersonalInfoChangedNotification(jfrom_);
  }
}

void SwigDirector_XmppCallback::onNotifyAddressBookChangedSuccess(std::string const &uid_) {
  void * juid_ = 0 ;
  
  if (!swig_callbackonNotifyAddressBookChangedSuccess) {
    kl::XmppCallback::onNotifyAddressBookChangedSuccess(uid_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_uid_ = 0;
    temp_uid_ = utf82utf16( (&uid_)->c_str() );
    juid_ = SWIG_csharp_wstring_callback( temp_uid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_uid_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonNotifyAddressBookChangedSuccess(juid_);
  }
}

void SwigDirector_XmppCallback::onNotifyAddressBookChangedFailed(std::string const &uid_) {
  void * juid_ = 0 ;
  
  if (!swig_callbackonNotifyAddressBookChangedFailed) {
    kl::XmppCallback::onNotifyAddressBookChangedFailed(uid_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_uid_ = 0;
    temp_uid_ = utf82utf16( (&uid_)->c_str() );
    juid_ = SWIG_csharp_wstring_callback( temp_uid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_uid_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonNotifyAddressBookChangedFailed(juid_);
  }
}

void SwigDirector_XmppCallback::onRecvAddressBookChangedNotification(gloox::JID const &from_, kl::AddressBookInfo const &addressBookInfo_) {
  void * jfrom_ = 0 ;
  void * jaddressBookInfo_ = 0 ;
  
  if (!swig_callbackonRecvAddressBookChangedNotification) {
    kl::XmppCallback::onRecvAddressBookChangedNotification(from_,addressBookInfo_);
    return;
  } else {
    jfrom_ = (gloox::JID *) &from_; 
    jaddressBookInfo_ = (kl::AddressBookInfo *) &addressBookInfo_; 
    swig_callbackonRecvAddressBookChangedNotification(jfrom_, jaddressBookInfo_);
  }
}

void SwigDirector_XmppCallback::onRecvBackgroundChangedNotification(gloox::JID const &from_, kl::BackgroundInfo const &backgroundInfo_) {
  void * jfrom_ = 0 ;
  void * jbackgroundInfo_ = 0 ;
  
  if (!swig_callbackonRecvBackgroundChangedNotification) {
    kl::XmppCallback::onRecvBackgroundChangedNotification(from_,backgroundInfo_);
    return;
  } else {
    jfrom_ = (gloox::JID *) &from_; 
    jbackgroundInfo_ = (kl::BackgroundInfo *) &backgroundInfo_; 
    swig_callbackonRecvBackgroundChangedNotification(jfrom_, jbackgroundInfo_);
  }
}

void SwigDirector_XmppCallback::onPublishMicroblogSuccess(std::string const &id_) {
  void * jid_ = 0 ;
  
  if (!swig_callbackonPublishMicroblogSuccess) {
    kl::XmppCallback::onPublishMicroblogSuccess(id_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonPublishMicroblogSuccess(jid_);
  }
}

void SwigDirector_XmppCallback::onPublishMicroblogFailed(std::string const &id_) {
  void * jid_ = 0 ;
  
  if (!swig_callbackonPublishMicroblogFailed) {
    kl::XmppCallback::onPublishMicroblogFailed(id_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonPublishMicroblogFailed(jid_);
  }
}

void SwigDirector_XmppCallback::onDeleteMicroblogSuccess(std::string const &id_) {
  void * jid_ = 0 ;
  
  if (!swig_callbackonDeleteMicroblogSuccess) {
    kl::XmppCallback::onDeleteMicroblogSuccess(id_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonDeleteMicroblogSuccess(jid_);
  }
}

void SwigDirector_XmppCallback::onDeleteMicroblogFailed(std::string const &id_) {
  void * jid_ = 0 ;
  
  if (!swig_callbackonDeleteMicroblogFailed) {
    kl::XmppCallback::onDeleteMicroblogFailed(id_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonDeleteMicroblogFailed(jid_);
  }
}

void SwigDirector_XmppCallback::onRecvMicroblog(kl::Microblog const &microblog_) {
  void * jmicroblog_ = 0 ;
  
  if (!swig_callbackonRecvMicroblog) {
    kl::XmppCallback::onRecvMicroblog(microblog_);
    return;
  } else {
    jmicroblog_ = (kl::Microblog *) &microblog_; 
    swig_callbackonRecvMicroblog(jmicroblog_);
  }
}

void SwigDirector_XmppCallback::onMicroblogDeleted(std::string const &id_) {
  void * jid_ = 0 ;
  
  if (!swig_callbackonMicroblogDeleted) {
    kl::XmppCallback::onMicroblogDeleted(id_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_id_ = 0;
    temp_id_ = utf82utf16( (&id_)->c_str() );
    jid_ = SWIG_csharp_wstring_callback( temp_id_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_id_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonMicroblogDeleted(jid_);
  }
}

void SwigDirector_XmppCallback::onCreateMUCRoomSuccess(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonCreateMUCRoomSuccess) {
    kl::XmppCallback::onCreateMUCRoomSuccess(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonCreateMUCRoomSuccess(jroom_);
  }
}

void SwigDirector_XmppCallback::onCreateMUCRoomFailed(gloox::JID const &room_, kl::CreateMUCRoomError error_) {
  void * jroom_ = 0 ;
  int jerror_  ;
  
  if (!swig_callbackonCreateMUCRoomFailed) {
    kl::XmppCallback::onCreateMUCRoomFailed(room_,error_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    jerror_ = error_;
    swig_callbackonCreateMUCRoomFailed(jroom_, jerror_);
  }
}

void SwigDirector_XmppCallback::onConfigMUCRoomSuccess(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonConfigMUCRoomSuccess) {
    kl::XmppCallback::onConfigMUCRoomSuccess(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonConfigMUCRoomSuccess(jroom_);
  }
}

void SwigDirector_XmppCallback::onConfigMUCRoomFailed(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonConfigMUCRoomFailed) {
    kl::XmppCallback::onConfigMUCRoomFailed(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonConfigMUCRoomFailed(jroom_);
  }
}

void SwigDirector_XmppCallback::onDestroyMUCRoomSuccess(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonDestroyMUCRoomSuccess) {
    kl::XmppCallback::onDestroyMUCRoomSuccess(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonDestroyMUCRoomSuccess(jroom_);
  }
}

void SwigDirector_XmppCallback::onDestroyMUCRoomFailed(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonDestroyMUCRoomFailed) {
    kl::XmppCallback::onDestroyMUCRoomFailed(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonDestroyMUCRoomFailed(jroom_);
  }
}

void SwigDirector_XmppCallback::onRecvMUCRoomPresence(gloox::JID const &room_, std::string const &participantOldNickname_, std::string const &participantNewNickname_, gloox::JID const &participantJid_, gloox::Presence const &pres_, gloox::MUCRoomAffiliation affi_, gloox::MUCRoomRole role_) {
  void * jroom_ = 0 ;
  void * jparticipantOldNickname_ = 0 ;
  void * jparticipantNewNickname_ = 0 ;
  void * jparticipantJid_ = 0 ;
  void * jpres_ = 0 ;
  int jaffi_  ;
  int jrole_  ;
  
  if (!swig_callbackonRecvMUCRoomPresence) {
    kl::XmppCallback::onRecvMUCRoomPresence(room_,participantOldNickname_,participantNewNickname_,participantJid_,pres_,affi_,role_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_participantOldNickname_ = 0;
    temp_participantOldNickname_ = utf82utf16( (&participantOldNickname_)->c_str() );
    jparticipantOldNickname_ = SWIG_csharp_wstring_callback( temp_participantOldNickname_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_participantOldNickname_ );
    /* %typemap(directorin) const std::string & */
    
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_participantNewNickname_ = 0;
    temp_participantNewNickname_ = utf82utf16( (&participantNewNickname_)->c_str() );
    jparticipantNewNickname_ = SWIG_csharp_wstring_callback( temp_participantNewNickname_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_participantNewNickname_ );
    /* %typemap(directorin) const std::string & */
    
    jparticipantJid_ = (gloox::JID *) &participantJid_; 
    jpres_ = (gloox::Presence *) &pres_; 
    jaffi_ = affi_;
    jrole_ = role_;
    swig_callbackonRecvMUCRoomPresence(jroom_, jparticipantOldNickname_, jparticipantNewNickname_, jparticipantJid_, jpres_, jaffi_, jrole_);
  }
}

void SwigDirector_XmppCallback::onRecvMUCRoomMessage(gloox::JID const &room_, gloox::Message const &msg_, std::string const &xhtml_) {
  void * jroom_ = 0 ;
  void * jmsg_ = 0 ;
  void * jxhtml_ = 0 ;
  
  if (!swig_callbackonRecvMUCRoomMessage) {
    kl::XmppCallback::onRecvMUCRoomMessage(room_,msg_,xhtml_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    jmsg_ = (gloox::Message *) &msg_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_xhtml_ = 0;
    temp_xhtml_ = utf82utf16( (&xhtml_)->c_str() );
    jxhtml_ = SWIG_csharp_wstring_callback( temp_xhtml_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_xhtml_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonRecvMUCRoomMessage(jroom_, jmsg_, jxhtml_);
  }
}

void SwigDirector_XmppCallback::onModifyMUCRoomMemberListSuccess(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonModifyMUCRoomMemberListSuccess) {
    kl::XmppCallback::onModifyMUCRoomMemberListSuccess(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonModifyMUCRoomMemberListSuccess(jroom_);
  }
}

void SwigDirector_XmppCallback::onModifyMUCRoomMemberListFailed(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonModifyMUCRoomMemberListFailed) {
    kl::XmppCallback::onModifyMUCRoomMemberListFailed(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonModifyMUCRoomMemberListFailed(jroom_);
  }
}

void SwigDirector_XmppCallback::onModifyMUCRoomOwnerListSuccess(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonModifyMUCRoomOwnerListSuccess) {
    kl::XmppCallback::onModifyMUCRoomOwnerListSuccess(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonModifyMUCRoomOwnerListSuccess(jroom_);
  }
}

void SwigDirector_XmppCallback::onModifyMUCRoomOwnerListFailed(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonModifyMUCRoomOwnerListFailed) {
    kl::XmppCallback::onModifyMUCRoomOwnerListFailed(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonModifyMUCRoomOwnerListFailed(jroom_);
  }
}

void SwigDirector_XmppCallback::onRecvMUCRoomDirectInvitation(gloox::JID const &room_, gloox::JID const &invitor_, std::string const &reason_) {
  void * jroom_ = 0 ;
  void * jinvitor_ = 0 ;
  void * jreason_ = 0 ;
  
  if (!swig_callbackonRecvMUCRoomDirectInvitation) {
    kl::XmppCallback::onRecvMUCRoomDirectInvitation(room_,invitor_,reason_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    jinvitor_ = (gloox::JID *) &invitor_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_reason_ = 0;
    temp_reason_ = utf82utf16( (&reason_)->c_str() );
    jreason_ = SWIG_csharp_wstring_callback( temp_reason_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_reason_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonRecvMUCRoomDirectInvitation(jroom_, jinvitor_, jreason_);
  }
}

void SwigDirector_XmppCallback::onRecvMUCRoomMediatedInvitation(gloox::JID const &room_, gloox::JID const &invitor_, std::string const &reason_) {
  void * jroom_ = 0 ;
  void * jinvitor_ = 0 ;
  void * jreason_ = 0 ;
  
  if (!swig_callbackonRecvMUCRoomMediatedInvitation) {
    kl::XmppCallback::onRecvMUCRoomMediatedInvitation(room_,invitor_,reason_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    jinvitor_ = (gloox::JID *) &invitor_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_reason_ = 0;
    temp_reason_ = utf82utf16( (&reason_)->c_str() );
    jreason_ = SWIG_csharp_wstring_callback( temp_reason_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_reason_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonRecvMUCRoomMediatedInvitation(jroom_, jinvitor_, jreason_);
  }
}

void SwigDirector_XmppCallback::onRetrieveMUCRoomMemberList(gloox::JID const &room_, gloox::StringList const &members_) {
  void * jroom_ = 0 ;
  void * jmembers_ = 0 ;
  
  if (!swig_callbackonRetrieveMUCRoomMemberList) {
    kl::XmppCallback::onRetrieveMUCRoomMemberList(room_,members_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    jmembers_ = (gloox::StringList *) &members_; 
    swig_callbackonRetrieveMUCRoomMemberList(jroom_, jmembers_);
  }
}

void SwigDirector_XmppCallback::onRetrieveMUCRoomOwnerList(gloox::JID const &room_, gloox::StringList const &owners_) {
  void * jroom_ = 0 ;
  void * jowners_ = 0 ;
  
  if (!swig_callbackonRetrieveMUCRoomOwnerList) {
    kl::XmppCallback::onRetrieveMUCRoomOwnerList(room_,owners_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    jowners_ = (gloox::StringList *) &owners_; 
    swig_callbackonRetrieveMUCRoomOwnerList(jroom_, jowners_);
  }
}

void SwigDirector_XmppCallback::onMUCRoomSubjectChanged(gloox::JID const &room_, std::string const &nickname_, std::string const &subject_) {
  void * jroom_ = 0 ;
  void * jnickname_ = 0 ;
  void * jsubject_ = 0 ;
  
  if (!swig_callbackonMUCRoomSubjectChanged) {
    kl::XmppCallback::onMUCRoomSubjectChanged(room_,nickname_,subject_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_nickname_ = 0;
    temp_nickname_ = utf82utf16( (&nickname_)->c_str() );
    jnickname_ = SWIG_csharp_wstring_callback( temp_nickname_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_nickname_ );
    /* %typemap(directorin) const std::string & */
    
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_subject_ = 0;
    temp_subject_ = utf82utf16( (&subject_)->c_str() );
    jsubject_ = SWIG_csharp_wstring_callback( temp_subject_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_subject_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonMUCRoomSubjectChanged(jroom_, jnickname_, jsubject_);
  }
}

void SwigDirector_XmppCallback::onRetrieveMUCRoomInfo(gloox::JID const &room_, kl::MUCRoomInfo const &info_) {
  void * jroom_ = 0 ;
  void * jinfo_ = 0 ;
  
  if (!swig_callbackonRetrieveMUCRoomInfo) {
    kl::XmppCallback::onRetrieveMUCRoomInfo(room_,info_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    jinfo_ = (kl::MUCRoomInfo *) &info_; 
    swig_callbackonRetrieveMUCRoomInfo(jroom_, jinfo_);
  }
}

void SwigDirector_XmppCallback::onRetrieveMUCRoomConfig(gloox::JID const &room_, kl::MUCRoomConfig const &config_) {
  void * jroom_ = 0 ;
  void * jconfig_ = 0 ;
  
  if (!swig_callbackonRetrieveMUCRoomConfig) {
    kl::XmppCallback::onRetrieveMUCRoomConfig(room_,config_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    jconfig_ = (kl::MUCRoomConfig *) &config_; 
    swig_callbackonRetrieveMUCRoomConfig(jroom_, jconfig_);
  }
}

void SwigDirector_XmppCallback::onMUCRoomInvitationRejected(gloox::JID const &room_, gloox::JID const &invitee_, std::string const &reason_) {
  void * jroom_ = 0 ;
  void * jinvitee_ = 0 ;
  void * jreason_ = 0 ;
  
  if (!swig_callbackonMUCRoomInvitationRejected) {
    kl::XmppCallback::onMUCRoomInvitationRejected(room_,invitee_,reason_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    jinvitee_ = (gloox::JID *) &invitee_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_reason_ = 0;
    temp_reason_ = utf82utf16( (&reason_)->c_str() );
    jreason_ = SWIG_csharp_wstring_callback( temp_reason_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_reason_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonMUCRoomInvitationRejected(jroom_, jinvitee_, jreason_);
  }
}

void SwigDirector_XmppCallback::onChangeMUCNicknameConflict(gloox::JID const &room_) {
  void * jroom_ = 0 ;
  
  if (!swig_callbackonChangeMUCNicknameConflict) {
    kl::XmppCallback::onChangeMUCNicknameConflict(room_);
    return;
  } else {
    jroom_ = (gloox::JID *) &room_; 
    swig_callbackonChangeMUCNicknameConflict(jroom_);
  }
}

void SwigDirector_XmppCallback::onFtRequest(gloox::JID const &initiator_, std::string const &sid_, kl::FileMetadata const &file_, bool supportS5b_, bool supportIbb_, bool supportOob_) {
  void * jinitiator_ = 0 ;
  void * jsid_ = 0 ;
  void * jfile_ = 0 ;
  unsigned int jsupportS5b_  ;
  unsigned int jsupportIbb_  ;
  unsigned int jsupportOob_  ;
  
  if (!swig_callbackonFtRequest) {
    kl::XmppCallback::onFtRequest(initiator_,sid_,file_,supportS5b_,supportIbb_,supportOob_);
    return;
  } else {
    jinitiator_ = (gloox::JID *) &initiator_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_sid_ = 0;
    temp_sid_ = utf82utf16( (&sid_)->c_str() );
    jsid_ = SWIG_csharp_wstring_callback( temp_sid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_sid_ );
    /* %typemap(directorin) const std::string & */
    
    jfile_ = (kl::FileMetadata *) &file_; 
    jsupportS5b_ = supportS5b_;
    jsupportIbb_ = supportIbb_;
    jsupportOob_ = supportOob_;
    swig_callbackonFtRequest(jinitiator_, jsid_, jfile_, jsupportS5b_, jsupportIbb_, jsupportOob_);
  }
}

void SwigDirector_XmppCallback::onFtBytestreamCreated(std::string const &sid_, gloox::Bytestream::StreamType type_, gloox::JID const &initiator_, gloox::JID const &target_) {
  void * jsid_ = 0 ;
  int jtype_  ;
  void * jinitiator_ = 0 ;
  void * jtarget_ = 0 ;
  
  if (!swig_callbackonFtBytestreamCreated) {
    kl::XmppCallback::onFtBytestreamCreated(sid_,type_,initiator_,target_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_sid_ = 0;
    temp_sid_ = utf82utf16( (&sid_)->c_str() );
    jsid_ = SWIG_csharp_wstring_callback( temp_sid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_sid_ );
    /* %typemap(directorin) const std::string & */
    
    jtype_ = type_;
    jinitiator_ = (gloox::JID *) &initiator_; 
    jtarget_ = (gloox::JID *) &target_; 
    swig_callbackonFtBytestreamCreated(jsid_, jtype_, jinitiator_, jtarget_);
  }
}

void SwigDirector_XmppCallback::onFtIncomingBytestreamOpened(std::string const &sid_) {
  void * jsid_ = 0 ;
  
  if (!swig_callbackonFtIncomingBytestreamOpened) {
    kl::XmppCallback::onFtIncomingBytestreamOpened(sid_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_sid_ = 0;
    temp_sid_ = utf82utf16( (&sid_)->c_str() );
    jsid_ = SWIG_csharp_wstring_callback( temp_sid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_sid_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonFtIncomingBytestreamOpened(jsid_);
  }
}

void SwigDirector_XmppCallback::onFtOutgoingBytestreamOpened(std::string const &sid_) {
  void * jsid_ = 0 ;
  
  if (!swig_callbackonFtOutgoingBytestreamOpened) {
    kl::XmppCallback::onFtOutgoingBytestreamOpened(sid_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_sid_ = 0;
    temp_sid_ = utf82utf16( (&sid_)->c_str() );
    jsid_ = SWIG_csharp_wstring_callback( temp_sid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_sid_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonFtOutgoingBytestreamOpened(jsid_);
  }
}

void SwigDirector_XmppCallback::onRecvFtBytestreamData(std::string const &sid_, kl::BytestreamData const &data_) {
  void * jsid_ = 0 ;
  void * jdata_ = 0 ;
  
  if (!swig_callbackonRecvFtBytestreamData) {
    kl::XmppCallback::onRecvFtBytestreamData(sid_,data_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_sid_ = 0;
    temp_sid_ = utf82utf16( (&sid_)->c_str() );
    jsid_ = SWIG_csharp_wstring_callback( temp_sid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_sid_ );
    /* %typemap(directorin) const std::string & */
    
    jdata_ = (kl::BytestreamData *) &data_; 
    swig_callbackonRecvFtBytestreamData(jsid_, jdata_);
  }
}

void SwigDirector_XmppCallback::onFtBytestreamClosed(std::string const &sid_) {
  void * jsid_ = 0 ;
  
  if (!swig_callbackonFtBytestreamClosed) {
    kl::XmppCallback::onFtBytestreamClosed(sid_);
    return;
  } else {
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_sid_ = 0;
    temp_sid_ = utf82utf16( (&sid_)->c_str() );
    jsid_ = SWIG_csharp_wstring_callback( temp_sid_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_sid_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonFtBytestreamClosed(jsid_);
  }
}

void SwigDirector_XmppCallback::onDiscoItem(gloox::JID const &parent_, gloox::JID const &jid_, std::string const &node_, std::string const &name_) {
  void * jparent_ = 0 ;
  void * jjid_ = 0 ;
  void * jnode_ = 0 ;
  void * jname_ = 0 ;
  
  if (!swig_callbackonDiscoItem) {
    kl::XmppCallback::onDiscoItem(parent_,jid_,node_,name_);
    return;
  } else {
    jparent_ = (gloox::JID *) &parent_; 
    jjid_ = (gloox::JID *) &jid_; 
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_node_ = 0;
    temp_node_ = utf82utf16( (&node_)->c_str() );
    jnode_ = SWIG_csharp_wstring_callback( temp_node_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_node_ );
    /* %typemap(directorin) const std::string & */
    
    
    /* %typemap(directorin) const std::string & */
    wchar_t* temp_name_ = 0;
    temp_name_ = utf82utf16( (&name_)->c_str() );
    jname_ = SWIG_csharp_wstring_callback( temp_name_ ); // invoke System.Runtime.InteropServices.Marshal.PtrToStringUni impl C++ str --> C# str
    free( temp_name_ );
    /* %typemap(directorin) const std::string & */
    
    swig_callbackonDiscoItem(jparent_, jjid_, jnode_, jname_);
  }
}

void SwigDirector_XmppCallback::swig_connect_director(SWIG_Callback0_t callbackonLog, SWIG_Callback1_t callbackonInvaildJID, SWIG_Callback2_t callbackonInvaildPassword, SWIG_Callback3_t callbackonTcpConnSuccess, SWIG_Callback4_t callbackonTcpConnFailed, SWIG_Callback5_t callbackonNegotiatingEncryption, SWIG_Callback6_t callbackonNegotiatingCompression, SWIG_Callback7_t callbackonAuthenticating, SWIG_Callback8_t callbackonAuthFailed, SWIG_Callback9_t callbackonBindingResource, SWIG_Callback10_t callbackonCreatingSession, SWIG_Callback11_t callbackonLoadingRoster, SWIG_Callback12_t callbackonLoginSuccess, SWIG_Callback13_t callbackonLogoutSuccess, SWIG_Callback14_t callbackonRecvRosterPresence, SWIG_Callback15_t callbackonRecvChatMessage, SWIG_Callback16_t callbackonRecvAttentionMessage, SWIG_Callback17_t callbackonRecvIMailMessage, SWIG_Callback18_t callbackonRecvLocationMessage, SWIG_Callback19_t callbackonRecvReceiptMessage, SWIG_Callback20_t callbackonRecvRoster, SWIG_Callback21_t callbackonRosterItemAdded, SWIG_Callback22_t callbackonRosterItemUpdated, SWIG_Callback23_t callbackonRosterItemRemoved, SWIG_Callback24_t callbackonRosterItemSubscribed, SWIG_Callback25_t callbackonRosterItemUnsubscribed, SWIG_Callback26_t callbackonRecvSubscriptionRequest, SWIG_Callback27_t callbackonRetrieveRegistrationInfo, SWIG_Callback28_t callbackonPublishNicknameSuccess, SWIG_Callback29_t callbackonPublishNicknameFailed, SWIG_Callback30_t callbackonRecvNickname, SWIG_Callback31_t callbackonPublishAvatarSuccess, SWIG_Callback32_t callbackonPublishAvatarFailed, SWIG_Callback33_t callbackonRecvAvatarMetadata, SWIG_Callback34_t callbackonRecvAvatarData, SWIG_Callback35_t callbackonLoadAvatarSuccess, SWIG_Callback36_t callbackonLoadAvatarFailed, SWIG_Callback37_t callbackonNotifyPersonalInfoChangedSuccess, SWIG_Callback38_t callbackonNotifyPersonalInfoChangedFailed, SWIG_Callback39_t callbackonRecvPersonalInfoChangedNotification, SWIG_Callback40_t callbackonNotifyAddressBookChangedSuccess, SWIG_Callback41_t callbackonNotifyAddressBookChangedFailed, SWIG_Callback42_t callbackonRecvAddressBookChangedNotification, SWIG_Callback43_t callbackonRecvBackgroundChangedNotification, SWIG_Callback44_t callbackonPublishMicroblogSuccess, SWIG_Callback45_t callbackonPublishMicroblogFailed, SWIG_Callback46_t callbackonDeleteMicroblogSuccess, SWIG_Callback47_t callbackonDeleteMicroblogFailed, SWIG_Callback48_t callbackonRecvMicroblog, SWIG_Callback49_t callbackonMicroblogDeleted, SWIG_Callback50_t callbackonCreateMUCRoomSuccess, SWIG_Callback51_t callbackonCreateMUCRoomFailed, SWIG_Callback52_t callbackonConfigMUCRoomSuccess, SWIG_Callback53_t callbackonConfigMUCRoomFailed, SWIG_Callback54_t callbackonDestroyMUCRoomSuccess, SWIG_Callback55_t callbackonDestroyMUCRoomFailed, SWIG_Callback56_t callbackonRecvMUCRoomPresence, SWIG_Callback57_t callbackonRecvMUCRoomMessage, SWIG_Callback58_t callbackonModifyMUCRoomMemberListSuccess, SWIG_Callback59_t callbackonModifyMUCRoomMemberListFailed, SWIG_Callback60_t callbackonModifyMUCRoomOwnerListSuccess, SWIG_Callback61_t callbackonModifyMUCRoomOwnerListFailed, SWIG_Callback62_t callbackonRecvMUCRoomDirectInvitation, SWIG_Callback63_t callbackonRecvMUCRoomMediatedInvitation, SWIG_Callback64_t callbackonRetrieveMUCRoomMemberList, SWIG_Callback65_t callbackonRetrieveMUCRoomOwnerList, SWIG_Callback66_t callbackonMUCRoomSubjectChanged, SWIG_Callback67_t callbackonRetrieveMUCRoomInfo, SWIG_Callback68_t callbackonRetrieveMUCRoomConfig, SWIG_Callback69_t callbackonMUCRoomInvitationRejected, SWIG_Callback70_t callbackonChangeMUCNicknameConflict, SWIG_Callback71_t callbackonFtRequest, SWIG_Callback72_t callbackonFtBytestreamCreated, SWIG_Callback73_t callbackonFtIncomingBytestreamOpened, SWIG_Callback74_t callbackonFtOutgoingBytestreamOpened, SWIG_Callback75_t callbackonRecvFtBytestreamData, SWIG_Callback76_t callbackonFtBytestreamClosed, SWIG_Callback77_t callbackonDiscoItem) {
  swig_callbackonLog = callbackonLog;
  swig_callbackonInvaildJID = callbackonInvaildJID;
  swig_callbackonInvaildPassword = callbackonInvaildPassword;
  swig_callbackonTcpConnSuccess = callbackonTcpConnSuccess;
  swig_callbackonTcpConnFailed = callbackonTcpConnFailed;
  swig_callbackonNegotiatingEncryption = callbackonNegotiatingEncryption;
  swig_callbackonNegotiatingCompression = callbackonNegotiatingCompression;
  swig_callbackonAuthenticating = callbackonAuthenticating;
  swig_callbackonAuthFailed = callbackonAuthFailed;
  swig_callbackonBindingResource = callbackonBindingResource;
  swig_callbackonCreatingSession = callbackonCreatingSession;
  swig_callbackonLoadingRoster = callbackonLoadingRoster;
  swig_callbackonLoginSuccess = callbackonLoginSuccess;
  swig_callbackonLogoutSuccess = callbackonLogoutSuccess;
  swig_callbackonRecvRosterPresence = callbackonRecvRosterPresence;
  swig_callbackonRecvChatMessage = callbackonRecvChatMessage;
  swig_callbackonRecvAttentionMessage = callbackonRecvAttentionMessage;
  swig_callbackonRecvIMailMessage = callbackonRecvIMailMessage;
  swig_callbackonRecvLocationMessage = callbackonRecvLocationMessage;
  swig_callbackonRecvReceiptMessage = callbackonRecvReceiptMessage;
  swig_callbackonRecvRoster = callbackonRecvRoster;
  swig_callbackonRosterItemAdded = callbackonRosterItemAdded;
  swig_callbackonRosterItemUpdated = callbackonRosterItemUpdated;
  swig_callbackonRosterItemRemoved = callbackonRosterItemRemoved;
  swig_callbackonRosterItemSubscribed = callbackonRosterItemSubscribed;
  swig_callbackonRosterItemUnsubscribed = callbackonRosterItemUnsubscribed;
  swig_callbackonRecvSubscriptionRequest = callbackonRecvSubscriptionRequest;
  swig_callbackonRetrieveRegistrationInfo = callbackonRetrieveRegistrationInfo;
  swig_callbackonPublishNicknameSuccess = callbackonPublishNicknameSuccess;
  swig_callbackonPublishNicknameFailed = callbackonPublishNicknameFailed;
  swig_callbackonRecvNickname = callbackonRecvNickname;
  swig_callbackonPublishAvatarSuccess = callbackonPublishAvatarSuccess;
  swig_callbackonPublishAvatarFailed = callbackonPublishAvatarFailed;
  swig_callbackonRecvAvatarMetadata = callbackonRecvAvatarMetadata;
  swig_callbackonRecvAvatarData = callbackonRecvAvatarData;
  swig_callbackonLoadAvatarSuccess = callbackonLoadAvatarSuccess;
  swig_callbackonLoadAvatarFailed = callbackonLoadAvatarFailed;
  swig_callbackonNotifyPersonalInfoChangedSuccess = callbackonNotifyPersonalInfoChangedSuccess;
  swig_callbackonNotifyPersonalInfoChangedFailed = callbackonNotifyPersonalInfoChangedFailed;
  swig_callbackonRecvPersonalInfoChangedNotification = callbackonRecvPersonalInfoChangedNotification;
  swig_callbackonNotifyAddressBookChangedSuccess = callbackonNotifyAddressBookChangedSuccess;
  swig_callbackonNotifyAddressBookChangedFailed = callbackonNotifyAddressBookChangedFailed;
  swig_callbackonRecvAddressBookChangedNotification = callbackonRecvAddressBookChangedNotification;
  swig_callbackonRecvBackgroundChangedNotification = callbackonRecvBackgroundChangedNotification;
  swig_callbackonPublishMicroblogSuccess = callbackonPublishMicroblogSuccess;
  swig_callbackonPublishMicroblogFailed = callbackonPublishMicroblogFailed;
  swig_callbackonDeleteMicroblogSuccess = callbackonDeleteMicroblogSuccess;
  swig_callbackonDeleteMicroblogFailed = callbackonDeleteMicroblogFailed;
  swig_callbackonRecvMicroblog = callbackonRecvMicroblog;
  swig_callbackonMicroblogDeleted = callbackonMicroblogDeleted;
  swig_callbackonCreateMUCRoomSuccess = callbackonCreateMUCRoomSuccess;
  swig_callbackonCreateMUCRoomFailed = callbackonCreateMUCRoomFailed;
  swig_callbackonConfigMUCRoomSuccess = callbackonConfigMUCRoomSuccess;
  swig_callbackonConfigMUCRoomFailed = callbackonConfigMUCRoomFailed;
  swig_callbackonDestroyMUCRoomSuccess = callbackonDestroyMUCRoomSuccess;
  swig_callbackonDestroyMUCRoomFailed = callbackonDestroyMUCRoomFailed;
  swig_callbackonRecvMUCRoomPresence = callbackonRecvMUCRoomPresence;
  swig_callbackonRecvMUCRoomMessage = callbackonRecvMUCRoomMessage;
  swig_callbackonModifyMUCRoomMemberListSuccess = callbackonModifyMUCRoomMemberListSuccess;
  swig_callbackonModifyMUCRoomMemberListFailed = callbackonModifyMUCRoomMemberListFailed;
  swig_callbackonModifyMUCRoomOwnerListSuccess = callbackonModifyMUCRoomOwnerListSuccess;
  swig_callbackonModifyMUCRoomOwnerListFailed = callbackonModifyMUCRoomOwnerListFailed;
  swig_callbackonRecvMUCRoomDirectInvitation = callbackonRecvMUCRoomDirectInvitation;
  swig_callbackonRecvMUCRoomMediatedInvitation = callbackonRecvMUCRoomMediatedInvitation;
  swig_callbackonRetrieveMUCRoomMemberList = callbackonRetrieveMUCRoomMemberList;
  swig_callbackonRetrieveMUCRoomOwnerList = callbackonRetrieveMUCRoomOwnerList;
  swig_callbackonMUCRoomSubjectChanged = callbackonMUCRoomSubjectChanged;
  swig_callbackonRetrieveMUCRoomInfo = callbackonRetrieveMUCRoomInfo;
  swig_callbackonRetrieveMUCRoomConfig = callbackonRetrieveMUCRoomConfig;
  swig_callbackonMUCRoomInvitationRejected = callbackonMUCRoomInvitationRejected;
  swig_callbackonChangeMUCNicknameConflict = callbackonChangeMUCNicknameConflict;
  swig_callbackonFtRequest = callbackonFtRequest;
  swig_callbackonFtBytestreamCreated = callbackonFtBytestreamCreated;
  swig_callbackonFtIncomingBytestreamOpened = callbackonFtIncomingBytestreamOpened;
  swig_callbackonFtOutgoingBytestreamOpened = callbackonFtOutgoingBytestreamOpened;
  swig_callbackonRecvFtBytestreamData = callbackonRecvFtBytestreamData;
  swig_callbackonFtBytestreamClosed = callbackonFtBytestreamClosed;
  swig_callbackonDiscoItem = callbackonDiscoItem;
}

void SwigDirector_XmppCallback::swig_init_callbacks() {
  swig_callbackonLog = 0;
  swig_callbackonInvaildJID = 0;
  swig_callbackonInvaildPassword = 0;
  swig_callbackonTcpConnSuccess = 0;
  swig_callbackonTcpConnFailed = 0;
  swig_callbackonNegotiatingEncryption = 0;
  swig_callbackonNegotiatingCompression = 0;
  swig_callbackonAuthenticating = 0;
  swig_callbackonAuthFailed = 0;
  swig_callbackonBindingResource = 0;
  swig_callbackonCreatingSession = 0;
  swig_callbackonLoadingRoster = 0;
  swig_callbackonLoginSuccess = 0;
  swig_callbackonLogoutSuccess = 0;
  swig_callbackonRecvRosterPresence = 0;
  swig_callbackonRecvChatMessage = 0;
  swig_callbackonRecvAttentionMessage = 0;
  swig_callbackonRecvIMailMessage = 0;
  swig_callbackonRecvLocationMessage = 0;
  swig_callbackonRecvReceiptMessage = 0;
  swig_callbackonRecvRoster = 0;
  swig_callbackonRosterItemAdded = 0;
  swig_callbackonRosterItemUpdated = 0;
  swig_callbackonRosterItemRemoved = 0;
  swig_callbackonRosterItemSubscribed = 0;
  swig_callbackonRosterItemUnsubscribed = 0;
  swig_callbackonRecvSubscriptionRequest = 0;
  swig_callbackonRetrieveRegistrationInfo = 0;
  swig_callbackonPublishNicknameSuccess = 0;
  swig_callbackonPublishNicknameFailed = 0;
  swig_callbackonRecvNickname = 0;
  swig_callbackonPublishAvatarSuccess = 0;
  swig_callbackonPublishAvatarFailed = 0;
  swig_callbackonRecvAvatarMetadata = 0;
  swig_callbackonRecvAvatarData = 0;
  swig_callbackonLoadAvatarSuccess = 0;
  swig_callbackonLoadAvatarFailed = 0;
  swig_callbackonNotifyPersonalInfoChangedSuccess = 0;
  swig_callbackonNotifyPersonalInfoChangedFailed = 0;
  swig_callbackonRecvPersonalInfoChangedNotification = 0;
  swig_callbackonNotifyAddressBookChangedSuccess = 0;
  swig_callbackonNotifyAddressBookChangedFailed = 0;
  swig_callbackonRecvAddressBookChangedNotification = 0;
  swig_callbackonRecvBackgroundChangedNotification = 0;
  swig_callbackonPublishMicroblogSuccess = 0;
  swig_callbackonPublishMicroblogFailed = 0;
  swig_callbackonDeleteMicroblogSuccess = 0;
  swig_callbackonDeleteMicroblogFailed = 0;
  swig_callbackonRecvMicroblog = 0;
  swig_callbackonMicroblogDeleted = 0;
  swig_callbackonCreateMUCRoomSuccess = 0;
  swig_callbackonCreateMUCRoomFailed = 0;
  swig_callbackonConfigMUCRoomSuccess = 0;
  swig_callbackonConfigMUCRoomFailed = 0;
  swig_callbackonDestroyMUCRoomSuccess = 0;
  swig_callbackonDestroyMUCRoomFailed = 0;
  swig_callbackonRecvMUCRoomPresence = 0;
  swig_callbackonRecvMUCRoomMessage = 0;
  swig_callbackonModifyMUCRoomMemberListSuccess = 0;
  swig_callbackonModifyMUCRoomMemberListFailed = 0;
  swig_callbackonModifyMUCRoomOwnerListSuccess = 0;
  swig_callbackonModifyMUCRoomOwnerListFailed = 0;
  swig_callbackonRecvMUCRoomDirectInvitation = 0;
  swig_callbackonRecvMUCRoomMediatedInvitation = 0;
  swig_callbackonRetrieveMUCRoomMemberList = 0;
  swig_callbackonRetrieveMUCRoomOwnerList = 0;
  swig_callbackonMUCRoomSubjectChanged = 0;
  swig_callbackonRetrieveMUCRoomInfo = 0;
  swig_callbackonRetrieveMUCRoomConfig = 0;
  swig_callbackonMUCRoomInvitationRejected = 0;
  swig_callbackonChangeMUCNicknameConflict = 0;
  swig_callbackonFtRequest = 0;
  swig_callbackonFtBytestreamCreated = 0;
  swig_callbackonFtIncomingBytestreamOpened = 0;
  swig_callbackonFtOutgoingBytestreamOpened = 0;
  swig_callbackonRecvFtBytestreamData = 0;
  swig_callbackonFtBytestreamClosed = 0;
  swig_callbackonDiscoItem = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_CLIENT_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_CLIENT;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_COMPONENT_ACCEPT_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_COMPONENT_ACCEPT;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_COMPONENT_CONNECT_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_COMPONENT_CONNECT;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_DISCO_INFO_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_DISCO_INFO;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_DISCO_ITEMS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_DISCO_ITEMS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_DISCO_PUBLISH_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_DISCO_PUBLISH;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_ADHOC_COMMANDS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_ADHOC_COMMANDS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_COMPRESSION_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_COMPRESSION;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_OFFLINE_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_OFFLINE;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_CHAT_STATES_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_CHAT_STATES;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_AMP_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_AMP;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_IBB_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_IBB;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_FEATURE_NEG_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_FEATURE_NEG;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_CHATNEG_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_CHATNEG;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_XHTML_IM_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_XHTML_IM;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_DELAY_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_DELAY;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_ROSTER_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_ROSTER;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_VERSION_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_VERSION;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_REGISTER_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_REGISTER;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_PRIVACY_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_PRIVACY;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_AUTH_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_AUTH;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_PRIVATE_XML_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_PRIVATE_XML;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_LAST_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_LAST;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_SEARCH_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_SEARCH;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_IQ_OOB_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_IQ_OOB;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_X_DATA_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_X_DATA;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_X_EVENT_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_X_EVENT;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_X_OOB_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_X_OOB;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_X_DELAY_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_X_DELAY;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_X_GPGSIGNED_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_X_GPGSIGNED;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_X_GPGENCRYPTED_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_X_GPGENCRYPTED;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_VCARD_TEMP_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_VCARD_TEMP;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_X_VCARD_UPDATE_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_X_VCARD_UPDATE;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_BOOKMARKS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_BOOKMARKS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_ANNOTATIONS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_ANNOTATIONS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_ROSTER_DELIMITER_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_ROSTER_DELIMITER;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_XMPP_PING_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_XMPP_PING;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_SI_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_SI;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_SI_FT_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_SI_FT;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_BYTESTREAMS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_BYTESTREAMS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_MUC_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_MUC;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_MUC_USER_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_MUC_USER;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_MUC_ADMIN_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_MUC_ADMIN;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_MUC_UNIQUE_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_MUC_UNIQUE;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_MUC_OWNER_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_MUC_OWNER;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_MUC_ROOMINFO_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_MUC_ROOMINFO;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_MUC_ROOMS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_MUC_ROOMS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_MUC_REQUEST_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_MUC_REQUEST;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_PUBSUB_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_PUBSUB;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_PUBSUB_ERRORS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_PUBSUB_ERRORS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_PUBSUB_EVENT_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_PUBSUB_EVENT;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_PUBSUB_OWNER_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_PUBSUB_OWNER;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_CAPS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_CAPS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_FT_FASTMODE_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_FT_FASTMODE;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_STREAM_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_STREAM;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_XMPP_STREAM_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_XMPP_STREAM;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_XMPP_STANZAS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_XMPP_STANZAS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_STREAM_TLS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_STREAM_TLS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_STREAM_SASL_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_STREAM_SASL;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_STREAM_BIND_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_STREAM_BIND;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_STREAM_SESSION_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_STREAM_SESSION;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_STREAM_IQAUTH_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_STREAM_IQAUTH;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_STREAM_IQREGISTER_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_STREAM_IQREGISTER;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_STREAM_COMPRESS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_STREAM_COMPRESS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_HTTPBIND_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_HTTPBIND;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_XMPP_BOSH_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_XMPP_BOSH;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_RECEIPTS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_RECEIPTS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_NICKNAME_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_NICKNAME;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_JINGLE_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_JINGLE;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_JINGLE_AUDIO_RTP_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_JINGLE_AUDIO_RTP;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_JINGLE_ICE_UDP_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_JINGLE_ICE_UDP;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_JINGLE_RAW_UDP_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_JINGLE_RAW_UDP;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_JINGLE_VIDEO_RTP_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_JINGLE_VIDEO_RTP;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_SHIM_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_SHIM;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_ATTENTION_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS_ATTENTION;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMPP_STREAM_VERSION_MAJOR_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMPP_STREAM_VERSION_MAJOR;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMPP_STREAM_VERSION_MINOR_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMPP_STREAM_VERSION_MINOR;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GLOOX_VERSION_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::GLOOX_VERSION;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GLOOX_CAPS_NODE_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::GLOOX_CAPS_NODE;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::XMLNS;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TYPE_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::TYPE;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EmptyString_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)gloox::EmptyString;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_status_set(void * jarg1, int jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  int arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->status = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CertInfo_status_get(void * jarg1) {
  int jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  int result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result = (int) ((arg1)->status);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_chain_set(void * jarg1, unsigned int jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->chain = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CertInfo_chain_get(void * jarg1) {
  unsigned int jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  bool result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result = (bool) ((arg1)->chain);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_issuer_set(void * jarg1, wchar_t * jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->issuer = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CertInfo_issuer_get(void * jarg1) {
  void * jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result =  ((arg1)->issuer);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_server_set(void * jarg1, wchar_t * jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->server = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CertInfo_server_get(void * jarg1) {
  void * jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result =  ((arg1)->server);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_date_from_set(void * jarg1, int jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  int arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->date_from = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CertInfo_date_from_get(void * jarg1) {
  int jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  int result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result = (int) ((arg1)->date_from);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_date_to_set(void * jarg1, int jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  int arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->date_to = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CertInfo_date_to_get(void * jarg1) {
  int jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  int result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result = (int) ((arg1)->date_to);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_protocol_set(void * jarg1, wchar_t * jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->protocol = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CertInfo_protocol_get(void * jarg1) {
  void * jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result =  ((arg1)->protocol);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_cipher_set(void * jarg1, wchar_t * jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->cipher = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CertInfo_cipher_get(void * jarg1) {
  void * jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result =  ((arg1)->cipher);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_mac_set(void * jarg1, wchar_t * jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->mac = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CertInfo_mac_get(void * jarg1) {
  void * jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result =  ((arg1)->mac);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_CertInfo_compression_set(void * jarg1, wchar_t * jarg2) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->compression = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CertInfo_compression_get(void * jarg1) {
  void * jresult ;
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  std::string result;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  result =  ((arg1)->compression);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CertInfo() {
  void * jresult ;
  gloox::CertInfo *result = 0 ;
  
  result = (gloox::CertInfo *)new gloox::CertInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CertInfo(void * jarg1) {
  gloox::CertInfo *arg1 = (gloox::CertInfo *) 0 ;
  
  arg1 = (gloox::CertInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_gloox_version() {
  char * jresult ;
  char *result = 0 ;
  
  result = (char *)gloox_version();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_LogSink() {
  void * jresult ;
  gloox::LogSink *result = 0 ;
  
  result = (gloox::LogSink *)new gloox::LogSink();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_LogSink(void * jarg1) {
  gloox::LogSink *arg1 = (gloox::LogSink *) 0 ;
  
  arg1 = (gloox::LogSink *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JID__SWIG_0() {
  void * jresult ;
  gloox::JID *result = 0 ;
  
  result = (gloox::JID *)new gloox::JID();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_JID__SWIG_1(wchar_t * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  gloox::JID *result = 0 ;
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg1 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg1_str(jarg1);
  arg1 = new std::string( utf162utf8( arg1_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (gloox::JID *)new gloox::JID((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_JID(void * jarg1) {
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  
  arg1 = (gloox::JID *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JID_setJID(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (gloox::JID *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->setJID((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JID_full(void * jarg1) {
  void * jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::JID *)jarg1; 
  result = (std::string *) &((gloox::JID const *)arg1)->full();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JID_bare(void * jarg1) {
  void * jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::JID *)jarg1; 
  result = (std::string *) &((gloox::JID const *)arg1)->bare();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JID_bareJID(void * jarg1) {
  void * jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  gloox::JID result;
  
  arg1 = (gloox::JID *)jarg1; 
  result = ((gloox::JID const *)arg1)->bareJID();
  jresult = new gloox::JID((const gloox::JID &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JID_setUsername(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (gloox::JID *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->setUsername((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JID_setServer(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (gloox::JID *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->setServer((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_JID_setResource(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (gloox::JID *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->setResource((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JID_username(void * jarg1) {
  void * jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::JID *)jarg1; 
  result = (std::string *) &((gloox::JID const *)arg1)->username();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JID_server(void * jarg1) {
  void * jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::JID *)jarg1; 
  result = (std::string *) &((gloox::JID const *)arg1)->server();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JID_resource(void * jarg1) {
  void * jresult ;
  gloox::JID *arg1 = (gloox::JID *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::JID *)jarg1; 
  result = (std::string *) &((gloox::JID const *)arg1)->resource();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Stanza(void * jarg1) {
  gloox::Stanza *arg1 = (gloox::Stanza *) 0 ;
  
  arg1 = (gloox::Stanza *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stanza_from(void * jarg1) {
  void * jresult ;
  gloox::Stanza *arg1 = (gloox::Stanza *) 0 ;
  gloox::JID *result = 0 ;
  
  arg1 = (gloox::Stanza *)jarg1; 
  result = (gloox::JID *) &((gloox::Stanza const *)arg1)->from();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stanza_to(void * jarg1) {
  void * jresult ;
  gloox::Stanza *arg1 = (gloox::Stanza *) 0 ;
  gloox::JID *result = 0 ;
  
  arg1 = (gloox::Stanza *)jarg1; 
  result = (gloox::JID *) &((gloox::Stanza const *)arg1)->to();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stanza_id(void * jarg1) {
  void * jresult ;
  gloox::Stanza *arg1 = (gloox::Stanza *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::Stanza *)jarg1; 
  result = (std::string *) &((gloox::Stanza const *)arg1)->id();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stanza_xmlLang(void * jarg1) {
  void * jresult ;
  gloox::Stanza *arg1 = (gloox::Stanza *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::Stanza *)jarg1; 
  result = (std::string *) &((gloox::Stanza const *)arg1)->xmlLang();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Message__SWIG_0(int jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4, wchar_t * jarg5, wchar_t * jarg6) {
  void * jresult ;
  gloox::Message::MessageType arg1 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  gloox::Message *result = 0 ;
  
  arg1 = (gloox::Message::MessageType)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg6 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg6_str(jarg6);
  arg6 = new std::string( utf162utf8( arg6_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (gloox::Message *)new gloox::Message(arg1,(gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Message__SWIG_1(int jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4, wchar_t * jarg5) {
  void * jresult ;
  gloox::Message::MessageType arg1 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  gloox::Message *result = 0 ;
  
  arg1 = (gloox::Message::MessageType)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (gloox::Message *)new gloox::Message(arg1,(gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Message__SWIG_2(int jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  void * jresult ;
  gloox::Message::MessageType arg1 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  gloox::Message *result = 0 ;
  
  arg1 = (gloox::Message::MessageType)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (gloox::Message *)new gloox::Message(arg1,(gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Message__SWIG_3(int jarg1, void * jarg2, wchar_t * jarg3) {
  void * jresult ;
  gloox::Message::MessageType arg1 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gloox::Message *result = 0 ;
  
  arg1 = (gloox::Message::MessageType)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (gloox::Message *)new gloox::Message(arg1,(gloox::JID const &)*arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Message__SWIG_4(int jarg1, void * jarg2) {
  void * jresult ;
  gloox::Message::MessageType arg1 ;
  gloox::JID *arg2 = 0 ;
  gloox::Message *result = 0 ;
  
  arg1 = (gloox::Message::MessageType)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  result = (gloox::Message *)new gloox::Message(arg1,(gloox::JID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Message(void * jarg1) {
  gloox::Message *arg1 = (gloox::Message *) 0 ;
  
  arg1 = (gloox::Message *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Message_subtype(void * jarg1) {
  int jresult ;
  gloox::Message *arg1 = (gloox::Message *) 0 ;
  gloox::Message::MessageType result;
  
  arg1 = (gloox::Message *)jarg1; 
  result = (gloox::Message::MessageType)((gloox::Message const *)arg1)->subtype();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Message_body__SWIG_0(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  gloox::Message *arg1 = (gloox::Message *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (gloox::Message *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = ((gloox::Message const *)arg1)->body((std::string const &)*arg2);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Message_body__SWIG_1(void * jarg1) {
  void * jresult ;
  gloox::Message *arg1 = (gloox::Message *) 0 ;
  std::string result;
  
  arg1 = (gloox::Message *)jarg1; 
  result = ((gloox::Message const *)arg1)->body();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Message_subject__SWIG_0(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  gloox::Message *arg1 = (gloox::Message *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (gloox::Message *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = ((gloox::Message const *)arg1)->subject((std::string const &)*arg2);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Message_subject__SWIG_1(void * jarg1) {
  void * jresult ;
  gloox::Message *arg1 = (gloox::Message *) 0 ;
  std::string result;
  
  arg1 = (gloox::Message *)jarg1; 
  result = ((gloox::Message const *)arg1)->subject();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Message_thread(void * jarg1) {
  void * jresult ;
  gloox::Message *arg1 = (gloox::Message *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::Message *)jarg1; 
  result = (std::string *) &((gloox::Message const *)arg1)->thread();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_setThread(void * jarg1, wchar_t * jarg2) {
  gloox::Message *arg1 = (gloox::Message *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (gloox::Message *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setThread((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Message_setID(void * jarg1, wchar_t * jarg2) {
  gloox::Message *arg1 = (gloox::Message *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (gloox::Message *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setID((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Presence__SWIG_0(int jarg1, void * jarg2, wchar_t * jarg3, int jarg4, wchar_t * jarg5) {
  void * jresult ;
  gloox::Presence::PresenceType arg1 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  std::string *arg5 = 0 ;
  gloox::Presence *result = 0 ;
  
  arg1 = (gloox::Presence::PresenceType)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (int)jarg4; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (gloox::Presence *)new gloox::Presence(arg1,(gloox::JID const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Presence__SWIG_1(int jarg1, void * jarg2, wchar_t * jarg3, int jarg4) {
  void * jresult ;
  gloox::Presence::PresenceType arg1 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  gloox::Presence *result = 0 ;
  
  arg1 = (gloox::Presence::PresenceType)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (int)jarg4; 
  result = (gloox::Presence *)new gloox::Presence(arg1,(gloox::JID const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Presence__SWIG_2(int jarg1, void * jarg2, wchar_t * jarg3) {
  void * jresult ;
  gloox::Presence::PresenceType arg1 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gloox::Presence *result = 0 ;
  
  arg1 = (gloox::Presence::PresenceType)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (gloox::Presence *)new gloox::Presence(arg1,(gloox::JID const &)*arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Presence__SWIG_3(int jarg1, void * jarg2) {
  void * jresult ;
  gloox::Presence::PresenceType arg1 ;
  gloox::JID *arg2 = 0 ;
  gloox::Presence *result = 0 ;
  
  arg1 = (gloox::Presence::PresenceType)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  result = (gloox::Presence *)new gloox::Presence(arg1,(gloox::JID const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Presence(void * jarg1) {
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  
  arg1 = (gloox::Presence *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Presence_subtype(void * jarg1) {
  int jresult ;
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  gloox::Presence::PresenceType result;
  
  arg1 = (gloox::Presence *)jarg1; 
  result = (gloox::Presence::PresenceType)((gloox::Presence const *)arg1)->subtype();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Presence_presence(void * jarg1) {
  int jresult ;
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  gloox::Presence::PresenceType result;
  
  arg1 = (gloox::Presence *)jarg1; 
  result = (gloox::Presence::PresenceType)((gloox::Presence const *)arg1)->presence();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Presence_setPresence(void * jarg1, int jarg2) {
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  gloox::Presence::PresenceType arg2 ;
  
  arg1 = (gloox::Presence *)jarg1; 
  arg2 = (gloox::Presence::PresenceType)jarg2; 
  (arg1)->setPresence(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Presence_status__SWIG_0(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (gloox::Presence *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = ((gloox::Presence const *)arg1)->status((std::string const &)*arg2);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Presence_status__SWIG_1(void * jarg1) {
  void * jresult ;
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  std::string result;
  
  arg1 = (gloox::Presence *)jarg1; 
  result = ((gloox::Presence const *)arg1)->status();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Presence_addStatus__SWIG_0(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (gloox::Presence *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->addStatus((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Presence_addStatus__SWIG_1(void * jarg1, wchar_t * jarg2) {
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (gloox::Presence *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->addStatus((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Presence_resetStatus(void * jarg1) {
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  
  arg1 = (gloox::Presence *)jarg1; 
  (arg1)->resetStatus();
}


SWIGEXPORT int SWIGSTDCALL CSharp_Presence_priority(void * jarg1) {
  int jresult ;
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  int result;
  
  arg1 = (gloox::Presence *)jarg1; 
  result = (int)((gloox::Presence const *)arg1)->priority();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Presence_setPriority(void * jarg1, int jarg2) {
  gloox::Presence *arg1 = (gloox::Presence *) 0 ;
  int arg2 ;
  
  arg1 = (gloox::Presence *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setPriority(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RosterItem__SWIG_0(wchar_t * jarg1, wchar_t * jarg2) {
  void * jresult ;
  std::string *arg1 = 0 ;
  std::string *arg2 = 0 ;
  gloox::RosterItem *result = 0 ;
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg1 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg1_str(jarg1);
  arg1 = new std::string( utf162utf8( arg1_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (gloox::RosterItem *)new gloox::RosterItem((std::string const &)*arg1,(std::string const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RosterItem__SWIG_1(wchar_t * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  gloox::RosterItem *result = 0 ;
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg1 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg1_str(jarg1);
  arg1 = new std::string( utf162utf8( arg1_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (gloox::RosterItem *)new gloox::RosterItem((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RosterItem(void * jarg1) {
  gloox::RosterItem *arg1 = (gloox::RosterItem *) 0 ;
  
  arg1 = (gloox::RosterItem *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RosterItem_name(void * jarg1) {
  void * jresult ;
  gloox::RosterItem *arg1 = (gloox::RosterItem *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::RosterItem *)jarg1; 
  result = (std::string *) &((gloox::RosterItem const *)arg1)->name();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RosterItem_jid(void * jarg1) {
  void * jresult ;
  gloox::RosterItem *arg1 = (gloox::RosterItem *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::RosterItem *)jarg1; 
  result = (std::string *) &((gloox::RosterItem const *)arg1)->jid();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RosterItem_subscription(void * jarg1) {
  int jresult ;
  gloox::RosterItem *arg1 = (gloox::RosterItem *) 0 ;
  gloox::SubscriptionType result;
  
  arg1 = (gloox::RosterItem *)jarg1; 
  result = (gloox::SubscriptionType)((gloox::RosterItem const *)arg1)->subscription();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RosterItem_groups(void * jarg1) {
  void * jresult ;
  gloox::RosterItem *arg1 = (gloox::RosterItem *) 0 ;
  gloox::StringList result;
  
  arg1 = (gloox::RosterItem *)jarg1; 
  result = ((gloox::RosterItem const *)arg1)->groups();
  jresult = new gloox::StringList((const gloox::StringList &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RosterItem_changed(void * jarg1) {
  unsigned int jresult ;
  gloox::RosterItem *arg1 = (gloox::RosterItem *) 0 ;
  bool result;
  
  arg1 = (gloox::RosterItem *)jarg1; 
  result = (bool)((gloox::RosterItem const *)arg1)->changed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RosterItem_online(void * jarg1) {
  unsigned int jresult ;
  gloox::RosterItem *arg1 = (gloox::RosterItem *) 0 ;
  bool result;
  
  arg1 = (gloox::RosterItem *)jarg1; 
  result = (bool)((gloox::RosterItem const *)arg1)->online();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Bytestream(void * jarg1) {
  gloox::Bytestream *arg1 = (gloox::Bytestream *) 0 ;
  
  arg1 = (gloox::Bytestream *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Bytestream_isOpen(void * jarg1) {
  unsigned int jresult ;
  gloox::Bytestream *arg1 = (gloox::Bytestream *) 0 ;
  bool result;
  
  arg1 = (gloox::Bytestream *)jarg1; 
  result = (bool)((gloox::Bytestream const *)arg1)->isOpen();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bytestream_sid(void * jarg1) {
  void * jresult ;
  gloox::Bytestream *arg1 = (gloox::Bytestream *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (gloox::Bytestream *)jarg1; 
  result = (std::string *) &((gloox::Bytestream const *)arg1)->sid();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Bytestream_type(void * jarg1) {
  int jresult ;
  gloox::Bytestream *arg1 = (gloox::Bytestream *) 0 ;
  gloox::Bytestream::StreamType result;
  
  arg1 = (gloox::Bytestream *)jarg1; 
  result = (gloox::Bytestream::StreamType)((gloox::Bytestream const *)arg1)->type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bytestream_target(void * jarg1) {
  void * jresult ;
  gloox::Bytestream *arg1 = (gloox::Bytestream *) 0 ;
  gloox::JID *result = 0 ;
  
  arg1 = (gloox::Bytestream *)jarg1; 
  result = (gloox::JID *) &((gloox::Bytestream const *)arg1)->target();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Bytestream_initiator(void * jarg1) {
  void * jresult ;
  gloox::Bytestream *arg1 = (gloox::Bytestream *) 0 ;
  gloox::JID *result = 0 ;
  
  arg1 = (gloox::Bytestream *)jarg1; 
  result = (gloox::JID *) &((gloox::Bytestream const *)arg1)->initiator();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SIProfileFT(void * jarg1) {
  gloox::SIProfileFT *arg1 = (gloox::SIProfileFT *) 0 ;
  
  arg1 = (gloox::SIProfileFT *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_X_CONFERENCE_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)kl::XMLNS_X_CONFERENCE;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_AVATAR_DATA_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)kl::XMLNS_AVATAR_DATA;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_AVATAR_METADATA_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)kl::XMLNS_AVATAR_METADATA;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_MICROBLOG_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)kl::XMLNS_MICROBLOG;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_ATOM_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)kl::XMLNS_ATOM;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_GEOLOC_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)kl::XMLNS_GEOLOC;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_NEEKLE_PERSONALINFO_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)kl::XMLNS_NEEKLE_PERSONALINFO;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_NEEKLE_ADDRESSBOOK_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)kl::XMLNS_NEEKLE_ADDRESSBOOK;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XMLNS_NEEKLE_BACKGROUND_get() {
  void * jresult ;
  std::string result;
  
  result = (std::string)kl::XMLNS_NEEKLE_BACKGROUND;
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XmppStack(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, int jarg4) {
  void * jresult ;
  gloox::JID *arg1 = 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  kl::XmppStack *result = 0 ;
  
  arg1 = (gloox::JID *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (int)jarg4; 
  result = (kl::XmppStack *)new kl::XmppStack((gloox::JID const &)*arg1,(std::string const &)*arg2,(std::string const &)*arg3,arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XmppStack(void * jarg1) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XmppStack_jid(void * jarg1) {
  void * jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *result = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  result = (gloox::JID *) &((kl::XmppStack const *)arg1)->jid();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XmppStack_password(void * jarg1) {
  void * jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  result = (std::string *) &((kl::XmppStack const *)arg1)->password();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XmppStack_host(void * jarg1) {
  void * jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  result = (std::string *) &((kl::XmppStack const *)arg1)->host();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XmppStack_port(void * jarg1) {
  int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  int result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  result = (int)((kl::XmppStack const *)arg1)->port();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_registerXmppCallback(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  kl::XmppCallback *arg2 = (kl::XmppCallback *) 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (kl::XmppCallback *)jarg2; 
  result = (bool)(arg1)->registerXmppCallback(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_removeXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  kl::XmppCallback *arg2 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (kl::XmppCallback *)jarg2; 
  (arg1)->removeXmppCallback(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_login(void * jarg1) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  (arg1)->login();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_isLogined(void * jarg1) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  result = (bool)(arg1)->isLogined();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_logout(void * jarg1) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  (arg1)->logout();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_publishNickname(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->publishNickname((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendChatMessage__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4, wchar_t * jarg5, wchar_t * jarg6, wchar_t * jarg7, unsigned int jarg8, unsigned int jarg9) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  bool arg8 ;
  bool arg9 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg6 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg6_str(jarg6);
  arg6 = new std::string( utf162utf8( arg6_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg7 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg7_str(jarg7);
  arg7 = new std::string( utf162utf8( arg7_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg8 = jarg8 ? true : false; 
  arg9 = jarg9 ? true : false; 
  result = (bool)(arg1)->sendChatMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8,arg9);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendChatMessage__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4, wchar_t * jarg5, wchar_t * jarg6, wchar_t * jarg7, unsigned int jarg8) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  bool arg8 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg6 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg6_str(jarg6);
  arg6 = new std::string( utf162utf8( arg6_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg7 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg7_str(jarg7);
  arg7 = new std::string( utf162utf8( arg7_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg8 = jarg8 ? true : false; 
  result = (bool)(arg1)->sendChatMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,arg8);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendChatMessage__SWIG_2(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4, wchar_t * jarg5, wchar_t * jarg6, wchar_t * jarg7) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg6 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg6_str(jarg6);
  arg6 = new std::string( utf162utf8( arg6_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg7 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg7_str(jarg7);
  arg7 = new std::string( utf162utf8( arg7_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->sendChatMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendChatMessage__SWIG_3(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4, wchar_t * jarg5, wchar_t * jarg6) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg6 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg6_str(jarg6);
  arg6 = new std::string( utf162utf8( arg6_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->sendChatMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendChatMessage__SWIG_4(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4, wchar_t * jarg5) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->sendChatMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendChatMessage__SWIG_5(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->sendChatMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendIMailMessage__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::IMailSMTPInfo *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  arg4 = (kl::IMailSMTPInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::IMailSMTPInfo const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->sendIMailMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(kl::IMailSMTPInfo const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendIMailMessage__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::IMailSMTPInfo *arg4 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  arg4 = (kl::IMailSMTPInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::IMailSMTPInfo const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->sendIMailMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(kl::IMailSMTPInfo const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendLocationMessage(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::Geoloc *arg4 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  arg4 = (kl::Geoloc *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::Geoloc const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->sendLocationMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(kl::Geoloc const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendReceiptMessage(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->sendReceiptMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendAttentionMessage(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->sendAttentionMessage((gloox::JID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendPresence__SWIG_0(void * jarg1, int jarg2, wchar_t * jarg3, int jarg4) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::Presence::PresenceType arg2 ;
  std::string *arg3 = 0 ;
  int arg4 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::Presence::PresenceType)jarg2; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->sendPresence(arg2,(std::string const &)*arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendPresence__SWIG_1(void * jarg1, int jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::Presence::PresenceType arg2 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::Presence::PresenceType)jarg2; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->sendPresence(arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendPresence__SWIG_2(void * jarg1, int jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::Presence::PresenceType arg2 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::Presence::PresenceType)jarg2; 
  result = (bool)(arg1)->sendPresence(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_addRosterItem__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, unsigned int jarg5, wchar_t * jarg6) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gloox::StringList *arg4 = 0 ;
  bool arg5 ;
  std::string *arg6 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (gloox::StringList *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg6 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg6_str(jarg6);
  arg6 = new std::string( utf162utf8( arg6_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->addRosterItem((gloox::JID const &)*arg2,(std::string const &)*arg3,(gloox::StringList const &)*arg4,arg5,(std::string const &)*arg6);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_addRosterItem__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gloox::StringList *arg4 = 0 ;
  bool arg5 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (gloox::StringList *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return 0;
  } 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->addRosterItem((gloox::JID const &)*arg2,(std::string const &)*arg3,(gloox::StringList const &)*arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_addRosterItem__SWIG_2(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gloox::StringList *arg4 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (gloox::StringList *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->addRosterItem((gloox::JID const &)*arg2,(std::string const &)*arg3,(gloox::StringList const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_moveRosterItemToGroup(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->moveRosterItemToGroup((gloox::JID const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_moveRosterItemToGroups(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::StringList *arg3 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  arg3 = (gloox::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->moveRosterItemToGroups((gloox::JID const &)*arg2,(gloox::StringList const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_copyRosterItemToGroup(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->copyRosterItemToGroup((gloox::JID const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_copyRosterItemToGroups(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::StringList *arg3 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  arg3 = (gloox::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->copyRosterItemToGroups((gloox::JID const &)*arg2,(gloox::StringList const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_removeRosterItemFromGroup(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->removeRosterItemFromGroup((gloox::JID const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_removeRosterItemFromGroups(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::StringList *arg3 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  arg3 = (gloox::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->removeRosterItemFromGroups((gloox::JID const &)*arg2,(gloox::StringList const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_removeRosterItemFromAllGroups(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->removeRosterItemFromAllGroups((gloox::JID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_changeRosterItemName(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->changeRosterItemName((gloox::JID const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_updateRosterItem(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gloox::StringList *arg4 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (gloox::StringList *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->updateRosterItem((gloox::JID const &)*arg2,(std::string const &)*arg3,(gloox::StringList const &)*arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_deleteRosterItem(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->deleteRosterItem((gloox::JID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_subscribeRosterItem__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->subscribeRosterItem((gloox::JID const &)*arg2,(std::string const &)*arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_subscribeRosterItem__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->subscribeRosterItem((gloox::JID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_approveSubscription__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->approveSubscription((gloox::JID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_approveSubscription__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->approveSubscription((gloox::JID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_denySubscription__SWIG_0(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  bool arg3 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  arg3 = jarg3 ? true : false; 
  result = (bool)(arg1)->denySubscription((gloox::JID const &)*arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_denySubscription__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  result = (bool)(arg1)->denySubscription((gloox::JID const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XmppStack_publish(void * jarg1, void * jarg2) {
  void * jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  kl::Microblog *arg2 = 0 ;
  std::string result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (kl::Microblog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::Microblog const & type is null", 0);
    return 0;
  } 
  result = (arg1)->publish((kl::Microblog const &)*arg2);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XmppStack_deleteMicroblog(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  std::string result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (arg1)->deleteMicroblog((std::string const &)*arg2);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_createMUCRoom(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::MUCRoomConfig *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::MUCRoomConfig *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::MUCRoomConfig const & type is null", 0);
    return ;
  } 
  (arg1)->createMUCRoom((gloox::JID const &)*arg2,(kl::MUCRoomConfig const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_destroyMUCRoom(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->destroyMUCRoom((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_modifyMUCRoomMemberList(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::StringList *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return ;
  } 
  (arg1)->modifyMUCRoomMemberList((gloox::JID const &)*arg2,(gloox::StringList const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_requestMUCRoomMemberList(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->requestMUCRoomMemberList((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_modifyMUCRoomOwnerList(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::StringList *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return ;
  } 
  (arg1)->modifyMUCRoomOwnerList((gloox::JID const &)*arg2,(gloox::StringList const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_requestMUCRoomOwnerList(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->requestMUCRoomOwnerList((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_enterMUCRoom__SWIG_0(void * jarg1, void * jarg2, int jarg3, wchar_t * jarg4, int jarg5, wchar_t * jarg6, unsigned int jarg7) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::Presence::PresenceType arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  std::string *arg6 = 0 ;
  bool arg7 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::Presence::PresenceType)jarg3; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg5 = (int)jarg5; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg6 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg6_str(jarg6);
  arg6 = new std::string( utf162utf8( arg6_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg7 = jarg7 ? true : false; 
  (arg1)->enterMUCRoom((gloox::JID const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_enterMUCRoom__SWIG_1(void * jarg1, void * jarg2, int jarg3, wchar_t * jarg4, int jarg5, wchar_t * jarg6) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::Presence::PresenceType arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  std::string *arg6 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::Presence::PresenceType)jarg3; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg5 = (int)jarg5; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg6 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg6_str(jarg6);
  arg6 = new std::string( utf162utf8( arg6_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->enterMUCRoom((gloox::JID const &)*arg2,arg3,(std::string const &)*arg4,arg5,(std::string const &)*arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_enterMUCRoom__SWIG_2(void * jarg1, void * jarg2, int jarg3, wchar_t * jarg4, int jarg5) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::Presence::PresenceType arg3 ;
  std::string *arg4 = 0 ;
  int arg5 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::Presence::PresenceType)jarg3; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg5 = (int)jarg5; 
  (arg1)->enterMUCRoom((gloox::JID const &)*arg2,arg3,(std::string const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_enterMUCRoom__SWIG_3(void * jarg1, void * jarg2, int jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::Presence::PresenceType arg3 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::Presence::PresenceType)jarg3; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->enterMUCRoom((gloox::JID const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_enterMUCRoom__SWIG_4(void * jarg1, void * jarg2, int jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::Presence::PresenceType arg3 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::Presence::PresenceType)jarg3; 
  (arg1)->enterMUCRoom((gloox::JID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_enterMUCRoom__SWIG_5(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->enterMUCRoom((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_configMUCRoom(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::MUCRoomConfig *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::MUCRoomConfig *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::MUCRoomConfig const & type is null", 0);
    return ;
  } 
  (arg1)->configMUCRoom((gloox::JID const &)*arg2,(kl::MUCRoomConfig const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_queryMUCRoomInfo(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->queryMUCRoomInfo((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_queryMUCRoomConfig(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->queryMUCRoomConfig((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_grantMUCRoomMembership__SWIG_0(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->grantMUCRoomMembership((gloox::JID const &)*arg2,(gloox::JID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_grantMUCRoomMembership__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->grantMUCRoomMembership((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_grantMUCRoomMembership__SWIG_2(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->grantMUCRoomMembership((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_revokeMUCRoomMembership(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->revokeMUCRoomMembership((gloox::JID const &)*arg2,(gloox::JID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_revokeMUCRoomOwnership(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->revokeMUCRoomOwnership((gloox::JID const &)*arg2,(gloox::JID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_exitMUCRoom__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->exitMUCRoom((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_exitMUCRoom__SWIG_1(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->exitMUCRoom((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_inviteIntoMUCRoom__SWIG_0(void * jarg1, void * jarg2, void * jarg3, int jarg4, wchar_t * jarg5, unsigned int jarg6, unsigned int jarg7) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::MUCRoomInvitationType arg4 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg4 = (kl::MUCRoomInvitationType)jarg4; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->inviteIntoMUCRoom((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,arg4,(std::string const &)*arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_inviteIntoMUCRoom__SWIG_1(void * jarg1, void * jarg2, void * jarg3, int jarg4, wchar_t * jarg5, unsigned int jarg6) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::MUCRoomInvitationType arg4 ;
  std::string *arg5 = 0 ;
  bool arg6 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg4 = (kl::MUCRoomInvitationType)jarg4; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg6 = jarg6 ? true : false; 
  (arg1)->inviteIntoMUCRoom((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,arg4,(std::string const &)*arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_inviteIntoMUCRoom__SWIG_2(void * jarg1, void * jarg2, void * jarg3, int jarg4, wchar_t * jarg5) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::MUCRoomInvitationType arg4 ;
  std::string *arg5 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg4 = (kl::MUCRoomInvitationType)jarg4; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->inviteIntoMUCRoom((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_inviteIntoMUCRoom__SWIG_3(void * jarg1, void * jarg2, void * jarg3, int jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::MUCRoomInvitationType arg4 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg4 = (kl::MUCRoomInvitationType)jarg4; 
  (arg1)->inviteIntoMUCRoom((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_inviteIntoMUCRoom__SWIG_4(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->inviteIntoMUCRoom((gloox::JID const &)*arg2,(gloox::JID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_rejectMUCRoomInvitation__SWIG_0(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->rejectMUCRoomInvitation((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_rejectMUCRoomInvitation__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->rejectMUCRoomInvitation((gloox::JID const &)*arg2,(gloox::JID const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_changeSelfNicknameInMUCRoom(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->changeSelfNicknameInMUCRoom((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_requestMUCRoomVoice(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->requestMUCRoomVoice((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_grantMUCRoomVoice__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->grantMUCRoomVoice((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_grantMUCRoomVoice__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->grantMUCRoomVoice((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_revokeMUCRoomVoice__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->revokeMUCRoomVoice((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_revokeMUCRoomVoice__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->revokeMUCRoomVoice((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_changeMUCRoomSubject(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->changeMUCRoomSubject((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_kickOutMUCRoom__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kickOutMUCRoom((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_kickOutMUCRoom__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kickOutMUCRoom((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_banOutMUCRoom__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->banOutMUCRoom((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_banOutMUCRoom__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->banOutMUCRoom((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_sendMUCRoomMessage__SWIG_0(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4, wchar_t * jarg5) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->sendMUCRoomMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_sendMUCRoomMessage__SWIG_1(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->sendMUCRoomMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_sendMUCRoomPresence__SWIG_0(void * jarg1, void * jarg2, int jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::Presence::PresenceType arg3 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::Presence::PresenceType)jarg3; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->sendMUCRoomPresence((gloox::JID const &)*arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_sendMUCRoomPresence__SWIG_1(void * jarg1, void * jarg2, int jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::Presence::PresenceType arg3 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::Presence::PresenceType)jarg3; 
  (arg1)->sendMUCRoomPresence((gloox::JID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_sendMUCRoomPresence__SWIG_2(void * jarg1, void * jarg2) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->sendMUCRoomPresence((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_acceptFt(void * jarg1, void * jarg2, wchar_t * jarg3, int jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gloox::SIProfileFT::StreamType arg4 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (gloox::SIProfileFT::StreamType)jarg4; 
  (arg1)->acceptFt((gloox::JID const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_rejectFt__SWIG_0(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->rejectFt((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppStack_rejectFt__SWIG_1(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->rejectFt((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT int SWIGSTDCALL CSharp_XmppStack_recvS5bFtData(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (int)(arg1)->recvS5bFtData((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_sendFtData(void * jarg1, wchar_t * jarg2, void * jarg3, long jarg4) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  void *arg3 = (void *) 0 ;
  long arg4 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = jarg3; 
  arg4 = (long)jarg4; 
  result = (bool)(arg1)->sendFtData((std::string const &)*arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XmppStack_requestFt(void * jarg1, void * jarg2, void * jarg3) {
  void * jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::FileMetadata *arg3 = 0 ;
  std::string result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return 0;
  } 
  arg3 = (kl::FileMetadata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::FileMetadata const & type is null", 0);
    return 0;
  } 
  result = (arg1)->requestFt((gloox::JID const &)*arg2,(kl::FileMetadata const &)*arg3);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_closeFtBytestream(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->closeFtBytestream((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XmppStack_isBytestreamOpened(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  kl::XmppStack *arg1 = (kl::XmppStack *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (kl::XmppStack *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)(arg1)->isBytestreamOpened((std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLog(void * jarg1, int jarg2, int jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::LogLevel arg2 ;
  gloox::LogArea arg3 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::LogLevel)jarg2; 
  arg3 = (gloox::LogArea)jarg3; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onLog(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLogSwigExplicitXmppCallback(void * jarg1, int jarg2, int jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::LogLevel arg2 ;
  gloox::LogArea arg3 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::LogLevel)jarg2; 
  arg3 = (gloox::LogArea)jarg3; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onLog(arg2,arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onInvaildJID(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onInvaildJID();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onInvaildJIDSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onInvaildJID();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onInvaildPassword(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onInvaildPassword();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onInvaildPasswordSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onInvaildPassword();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onTcpConnSuccess(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onTcpConnSuccess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onTcpConnSuccessSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onTcpConnSuccess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onTcpConnFailed(void * jarg1, int jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::ConnectionError arg2 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::ConnectionError)jarg2; 
  (arg1)->onTcpConnFailed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onTcpConnFailedSwigExplicitXmppCallback(void * jarg1, int jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::ConnectionError arg2 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::ConnectionError)jarg2; 
  (arg1)->kl::XmppCallback::onTcpConnFailed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNegotiatingEncryption(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onNegotiatingEncryption();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNegotiatingEncryptionSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onNegotiatingEncryption();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNegotiatingCompression(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onNegotiatingCompression();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNegotiatingCompressionSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onNegotiatingCompression();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onAuthenticating(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onAuthenticating();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onAuthenticatingSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onAuthenticating();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onAuthFailed(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onAuthFailed();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onAuthFailedSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onAuthFailed();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onBindingResource(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onBindingResource();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onBindingResourceSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onBindingResource();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onCreatingSession(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onCreatingSession();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onCreatingSessionSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onCreatingSession();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLoadingRoster(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onLoadingRoster();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLoadingRosterSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onLoadingRoster();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLoginSuccess(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onLoginSuccess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLoginSuccessSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onLoginSuccess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLogoutSuccess(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->onLogoutSuccess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLogoutSuccessSwigExplicitXmppCallback(void * jarg1) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  (arg1)->kl::XmppCallback::onLogoutSuccess();
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvRosterPresence(void * jarg1, void * jarg2, wchar_t * jarg3, int jarg4, wchar_t * jarg5) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gloox::Presence::PresenceType arg4 ;
  std::string *arg5 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::RosterItem const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (gloox::Presence::PresenceType)jarg4; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onRecvRosterPresence((gloox::RosterItem const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvRosterPresenceSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3, int jarg4, wchar_t * jarg5) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = 0 ;
  std::string *arg3 = 0 ;
  gloox::Presence::PresenceType arg4 ;
  std::string *arg5 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::RosterItem const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (gloox::Presence::PresenceType)jarg4; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onRecvRosterPresence((gloox::RosterItem const &)*arg2,(std::string const &)*arg3,arg4,(std::string const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvChatMessage(void * jarg1, void * jarg2, wchar_t * jarg3, unsigned int jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::Message *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::Message *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::Message const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = jarg4 ? true : false; 
  (arg1)->onRecvChatMessage((gloox::Message const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvChatMessageSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3, unsigned int jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::Message *arg2 = 0 ;
  std::string *arg3 = 0 ;
  bool arg4 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::Message *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::Message const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = jarg4 ? true : false; 
  (arg1)->kl::XmppCallback::onRecvChatMessage((gloox::Message const &)*arg2,(std::string const &)*arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvAttentionMessage(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onRecvAttentionMessage((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvAttentionMessageSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRecvAttentionMessage((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvIMailMessage(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::IMailSMTPInfo *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg4 = (kl::IMailSMTPInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::IMailSMTPInfo const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  (arg1)->onRecvIMailMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(kl::IMailSMTPInfo const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvIMailMessageSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4, unsigned int jarg5) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::IMailSMTPInfo *arg4 = 0 ;
  bool arg5 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg4 = (kl::IMailSMTPInfo *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::IMailSMTPInfo const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  (arg1)->kl::XmppCallback::onRecvIMailMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(kl::IMailSMTPInfo const &)*arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvLocationMessage(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::Geoloc *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg4 = (kl::Geoloc *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::Geoloc const & type is null", 0);
    return ;
  } 
  (arg1)->onRecvLocationMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(kl::Geoloc const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvLocationMessageSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2, void * jarg3, void * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  kl::Geoloc *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg4 = (kl::Geoloc *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::Geoloc const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRecvLocationMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(kl::Geoloc const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvReceiptMessage(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onRecvReceiptMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvReceiptMessageSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onRecvReceiptMessage((std::string const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvRoster(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::map< std::string,gloox::RosterItem * > *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (std::map< std::string,gloox::RosterItem * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,gloox::RosterItem * > const & type is null", 0);
    return ;
  } 
  (arg1)->onRecvRoster((std::map< std::string,gloox::RosterItem * > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvRosterSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::map< std::string,gloox::RosterItem * > *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (std::map< std::string,gloox::RosterItem * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,gloox::RosterItem * > const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRecvRoster((std::map< std::string,gloox::RosterItem * > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemAdded(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->onRosterItemAdded(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemAddedSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->kl::XmppCallback::onRosterItemAdded(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemUpdated(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->onRosterItemUpdated(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemUpdatedSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->kl::XmppCallback::onRosterItemUpdated(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemRemoved(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->onRosterItemRemoved(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemRemovedSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->kl::XmppCallback::onRosterItemRemoved(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemSubscribed(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->onRosterItemSubscribed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemSubscribedSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->kl::XmppCallback::onRosterItemSubscribed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemUnsubscribed(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->onRosterItemUnsubscribed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRosterItemUnsubscribedSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::RosterItem *arg2 = (gloox::RosterItem *) 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::RosterItem *)jarg2; 
  (arg1)->kl::XmppCallback::onRosterItemUnsubscribed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvSubscriptionRequest(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onRecvSubscriptionRequest((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvSubscriptionRequestSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onRecvSubscriptionRequest((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveRegistrationInfo(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onRetrieveRegistrationInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveRegistrationInfoSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onRetrieveRegistrationInfo((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishNicknameSuccess(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onPublishNicknameSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishNicknameSuccessSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onPublishNicknameSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishNicknameFailed(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onPublishNicknameFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishNicknameFailedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onPublishNicknameFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvNickname(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onRecvNickname((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvNicknameSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onRecvNickname((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishAvatarSuccess(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onPublishAvatarSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishAvatarSuccessSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onPublishAvatarSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishAvatarFailed(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onPublishAvatarFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishAvatarFailedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onPublishAvatarFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvAvatarMetadata(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::AvatarMetadata *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::AvatarMetadata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::AvatarMetadata const & type is null", 0);
    return ;
  } 
  (arg1)->onRecvAvatarMetadata((gloox::JID const &)*arg2,(kl::AvatarMetadata const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvAvatarMetadataSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::AvatarMetadata *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::AvatarMetadata *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::AvatarMetadata const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRecvAvatarMetadata((gloox::JID const &)*arg2,(kl::AvatarMetadata const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvAvatarData(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onRecvAvatarData((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvAvatarDataSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onRecvAvatarData((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLoadAvatarSuccess(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onLoadAvatarSuccess((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLoadAvatarSuccessSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onLoadAvatarSuccess((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLoadAvatarFailed(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onLoadAvatarFailed((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onLoadAvatarFailedSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onLoadAvatarFailed((gloox::JID const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNotifyPersonalInfoChangedSuccess(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onNotifyPersonalInfoChangedSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNotifyPersonalInfoChangedSuccessSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onNotifyPersonalInfoChangedSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNotifyPersonalInfoChangedFailed(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onNotifyPersonalInfoChangedFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNotifyPersonalInfoChangedFailedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onNotifyPersonalInfoChangedFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvPersonalInfoChangedNotification(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onRecvPersonalInfoChangedNotification((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvPersonalInfoChangedNotificationSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRecvPersonalInfoChangedNotification((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNotifyAddressBookChangedSuccess(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onNotifyAddressBookChangedSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNotifyAddressBookChangedSuccessSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onNotifyAddressBookChangedSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNotifyAddressBookChangedFailed(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onNotifyAddressBookChangedFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onNotifyAddressBookChangedFailedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onNotifyAddressBookChangedFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvAddressBookChangedNotification(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::AddressBookInfo *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::AddressBookInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::AddressBookInfo const & type is null", 0);
    return ;
  } 
  (arg1)->onRecvAddressBookChangedNotification((gloox::JID const &)*arg2,(kl::AddressBookInfo const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvAddressBookChangedNotificationSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::AddressBookInfo *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::AddressBookInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::AddressBookInfo const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRecvAddressBookChangedNotification((gloox::JID const &)*arg2,(kl::AddressBookInfo const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvBackgroundChangedNotification(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::BackgroundInfo *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::BackgroundInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::BackgroundInfo const & type is null", 0);
    return ;
  } 
  (arg1)->onRecvBackgroundChangedNotification((gloox::JID const &)*arg2,(kl::BackgroundInfo const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvBackgroundChangedNotificationSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::BackgroundInfo *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::BackgroundInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::BackgroundInfo const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRecvBackgroundChangedNotification((gloox::JID const &)*arg2,(kl::BackgroundInfo const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishMicroblogSuccess(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onPublishMicroblogSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishMicroblogSuccessSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onPublishMicroblogSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishMicroblogFailed(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onPublishMicroblogFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onPublishMicroblogFailedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onPublishMicroblogFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDeleteMicroblogSuccess(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onDeleteMicroblogSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDeleteMicroblogSuccessSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onDeleteMicroblogSuccess((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDeleteMicroblogFailed(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onDeleteMicroblogFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDeleteMicroblogFailedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onDeleteMicroblogFailed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMicroblog(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  kl::Microblog *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (kl::Microblog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::Microblog const & type is null", 0);
    return ;
  } 
  (arg1)->onRecvMicroblog((kl::Microblog const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMicroblogSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  kl::Microblog *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (kl::Microblog *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::Microblog const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRecvMicroblog((kl::Microblog const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onMicroblogDeleted(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onMicroblogDeleted((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onMicroblogDeletedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onMicroblogDeleted((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onCreateMUCRoomSuccess(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onCreateMUCRoomSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onCreateMUCRoomSuccessSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onCreateMUCRoomSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onCreateMUCRoomFailed(void * jarg1, void * jarg2, int jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::CreateMUCRoomError arg3 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::CreateMUCRoomError)jarg3; 
  (arg1)->onCreateMUCRoomFailed((gloox::JID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onCreateMUCRoomFailedSwigExplicitXmppCallback(void * jarg1, void * jarg2, int jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::CreateMUCRoomError arg3 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::CreateMUCRoomError)jarg3; 
  (arg1)->kl::XmppCallback::onCreateMUCRoomFailed((gloox::JID const &)*arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onConfigMUCRoomSuccess(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onConfigMUCRoomSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onConfigMUCRoomSuccessSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onConfigMUCRoomSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onConfigMUCRoomFailed(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onConfigMUCRoomFailed((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onConfigMUCRoomFailedSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onConfigMUCRoomFailed((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDestroyMUCRoomSuccess(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onDestroyMUCRoomSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDestroyMUCRoomSuccessSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onDestroyMUCRoomSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDestroyMUCRoomFailed(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onDestroyMUCRoomFailed((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDestroyMUCRoomFailedSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onDestroyMUCRoomFailed((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMUCRoomPresence(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, int jarg7, int jarg8) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  gloox::JID *arg5 = 0 ;
  gloox::Presence *arg6 = 0 ;
  gloox::MUCRoomAffiliation arg7 ;
  gloox::MUCRoomRole arg8 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg5 = (gloox::JID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg6 = (gloox::Presence *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::Presence const & type is null", 0);
    return ;
  } 
  arg7 = (gloox::MUCRoomAffiliation)jarg7; 
  arg8 = (gloox::MUCRoomRole)jarg8; 
  (arg1)->onRecvMUCRoomPresence((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(gloox::JID const &)*arg5,(gloox::Presence const &)*arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMUCRoomPresenceSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4, void * jarg5, void * jarg6, int jarg7, int jarg8) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  gloox::JID *arg5 = 0 ;
  gloox::Presence *arg6 = 0 ;
  gloox::MUCRoomAffiliation arg7 ;
  gloox::MUCRoomRole arg8 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg5 = (gloox::JID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg6 = (gloox::Presence *)jarg6;
  if (!arg6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::Presence const & type is null", 0);
    return ;
  } 
  arg7 = (gloox::MUCRoomAffiliation)jarg7; 
  arg8 = (gloox::MUCRoomRole)jarg8; 
  (arg1)->kl::XmppCallback::onRecvMUCRoomPresence((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(gloox::JID const &)*arg5,(gloox::Presence const &)*arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMUCRoomMessage(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::Message *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::Message *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::Message const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onRecvMUCRoomMessage((gloox::JID const &)*arg2,(gloox::Message const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMUCRoomMessageSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::Message *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::Message *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::Message const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onRecvMUCRoomMessage((gloox::JID const &)*arg2,(gloox::Message const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onModifyMUCRoomMemberListSuccess(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onModifyMUCRoomMemberListSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onModifyMUCRoomMemberListSuccessSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onModifyMUCRoomMemberListSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onModifyMUCRoomMemberListFailed(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onModifyMUCRoomMemberListFailed((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onModifyMUCRoomMemberListFailedSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onModifyMUCRoomMemberListFailed((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onModifyMUCRoomOwnerListSuccess(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onModifyMUCRoomOwnerListSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onModifyMUCRoomOwnerListSuccessSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onModifyMUCRoomOwnerListSuccess((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onModifyMUCRoomOwnerListFailed(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onModifyMUCRoomOwnerListFailed((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onModifyMUCRoomOwnerListFailedSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onModifyMUCRoomOwnerListFailed((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMUCRoomDirectInvitation(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onRecvMUCRoomDirectInvitation((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMUCRoomDirectInvitationSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onRecvMUCRoomDirectInvitation((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMUCRoomMediatedInvitation(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onRecvMUCRoomMediatedInvitation((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvMUCRoomMediatedInvitationSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onRecvMUCRoomMediatedInvitation((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveMUCRoomMemberList(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::StringList *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return ;
  } 
  (arg1)->onRetrieveMUCRoomMemberList((gloox::JID const &)*arg2,(gloox::StringList const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveMUCRoomMemberListSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::StringList *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRetrieveMUCRoomMemberList((gloox::JID const &)*arg2,(gloox::StringList const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveMUCRoomOwnerList(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::StringList *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return ;
  } 
  (arg1)->onRetrieveMUCRoomOwnerList((gloox::JID const &)*arg2,(gloox::StringList const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveMUCRoomOwnerListSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::StringList *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::StringList *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::StringList const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRetrieveMUCRoomOwnerList((gloox::JID const &)*arg2,(gloox::StringList const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onMUCRoomSubjectChanged(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onMUCRoomSubjectChanged((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onMUCRoomSubjectChangedSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onMUCRoomSubjectChanged((gloox::JID const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveMUCRoomInfo(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::MUCRoomInfo *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::MUCRoomInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::MUCRoomInfo const & type is null", 0);
    return ;
  } 
  (arg1)->onRetrieveMUCRoomInfo((gloox::JID const &)*arg2,(kl::MUCRoomInfo const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveMUCRoomInfoSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::MUCRoomInfo *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::MUCRoomInfo *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::MUCRoomInfo const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRetrieveMUCRoomInfo((gloox::JID const &)*arg2,(kl::MUCRoomInfo const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveMUCRoomConfig(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::MUCRoomConfig *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::MUCRoomConfig *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::MUCRoomConfig const & type is null", 0);
    return ;
  } 
  (arg1)->onRetrieveMUCRoomConfig((gloox::JID const &)*arg2,(kl::MUCRoomConfig const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRetrieveMUCRoomConfigSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  kl::MUCRoomConfig *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (kl::MUCRoomConfig *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::MUCRoomConfig const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRetrieveMUCRoomConfig((gloox::JID const &)*arg2,(kl::MUCRoomConfig const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onMUCRoomInvitationRejected(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onMUCRoomInvitationRejected((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onMUCRoomInvitationRejectedSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onMUCRoomInvitationRejected((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onChangeMUCNicknameConflict(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onChangeMUCNicknameConflict((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onChangeMUCNicknameConflictSwigExplicitXmppCallback(void * jarg1, void * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onChangeMUCNicknameConflict((gloox::JID const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtRequest(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  kl::FileMetadata *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (kl::FileMetadata *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::FileMetadata const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->onFtRequest((gloox::JID const &)*arg2,(std::string const &)*arg3,(kl::FileMetadata const &)*arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtRequestSwigExplicitXmppCallback(void * jarg1, void * jarg2, wchar_t * jarg3, void * jarg4, unsigned int jarg5, unsigned int jarg6, unsigned int jarg7) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  std::string *arg3 = 0 ;
  kl::FileMetadata *arg4 = 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg4 = (kl::FileMetadata *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::FileMetadata const & type is null", 0);
    return ;
  } 
  arg5 = jarg5 ? true : false; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  (arg1)->kl::XmppCallback::onFtRequest((gloox::JID const &)*arg2,(std::string const &)*arg3,(kl::FileMetadata const &)*arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtBytestreamCreated(void * jarg1, wchar_t * jarg2, int jarg3, void * jarg4, void * jarg5) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  gloox::Bytestream::StreamType arg3 ;
  gloox::JID *arg4 = 0 ;
  gloox::JID *arg5 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::Bytestream::StreamType)jarg3; 
  arg4 = (gloox::JID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg5 = (gloox::JID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->onFtBytestreamCreated((std::string const &)*arg2,arg3,(gloox::JID const &)*arg4,(gloox::JID const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtBytestreamCreatedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2, int jarg3, void * jarg4, void * jarg5) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  gloox::Bytestream::StreamType arg3 ;
  gloox::JID *arg4 = 0 ;
  gloox::JID *arg5 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (gloox::Bytestream::StreamType)jarg3; 
  arg4 = (gloox::JID *)jarg4;
  if (!arg4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg5 = (gloox::JID *)jarg5;
  if (!arg5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onFtBytestreamCreated((std::string const &)*arg2,arg3,(gloox::JID const &)*arg4,(gloox::JID const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtIncomingBytestreamOpened(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onFtIncomingBytestreamOpened((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtIncomingBytestreamOpenedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onFtIncomingBytestreamOpened((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtOutgoingBytestreamOpened(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onFtOutgoingBytestreamOpened((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtOutgoingBytestreamOpenedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onFtOutgoingBytestreamOpened((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvFtBytestreamData(void * jarg1, wchar_t * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  kl::BytestreamData *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (kl::BytestreamData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::BytestreamData const & type is null", 0);
    return ;
  } 
  (arg1)->onRecvFtBytestreamData((std::string const &)*arg2,(kl::BytestreamData const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onRecvFtBytestreamDataSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2, void * jarg3) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  kl::BytestreamData *arg3 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (kl::BytestreamData *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "kl::BytestreamData const & type is null", 0);
    return ;
  } 
  (arg1)->kl::XmppCallback::onRecvFtBytestreamData((std::string const &)*arg2,(kl::BytestreamData const &)*arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtBytestreamClosed(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onFtBytestreamClosed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onFtBytestreamClosedSwigExplicitXmppCallback(void * jarg1, wchar_t * jarg2) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onFtBytestreamClosed((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDiscoItem(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4, wchar_t * jarg5) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->onDiscoItem((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_onDiscoItemSwigExplicitXmppCallback(void * jarg1, void * jarg2, void * jarg3, wchar_t * jarg4, wchar_t * jarg5) {
  kl::XmppCallback *arg1 = (kl::XmppCallback *) 0 ;
  gloox::JID *arg2 = 0 ;
  gloox::JID *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  
  arg1 = (kl::XmppCallback *)jarg1; 
  arg2 = (gloox::JID *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  arg3 = (gloox::JID *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "gloox::JID const & type is null", 0);
    return ;
  } 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->kl::XmppCallback::onDiscoItem((gloox::JID const &)*arg2,(gloox::JID const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XmppCallback() {
  void * jresult ;
  kl::XmppCallback *result = 0 ;
  
  result = (kl::XmppCallback *)new SwigDirector_XmppCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XmppCallback_director_connect(void *objarg, SwigDirector_XmppCallback::SWIG_Callback0_t callback0, SwigDirector_XmppCallback::SWIG_Callback1_t callback1, SwigDirector_XmppCallback::SWIG_Callback2_t callback2, SwigDirector_XmppCallback::SWIG_Callback3_t callback3, SwigDirector_XmppCallback::SWIG_Callback4_t callback4, SwigDirector_XmppCallback::SWIG_Callback5_t callback5, SwigDirector_XmppCallback::SWIG_Callback6_t callback6, SwigDirector_XmppCallback::SWIG_Callback7_t callback7, SwigDirector_XmppCallback::SWIG_Callback8_t callback8, SwigDirector_XmppCallback::SWIG_Callback9_t callback9, SwigDirector_XmppCallback::SWIG_Callback10_t callback10, SwigDirector_XmppCallback::SWIG_Callback11_t callback11, SwigDirector_XmppCallback::SWIG_Callback12_t callback12, SwigDirector_XmppCallback::SWIG_Callback13_t callback13, SwigDirector_XmppCallback::SWIG_Callback14_t callback14, SwigDirector_XmppCallback::SWIG_Callback15_t callback15, SwigDirector_XmppCallback::SWIG_Callback16_t callback16, SwigDirector_XmppCallback::SWIG_Callback17_t callback17, SwigDirector_XmppCallback::SWIG_Callback18_t callback18, SwigDirector_XmppCallback::SWIG_Callback19_t callback19, SwigDirector_XmppCallback::SWIG_Callback20_t callback20, SwigDirector_XmppCallback::SWIG_Callback21_t callback21, SwigDirector_XmppCallback::SWIG_Callback22_t callback22, SwigDirector_XmppCallback::SWIG_Callback23_t callback23, SwigDirector_XmppCallback::SWIG_Callback24_t callback24, SwigDirector_XmppCallback::SWIG_Callback25_t callback25, SwigDirector_XmppCallback::SWIG_Callback26_t callback26, SwigDirector_XmppCallback::SWIG_Callback27_t callback27, SwigDirector_XmppCallback::SWIG_Callback28_t callback28, SwigDirector_XmppCallback::SWIG_Callback29_t callback29, SwigDirector_XmppCallback::SWIG_Callback30_t callback30, SwigDirector_XmppCallback::SWIG_Callback31_t callback31, SwigDirector_XmppCallback::SWIG_Callback32_t callback32, SwigDirector_XmppCallback::SWIG_Callback33_t callback33, SwigDirector_XmppCallback::SWIG_Callback34_t callback34, SwigDirector_XmppCallback::SWIG_Callback35_t callback35, SwigDirector_XmppCallback::SWIG_Callback36_t callback36, SwigDirector_XmppCallback::SWIG_Callback37_t callback37, SwigDirector_XmppCallback::SWIG_Callback38_t callback38, SwigDirector_XmppCallback::SWIG_Callback39_t callback39, SwigDirector_XmppCallback::SWIG_Callback40_t callback40, SwigDirector_XmppCallback::SWIG_Callback41_t callback41, SwigDirector_XmppCallback::SWIG_Callback42_t callback42, SwigDirector_XmppCallback::SWIG_Callback43_t callback43, SwigDirector_XmppCallback::SWIG_Callback44_t callback44, SwigDirector_XmppCallback::SWIG_Callback45_t callback45, SwigDirector_XmppCallback::SWIG_Callback46_t callback46, SwigDirector_XmppCallback::SWIG_Callback47_t callback47, SwigDirector_XmppCallback::SWIG_Callback48_t callback48, SwigDirector_XmppCallback::SWIG_Callback49_t callback49, SwigDirector_XmppCallback::SWIG_Callback50_t callback50, SwigDirector_XmppCallback::SWIG_Callback51_t callback51, SwigDirector_XmppCallback::SWIG_Callback52_t callback52, SwigDirector_XmppCallback::SWIG_Callback53_t callback53, SwigDirector_XmppCallback::SWIG_Callback54_t callback54, SwigDirector_XmppCallback::SWIG_Callback55_t callback55, SwigDirector_XmppCallback::SWIG_Callback56_t callback56, SwigDirector_XmppCallback::SWIG_Callback57_t callback57, SwigDirector_XmppCallback::SWIG_Callback58_t callback58, SwigDirector_XmppCallback::SWIG_Callback59_t callback59, SwigDirector_XmppCallback::SWIG_Callback60_t callback60, SwigDirector_XmppCallback::SWIG_Callback61_t callback61, SwigDirector_XmppCallback::SWIG_Callback62_t callback62, SwigDirector_XmppCallback::SWIG_Callback63_t callback63, SwigDirector_XmppCallback::SWIG_Callback64_t callback64, SwigDirector_XmppCallback::SWIG_Callback65_t callback65, SwigDirector_XmppCallback::SWIG_Callback66_t callback66, SwigDirector_XmppCallback::SWIG_Callback67_t callback67, SwigDirector_XmppCallback::SWIG_Callback68_t callback68, SwigDirector_XmppCallback::SWIG_Callback69_t callback69, SwigDirector_XmppCallback::SWIG_Callback70_t callback70, SwigDirector_XmppCallback::SWIG_Callback71_t callback71, SwigDirector_XmppCallback::SWIG_Callback72_t callback72, SwigDirector_XmppCallback::SWIG_Callback73_t callback73, SwigDirector_XmppCallback::SWIG_Callback74_t callback74, SwigDirector_XmppCallback::SWIG_Callback75_t callback75, SwigDirector_XmppCallback::SWIG_Callback76_t callback76, SwigDirector_XmppCallback::SWIG_Callback77_t callback77) {
  kl::XmppCallback *obj = (kl::XmppCallback *)objarg;
  SwigDirector_XmppCallback *director = dynamic_cast<SwigDirector_XmppCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7, callback8, callback9, callback10, callback11, callback12, callback13, callback14, callback15, callback16, callback17, callback18, callback19, callback20, callback21, callback22, callback23, callback24, callback25, callback26, callback27, callback28, callback29, callback30, callback31, callback32, callback33, callback34, callback35, callback36, callback37, callback38, callback39, callback40, callback41, callback42, callback43, callback44, callback45, callback46, callback47, callback48, callback49, callback50, callback51, callback52, callback53, callback54, callback55, callback56, callback57, callback58, callback59, callback60, callback61, callback62, callback63, callback64, callback65, callback66, callback67, callback68, callback69, callback70, callback71, callback72, callback73, callback74, callback75, callback76, callback77);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentity_category_set(void * jarg1, wchar_t * jarg2) {
  kl::disco::Identity *arg1 = (kl::disco::Identity *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::disco::Identity *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->category = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DiscoIdentity_category_get(void * jarg1) {
  void * jresult ;
  kl::disco::Identity *arg1 = (kl::disco::Identity *) 0 ;
  std::string result;
  
  arg1 = (kl::disco::Identity *)jarg1; 
  result =  ((arg1)->category);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentity_name_set(void * jarg1, wchar_t * jarg2) {
  kl::disco::Identity *arg1 = (kl::disco::Identity *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::disco::Identity *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DiscoIdentity_name_get(void * jarg1) {
  void * jresult ;
  kl::disco::Identity *arg1 = (kl::disco::Identity *) 0 ;
  std::string result;
  
  arg1 = (kl::disco::Identity *)jarg1; 
  result =  ((arg1)->name);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentity_type_set(void * jarg1, wchar_t * jarg2) {
  kl::disco::Identity *arg1 = (kl::disco::Identity *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::disco::Identity *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DiscoIdentity_type_get(void * jarg1) {
  void * jresult ;
  kl::disco::Identity *arg1 = (kl::disco::Identity *) 0 ;
  std::string result;
  
  arg1 = (kl::disco::Identity *)jarg1; 
  result =  ((arg1)->type);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DiscoIdentity() {
  void * jresult ;
  kl::disco::Identity *result = 0 ;
  
  result = (kl::disco::Identity *)new kl::disco::Identity();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DiscoIdentity(void * jarg1) {
  kl::disco::Identity *arg1 = (kl::disco::Identity *) 0 ;
  
  arg1 = (kl::disco::Identity *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Service_jid_set(void * jarg1, wchar_t * jarg2) {
  kl::Service *arg1 = (kl::Service *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::Service *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->jid = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Service_jid_get(void * jarg1) {
  void * jresult ;
  kl::Service *arg1 = (kl::Service *) 0 ;
  std::string result;
  
  arg1 = (kl::Service *)jarg1; 
  result =  ((arg1)->jid);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Service_name_set(void * jarg1, wchar_t * jarg2) {
  kl::Service *arg1 = (kl::Service *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::Service *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Service_name_get(void * jarg1) {
  void * jresult ;
  kl::Service *arg1 = (kl::Service *) 0 ;
  std::string result;
  
  arg1 = (kl::Service *)jarg1; 
  result =  ((arg1)->name);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Service_identities_set(void * jarg1, void * jarg2) {
  kl::Service *arg1 = (kl::Service *) 0 ;
  std::list< kl::disco::Identity * > *arg2 = (std::list< kl::disco::Identity * > *) 0 ;
  
  arg1 = (kl::Service *)jarg1; 
  arg2 = (std::list< kl::disco::Identity * > *)jarg2; 
  if (arg1) (arg1)->identities = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Service_identities_get(void * jarg1) {
  void * jresult ;
  kl::Service *arg1 = (kl::Service *) 0 ;
  std::list< kl::disco::Identity * > *result = 0 ;
  
  arg1 = (kl::Service *)jarg1; 
  result = (std::list< kl::disco::Identity * > *)& ((arg1)->identities);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Service_features_set(void * jarg1, void * jarg2) {
  kl::Service *arg1 = (kl::Service *) 0 ;
  std::list< std::string > *arg2 = (std::list< std::string > *) 0 ;
  
  arg1 = (kl::Service *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2; 
  if (arg1) (arg1)->features = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Service_features_get(void * jarg1) {
  void * jresult ;
  kl::Service *arg1 = (kl::Service *) 0 ;
  std::list< std::string > *result = 0 ;
  
  arg1 = (kl::Service *)jarg1; 
  result = (std::list< std::string > *)& ((arg1)->features);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Service() {
  void * jresult ;
  kl::Service *result = 0 ;
  
  result = (kl::Service *)new kl::Service();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Service(void * jarg1) {
  kl::Service *arg1 = (kl::Service *) 0 ;
  
  arg1 = (kl::Service *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AvatarMetadata(wchar_t * jarg1, int jarg2, wchar_t * jarg3) {
  void * jresult ;
  std::string *arg1 = 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  kl::AvatarMetadata *result = 0 ;
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg1 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg1_str(jarg1);
  arg1 = new std::string( utf162utf8( arg1_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg2 = (int)jarg2; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (kl::AvatarMetadata *)new kl::AvatarMetadata((std::string const &)*arg1,arg2,(std::string const &)*arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AvatarMetadata(void * jarg1) {
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AvatarMetadata_id(void * jarg1) {
  void * jresult ;
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  std::string result;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  result = ((kl::AvatarMetadata const *)arg1)->id();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AvatarMetadata_url(void * jarg1) {
  void * jresult ;
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  std::string result;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  result = ((kl::AvatarMetadata const *)arg1)->url();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AvatarMetadata_bytes(void * jarg1) {
  int jresult ;
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  int result;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  result = (int)((kl::AvatarMetadata const *)arg1)->bytes();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AvatarMetadata_height(void * jarg1) {
  int jresult ;
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  int result;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  result = (int)((kl::AvatarMetadata const *)arg1)->height();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AvatarMetadata_width(void * jarg1) {
  int jresult ;
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  int result;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  result = (int)((kl::AvatarMetadata const *)arg1)->width();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AvatarMetadata_type(void * jarg1) {
  void * jresult ;
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  std::string result;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  result = ((kl::AvatarMetadata const *)arg1)->type();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AvatarMetadata_setUrl(void * jarg1, wchar_t * jarg2) {
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setUrl((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AvatarMetadata_setHeight(void * jarg1, int jarg2) {
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  int arg2 ;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setHeight(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AvatarMetadata_setWidth(void * jarg1, int jarg2) {
  kl::AvatarMetadata *arg1 = (kl::AvatarMetadata *) 0 ;
  int arg2 ;
  
  arg1 = (kl::AvatarMetadata *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setWidth(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MUCRoomInfo() {
  void * jresult ;
  kl::MUCRoomInfo *result = 0 ;
  
  result = (kl::MUCRoomInfo *)new kl::MUCRoomInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_roomname_set(void * jarg1, wchar_t * jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->roomname = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUCRoomInfo_roomname_get(void * jarg1) {
  void * jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  std::string result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result =  ((arg1)->roomname);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_roomdesc_set(void * jarg1, wchar_t * jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->roomdesc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUCRoomInfo_roomdesc_get(void * jarg1) {
  void * jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  std::string result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result =  ((arg1)->roomdesc);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_roomsubject_set(void * jarg1, wchar_t * jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->roomsubject = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUCRoomInfo_roomsubject_get(void * jarg1) {
  void * jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  std::string result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result =  ((arg1)->roomsubject);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_occupants_set(void * jarg1, int jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  int arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->occupants = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MUCRoomInfo_occupants_get(void * jarg1) {
  int jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  int result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result = (int) ((arg1)->occupants);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_creationdate_set(void * jarg1, wchar_t * jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->creationdate = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUCRoomInfo_creationdate_get(void * jarg1) {
  void * jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  std::string result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result =  ((arg1)->creationdate);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_isPublic_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPublic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomInfo_isPublic_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result = (bool) ((arg1)->isPublic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_isPersistent_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPersistent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomInfo_isPersistent_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result = (bool) ((arg1)->isPersistent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_isModerated_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isModerated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomInfo_isModerated_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result = (bool) ((arg1)->isModerated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_isMembersOnly_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMembersOnly = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomInfo_isMembersOnly_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result = (bool) ((arg1)->isMembersOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_isPasswordProtected_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPasswordProtected = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomInfo_isPasswordProtected_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result = (bool) ((arg1)->isPasswordProtected);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomInfo_isNonAnonymous_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isNonAnonymous = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomInfo_isNonAnonymous_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  result = (bool) ((arg1)->isNonAnonymous);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MUCRoomInfo(void * jarg1) {
  kl::MUCRoomInfo *arg1 = (kl::MUCRoomInfo *) 0 ;
  
  arg1 = (kl::MUCRoomInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MUCRoomConfig() {
  void * jresult ;
  kl::MUCRoomConfig *result = 0 ;
  
  result = (kl::MUCRoomConfig *)new kl::MUCRoomConfig();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_roomname_set(void * jarg1, wchar_t * jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->roomname = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUCRoomConfig_roomname_get(void * jarg1) {
  void * jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  std::string result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result =  ((arg1)->roomname);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_roomdesc_set(void * jarg1, wchar_t * jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->roomdesc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUCRoomConfig_roomdesc_get(void * jarg1) {
  void * jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  std::string result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result =  ((arg1)->roomdesc);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_enableLogging_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableLogging = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomConfig_enableLogging_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result = (bool) ((arg1)->enableLogging);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_enableChangeSubject_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->enableChangeSubject = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomConfig_enableChangeSubject_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result = (bool) ((arg1)->enableChangeSubject);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_isPublic_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPublic = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomConfig_isPublic_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result = (bool) ((arg1)->isPublic);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_isPersistent_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPersistent = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomConfig_isPersistent_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result = (bool) ((arg1)->isPersistent);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_isModerated_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isModerated = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomConfig_isModerated_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result = (bool) ((arg1)->isModerated);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_isMembersOnly_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isMembersOnly = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomConfig_isMembersOnly_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result = (bool) ((arg1)->isMembersOnly);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_isPasswordProtected_set(void * jarg1, unsigned int jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isPasswordProtected = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MUCRoomConfig_isPasswordProtected_get(void * jarg1) {
  unsigned int jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  bool result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result = (bool) ((arg1)->isPasswordProtected);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_MUCRoomConfig_roompassword_set(void * jarg1, wchar_t * jarg2) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->roompassword = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MUCRoomConfig_roompassword_get(void * jarg1) {
  void * jresult ;
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  std::string result;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  result =  ((arg1)->roompassword);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MUCRoomConfig(void * jarg1) {
  kl::MUCRoomConfig *arg1 = (kl::MUCRoomConfig *) 0 ;
  
  arg1 = (kl::MUCRoomConfig *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileMetadata_name_set(void * jarg1, wchar_t * jarg2) {
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileMetadata_name_get(void * jarg1) {
  void * jresult ;
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string result;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  result =  ((arg1)->name);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileMetadata_size_set(void * jarg1, long jarg2) {
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  long arg2 ;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  arg2 = (long)jarg2; 
  if (arg1) (arg1)->size = arg2;
}


SWIGEXPORT long SWIGSTDCALL CSharp_FileMetadata_size_get(void * jarg1) {
  long jresult ;
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  long result;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  result = (long) ((arg1)->size);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileMetadata_hash_set(void * jarg1, wchar_t * jarg2) {
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->hash = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileMetadata_hash_get(void * jarg1) {
  void * jresult ;
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string result;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  result =  ((arg1)->hash);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileMetadata_date_set(void * jarg1, wchar_t * jarg2) {
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->date = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileMetadata_date_get(void * jarg1) {
  void * jresult ;
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string result;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  result =  ((arg1)->date);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileMetadata_mimetype_set(void * jarg1, wchar_t * jarg2) {
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->mimetype = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileMetadata_mimetype_get(void * jarg1) {
  void * jresult ;
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string result;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  result =  ((arg1)->mimetype);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_FileMetadata_desc_set(void * jarg1, wchar_t * jarg2) {
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->desc = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FileMetadata_desc_get(void * jarg1) {
  void * jresult ;
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  std::string result;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  result =  ((arg1)->desc);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_FileMetadata() {
  void * jresult ;
  kl::FileMetadata *result = 0 ;
  
  result = (kl::FileMetadata *)new kl::FileMetadata();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_FileMetadata(void * jarg1) {
  kl::FileMetadata *arg1 = (kl::FileMetadata *) 0 ;
  
  arg1 = (kl::FileMetadata *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BytestreamData(wchar_t * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  kl::BytestreamData *result = 0 ;
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg1 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg1_str(jarg1);
  arg1 = new std::string( utf162utf8( arg1_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (kl::BytestreamData *)new kl::BytestreamData((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BytestreamData(void * jarg1) {
  kl::BytestreamData *arg1 = (kl::BytestreamData *) 0 ;
  
  arg1 = (kl::BytestreamData *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BytestreamData_copy(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  kl::BytestreamData *arg1 = (kl::BytestreamData *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (kl::BytestreamData *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)(arg1)->copy(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BytestreamData_length(void * jarg1) {
  unsigned int jresult ;
  kl::BytestreamData *arg1 = (kl::BytestreamData *) 0 ;
  unsigned int result;
  
  arg1 = (kl::BytestreamData *)jarg1; 
  result = (unsigned int)(arg1)->length();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Microblog(wchar_t * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  kl::Microblog *result = 0 ;
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg1 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg1_str(jarg1);
  arg1 = new std::string( utf162utf8( arg1_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (kl::Microblog *)new kl::Microblog((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Microblog(void * jarg1) {
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  
  arg1 = (kl::Microblog *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblog_id(void * jarg1) {
  void * jresult ;
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string result;
  
  arg1 = (kl::Microblog *)jarg1; 
  result = ((kl::Microblog const *)arg1)->id();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblog_author(void * jarg1) {
  void * jresult ;
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string result;
  
  arg1 = (kl::Microblog *)jarg1; 
  result = ((kl::Microblog const *)arg1)->author();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Microblog_type(void * jarg1) {
  int jresult ;
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  kl::Microblog::Type result;
  
  arg1 = (kl::Microblog *)jarg1; 
  result = (kl::Microblog::Type)((kl::Microblog const *)arg1)->type();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblog_content(void * jarg1) {
  void * jresult ;
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string result;
  
  arg1 = (kl::Microblog *)jarg1; 
  result = ((kl::Microblog const *)arg1)->content();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblog_published(void * jarg1) {
  void * jresult ;
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string result;
  
  arg1 = (kl::Microblog *)jarg1; 
  result = ((kl::Microblog const *)arg1)->published();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblog_geoloc(void * jarg1) {
  void * jresult ;
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string result;
  
  arg1 = (kl::Microblog *)jarg1; 
  result = ((kl::Microblog const *)arg1)->geoloc();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblog_device(void * jarg1) {
  void * jresult ;
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string result;
  
  arg1 = (kl::Microblog *)jarg1; 
  result = ((kl::Microblog const *)arg1)->device();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Microblog_commentLink(void * jarg1) {
  void * jresult ;
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string result;
  
  arg1 = (kl::Microblog *)jarg1; 
  result = ((kl::Microblog const *)arg1)->commentLink();
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblog_setAuthor(void * jarg1, wchar_t * jarg2) {
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Microblog *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setAuthor((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblog_setType(void * jarg1, int jarg2) {
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  kl::Microblog::Type arg2 ;
  
  arg1 = (kl::Microblog *)jarg1; 
  arg2 = (kl::Microblog::Type)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblog_setContent(void * jarg1, wchar_t * jarg2) {
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Microblog *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setContent((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblog_setPublished(void * jarg1, wchar_t * jarg2) {
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Microblog *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setPublished((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblog_setGeoloc(void * jarg1, wchar_t * jarg2) {
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Microblog *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setGeoloc((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblog_setDevice(void * jarg1, wchar_t * jarg2) {
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Microblog *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setDevice((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Microblog_setCommentLink(void * jarg1, wchar_t * jarg2) {
  kl::Microblog *arg1 = (kl::Microblog *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Microblog *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setCommentLink((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCard__SWIG_0() {
  void * jresult ;
  kl::VCard *result = 0 ;
  
  result = (kl::VCard *)new kl::VCard();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCard__SWIG_1(wchar_t * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  kl::VCard *result = 0 ;
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg1 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg1_str(jarg1);
  arg1 = new std::string( utf162utf8( arg1_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (kl::VCard *)new kl::VCard((std::string const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCard(void * jarg1) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCard_isValid(void * jarg1) {
  unsigned int jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  bool result;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (bool)((kl::VCard const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_xml(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->xml();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setFormattedname(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setFormattedname((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_formattedname(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->formattedname();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setName(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setName((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_name(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  kl::VCardName *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (kl::VCardName *)((kl::VCard const *)arg1)->name();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setNickname(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setNickname((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_nickname(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->nickname();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setUrl(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setUrl((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_url(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->url();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setBday(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setBday((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_bday(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->bday();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setJabberid(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setJabberid((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_jabberid(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->jabberid();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setTitle(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setTitle((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_title(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->title();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setRole(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setRole((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_role(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->role();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setNote(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setNote((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_note(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->note();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setDesc(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setDesc((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_desc(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->desc();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setMailer(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setMailer((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_mailer(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->mailer();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setRev(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setRev((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_rev(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->rev();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setUid(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setUid((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_uid(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->uid();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setTz(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setTz((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_tz(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->tz();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setProdid(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setProdid((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_prodid(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->prodid();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setSortstring(void * jarg1, wchar_t * jarg2) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setSortstring((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_sortstring(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::string *) &((kl::VCard const *)arg1)->sortstring();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setPhoto(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setPhoto((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_photo(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  kl::VCardPhoto *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (kl::VCardPhoto *)((kl::VCard const *)arg1)->photo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setLogo(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setLogo((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_logo(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  kl::VCardPhoto *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (kl::VCardPhoto *)((kl::VCard const *)arg1)->logo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_addEmail(void * jarg1, wchar_t * jarg2, int jarg3) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (int)jarg3; 
  (arg1)->addEmail((std::string const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_emailList(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::list< kl::VCardEmail * > *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::list< kl::VCardEmail * > *) &(arg1)->emailList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_addAddress(void * jarg1, wchar_t * jarg2, wchar_t * jarg3, wchar_t * jarg4, wchar_t * jarg5, wchar_t * jarg6, wchar_t * jarg7, wchar_t * jarg8, int jarg9) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  std::string *arg4 = 0 ;
  std::string *arg5 = 0 ;
  std::string *arg6 = 0 ;
  std::string *arg7 = 0 ;
  std::string *arg8 = 0 ;
  int arg9 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg4 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg4_str(jarg4);
  arg4 = new std::string( utf162utf8( arg4_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg5 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg5_str(jarg5);
  arg5 = new std::string( utf162utf8( arg5_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg6 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg6_str(jarg6);
  arg6 = new std::string( utf162utf8( arg6_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg7 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg7_str(jarg7);
  arg7 = new std::string( utf162utf8( arg7_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg8 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg8_str(jarg8);
  arg8 = new std::string( utf162utf8( arg8_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg9 = (int)jarg9; 
  (arg1)->addAddress((std::string const &)*arg2,(std::string const &)*arg3,(std::string const &)*arg4,(std::string const &)*arg5,(std::string const &)*arg6,(std::string const &)*arg7,(std::string const &)*arg8,arg9);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_addressList(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::list< kl::VCardAddress * > *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::list< kl::VCardAddress * > *) &(arg1)->addressList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_addLabel(void * jarg1, void * jarg2, int jarg3) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (kl::VCard *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return ;
  } 
  arg3 = (int)jarg3; 
  (arg1)->addLabel((std::list< std::string > const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_labelList(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::list< kl::VCardLabel * > *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::list< kl::VCardLabel * > *) &(arg1)->labelList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_addTelephone(void * jarg1, wchar_t * jarg2, int jarg3) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  int arg3 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (int)jarg3; 
  (arg1)->addTelephone((std::string const &)*arg2,arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_telephoneList(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::list< kl::VCardTelephone * > *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (std::list< kl::VCardTelephone * > *) &(arg1)->telephoneList();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setGeo(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setGeo((std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_geo(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  kl::VCardGeo *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (kl::VCardGeo *)((kl::VCard const *)arg1)->geo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCard_setOrg(void * jarg1, wchar_t * jarg2, void * jarg3) {
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  std::string *arg2 = 0 ;
  std::list< std::string > *arg3 = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  arg3 = (std::list< std::string > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->setOrg((std::string const &)*arg2,(std::list< std::string > const &)*arg3);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCard_org(void * jarg1) {
  void * jresult ;
  kl::VCard *arg1 = (kl::VCard *) 0 ;
  kl::VCardOrg *result = 0 ;
  
  arg1 = (kl::VCard *)jarg1; 
  result = (kl::VCardOrg *)((kl::VCard const *)arg1)->org();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardName() {
  void * jresult ;
  kl::VCardName *result = 0 ;
  
  result = (kl::VCardName *)new kl::VCardName();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardName(void * jarg1) {
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardName_family(void * jarg1) {
  void * jresult ;
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  result = (std::string *) &((kl::VCardName const *)arg1)->family();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardName_given(void * jarg1) {
  void * jresult ;
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  result = (std::string *) &((kl::VCardName const *)arg1)->given();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardName_middle(void * jarg1) {
  void * jresult ;
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  result = (std::string *) &((kl::VCardName const *)arg1)->middle();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardName_prefix(void * jarg1) {
  void * jresult ;
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  result = (std::string *) &((kl::VCardName const *)arg1)->prefix();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardName_suffix(void * jarg1) {
  void * jresult ;
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  result = (std::string *) &((kl::VCardName const *)arg1)->suffix();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardName_setFamily(void * jarg1, wchar_t * jarg2) {
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setFamily((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardName_setGiven(void * jarg1, wchar_t * jarg2) {
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setGiven((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardName_setMiddle(void * jarg1, wchar_t * jarg2) {
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setMiddle((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardName_setPrefix(void * jarg1, wchar_t * jarg2) {
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setPrefix((std::string const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardName_setSuffix(void * jarg1, wchar_t * jarg2) {
  kl::VCardName *arg1 = (kl::VCardName *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardName *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setSuffix((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardPhoto() {
  void * jresult ;
  kl::VCardPhoto *result = 0 ;
  
  result = (kl::VCardPhoto *)new kl::VCardPhoto();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardPhoto(void * jarg1) {
  kl::VCardPhoto *arg1 = (kl::VCardPhoto *) 0 ;
  
  arg1 = (kl::VCardPhoto *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardPhoto_setExtval(void * jarg1, wchar_t * jarg2) {
  kl::VCardPhoto *arg1 = (kl::VCardPhoto *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardPhoto *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setExtval((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardPhoto_extval(void * jarg1) {
  void * jresult ;
  kl::VCardPhoto *arg1 = (kl::VCardPhoto *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardPhoto *)jarg1; 
  result = (std::string *) &((kl::VCardPhoto const *)arg1)->extval();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardPhoto_setBinval(void * jarg1, wchar_t * jarg2) {
  kl::VCardPhoto *arg1 = (kl::VCardPhoto *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardPhoto *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setBinval((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardPhoto_binval(void * jarg1) {
  void * jresult ;
  kl::VCardPhoto *arg1 = (kl::VCardPhoto *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardPhoto *)jarg1; 
  result = (std::string *) &((kl::VCardPhoto const *)arg1)->binval();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardPhoto_setType(void * jarg1, wchar_t * jarg2) {
  kl::VCardPhoto *arg1 = (kl::VCardPhoto *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardPhoto *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setType((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardPhoto_type(void * jarg1) {
  void * jresult ;
  kl::VCardPhoto *arg1 = (kl::VCardPhoto *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardPhoto *)jarg1; 
  result = (std::string *) &((kl::VCardPhoto const *)arg1)->type();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardEmail() {
  void * jresult ;
  kl::VCardEmail *result = 0 ;
  
  result = (kl::VCardEmail *)new kl::VCardEmail();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardEmail(void * jarg1) {
  kl::VCardEmail *arg1 = (kl::VCardEmail *) 0 ;
  
  arg1 = (kl::VCardEmail *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardEmail_setUserid(void * jarg1, wchar_t * jarg2) {
  kl::VCardEmail *arg1 = (kl::VCardEmail *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardEmail *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setUserid((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardEmail_userid(void * jarg1) {
  void * jresult ;
  kl::VCardEmail *arg1 = (kl::VCardEmail *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardEmail *)jarg1; 
  result = (std::string *) &((kl::VCardEmail const *)arg1)->userid();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardEmail_isHome(void * jarg1) {
  unsigned int jresult ;
  kl::VCardEmail *arg1 = (kl::VCardEmail *) 0 ;
  bool result;
  
  arg1 = (kl::VCardEmail *)jarg1; 
  result = (bool)((kl::VCardEmail const *)arg1)->isHome();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardEmail_isWork(void * jarg1) {
  unsigned int jresult ;
  kl::VCardEmail *arg1 = (kl::VCardEmail *) 0 ;
  bool result;
  
  arg1 = (kl::VCardEmail *)jarg1; 
  result = (bool)((kl::VCardEmail const *)arg1)->isWork();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardEmail_isInternet(void * jarg1) {
  unsigned int jresult ;
  kl::VCardEmail *arg1 = (kl::VCardEmail *) 0 ;
  bool result;
  
  arg1 = (kl::VCardEmail *)jarg1; 
  result = (bool)((kl::VCardEmail const *)arg1)->isInternet();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardEmail_isPref(void * jarg1) {
  unsigned int jresult ;
  kl::VCardEmail *arg1 = (kl::VCardEmail *) 0 ;
  bool result;
  
  arg1 = (kl::VCardEmail *)jarg1; 
  result = (bool)((kl::VCardEmail const *)arg1)->isPref();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardEmail_isX400(void * jarg1) {
  unsigned int jresult ;
  kl::VCardEmail *arg1 = (kl::VCardEmail *) 0 ;
  bool result;
  
  arg1 = (kl::VCardEmail *)jarg1; 
  result = (bool)((kl::VCardEmail const *)arg1)->isX400();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardEmail_setType(void * jarg1, int jarg2) {
  kl::VCardEmail *arg1 = (kl::VCardEmail *) 0 ;
  int arg2 ;
  
  arg1 = (kl::VCardEmail *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardAddress() {
  void * jresult ;
  kl::VCardAddress *result = 0 ;
  
  result = (kl::VCardAddress *)new kl::VCardAddress();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardAddress(void * jarg1) {
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddress_setPobox(void * jarg1, wchar_t * jarg2) {
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setPobox((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardAddress_pobox(void * jarg1) {
  void * jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (std::string *) &((kl::VCardAddress const *)arg1)->pobox();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddress_setExtadd(void * jarg1, wchar_t * jarg2) {
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setExtadd((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardAddress_extadd(void * jarg1) {
  void * jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (std::string *) &((kl::VCardAddress const *)arg1)->extadd();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddress_setStreet(void * jarg1, wchar_t * jarg2) {
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setStreet((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardAddress_street(void * jarg1) {
  void * jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (std::string *) &((kl::VCardAddress const *)arg1)->street();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddress_setLocality(void * jarg1, wchar_t * jarg2) {
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setLocality((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardAddress_locality(void * jarg1) {
  void * jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (std::string *) &((kl::VCardAddress const *)arg1)->locality();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddress_setRegion(void * jarg1, wchar_t * jarg2) {
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setRegion((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardAddress_region(void * jarg1) {
  void * jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (std::string *) &((kl::VCardAddress const *)arg1)->region();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddress_setPcode(void * jarg1, wchar_t * jarg2) {
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setPcode((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardAddress_pcode(void * jarg1) {
  void * jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (std::string *) &((kl::VCardAddress const *)arg1)->pcode();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddress_setCtry(void * jarg1, wchar_t * jarg2) {
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setCtry((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardAddress_ctry(void * jarg1) {
  void * jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (std::string *) &((kl::VCardAddress const *)arg1)->ctry();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardAddress_isHome(void * jarg1) {
  unsigned int jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  bool result;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (bool)((kl::VCardAddress const *)arg1)->isHome();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardAddress_isWork(void * jarg1) {
  unsigned int jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  bool result;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (bool)((kl::VCardAddress const *)arg1)->isWork();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardAddress_isPostal(void * jarg1) {
  unsigned int jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  bool result;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (bool)((kl::VCardAddress const *)arg1)->isPostal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardAddress_isParcel(void * jarg1) {
  unsigned int jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  bool result;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (bool)((kl::VCardAddress const *)arg1)->isParcel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardAddress_isPref(void * jarg1) {
  unsigned int jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  bool result;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (bool)((kl::VCardAddress const *)arg1)->isPref();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardAddress_isDom(void * jarg1) {
  unsigned int jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  bool result;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (bool)((kl::VCardAddress const *)arg1)->isDom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardAddress_isIntl(void * jarg1) {
  unsigned int jresult ;
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  bool result;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  result = (bool)((kl::VCardAddress const *)arg1)->isIntl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddress_setType(void * jarg1, int jarg2) {
  kl::VCardAddress *arg1 = (kl::VCardAddress *) 0 ;
  int arg2 ;
  
  arg1 = (kl::VCardAddress *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardLabel() {
  void * jresult ;
  kl::VCardLabel *result = 0 ;
  
  result = (kl::VCardLabel *)new kl::VCardLabel();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardLabel(void * jarg1) {
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardLabel_setLines(void * jarg1, void * jarg2) {
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->setLines((std::list< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardLabel_lines(void * jarg1) {
  void * jresult ;
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  std::list< std::string > *result = 0 ;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  result = (std::list< std::string > *) &((kl::VCardLabel const *)arg1)->lines();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardLabel_isHome(void * jarg1) {
  unsigned int jresult ;
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  bool result;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  result = (bool)((kl::VCardLabel const *)arg1)->isHome();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardLabel_isWork(void * jarg1) {
  unsigned int jresult ;
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  bool result;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  result = (bool)((kl::VCardLabel const *)arg1)->isWork();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardLabel_isPostal(void * jarg1) {
  unsigned int jresult ;
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  bool result;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  result = (bool)((kl::VCardLabel const *)arg1)->isPostal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardLabel_isParcel(void * jarg1) {
  unsigned int jresult ;
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  bool result;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  result = (bool)((kl::VCardLabel const *)arg1)->isParcel();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardLabel_isPref(void * jarg1) {
  unsigned int jresult ;
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  bool result;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  result = (bool)((kl::VCardLabel const *)arg1)->isPref();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardLabel_isDom(void * jarg1) {
  unsigned int jresult ;
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  bool result;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  result = (bool)((kl::VCardLabel const *)arg1)->isDom();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardLabel_isIntl(void * jarg1) {
  unsigned int jresult ;
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  bool result;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  result = (bool)((kl::VCardLabel const *)arg1)->isIntl();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardLabel_setType(void * jarg1, int jarg2) {
  kl::VCardLabel *arg1 = (kl::VCardLabel *) 0 ;
  int arg2 ;
  
  arg1 = (kl::VCardLabel *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardTelephone() {
  void * jresult ;
  kl::VCardTelephone *result = 0 ;
  
  result = (kl::VCardTelephone *)new kl::VCardTelephone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardTelephone(void * jarg1) {
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardTelephone_setNumber(void * jarg1, wchar_t * jarg2) {
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setNumber((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardTelephone_number(void * jarg1) {
  void * jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (std::string *) &((kl::VCardTelephone const *)arg1)->number();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isHome(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isHome();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isWork(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isWork();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isVoice(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isVoice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isFax(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isFax();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isPager(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isPager();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isMsg(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isMsg();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isCell(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isCell();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isVideo(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isVideo();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isBBS(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isBBS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isModem(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isModem();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isISDN(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isISDN();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isPCS(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isPCS();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephone_isPref(void * jarg1) {
  unsigned int jresult ;
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  bool result;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  result = (bool)((kl::VCardTelephone const *)arg1)->isPref();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardTelephone_setType(void * jarg1, int jarg2) {
  kl::VCardTelephone *arg1 = (kl::VCardTelephone *) 0 ;
  int arg2 ;
  
  arg1 = (kl::VCardTelephone *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setType(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardGeo() {
  void * jresult ;
  kl::VCardGeo *result = 0 ;
  
  result = (kl::VCardGeo *)new kl::VCardGeo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardGeo(void * jarg1) {
  kl::VCardGeo *arg1 = (kl::VCardGeo *) 0 ;
  
  arg1 = (kl::VCardGeo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardGeo_setLatitude(void * jarg1, wchar_t * jarg2) {
  kl::VCardGeo *arg1 = (kl::VCardGeo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardGeo *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setLatitude((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardGeo_latitude(void * jarg1) {
  void * jresult ;
  kl::VCardGeo *arg1 = (kl::VCardGeo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardGeo *)jarg1; 
  result = (std::string *) &((kl::VCardGeo const *)arg1)->latitude();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardGeo_setLongitude(void * jarg1, wchar_t * jarg2) {
  kl::VCardGeo *arg1 = (kl::VCardGeo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardGeo *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setLongitude((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardGeo_longitude(void * jarg1) {
  void * jresult ;
  kl::VCardGeo *arg1 = (kl::VCardGeo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardGeo *)jarg1; 
  result = (std::string *) &((kl::VCardGeo const *)arg1)->longitude();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardOrg() {
  void * jresult ;
  kl::VCardOrg *result = 0 ;
  
  result = (kl::VCardOrg *)new kl::VCardOrg();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardOrg(void * jarg1) {
  kl::VCardOrg *arg1 = (kl::VCardOrg *) 0 ;
  
  arg1 = (kl::VCardOrg *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardOrg_setName(void * jarg1, wchar_t * jarg2) {
  kl::VCardOrg *arg1 = (kl::VCardOrg *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::VCardOrg *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setName((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardOrg_name(void * jarg1) {
  void * jresult ;
  kl::VCardOrg *arg1 = (kl::VCardOrg *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::VCardOrg *)jarg1; 
  result = (std::string *) &((kl::VCardOrg const *)arg1)->name();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardOrg_setUnits(void * jarg1, void * jarg2) {
  kl::VCardOrg *arg1 = (kl::VCardOrg *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  arg1 = (kl::VCardOrg *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return ;
  } 
  (arg1)->setUnits((std::list< std::string > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardOrg_units(void * jarg1) {
  void * jresult ;
  kl::VCardOrg *arg1 = (kl::VCardOrg *) 0 ;
  std::list< std::string > *result = 0 ;
  
  arg1 = (kl::VCardOrg *)jarg1; 
  result = (std::list< std::string > *) &((kl::VCardOrg const *)arg1)->units();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AddressBookInfo() {
  void * jresult ;
  kl::AddressBookInfo *result = 0 ;
  
  result = (kl::AddressBookInfo *)new kl::AddressBookInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddressBookInfo_id_set(void * jarg1, wchar_t * jarg2) {
  kl::AddressBookInfo *arg1 = (kl::AddressBookInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::AddressBookInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddressBookInfo_id_get(void * jarg1) {
  void * jresult ;
  kl::AddressBookInfo *arg1 = (kl::AddressBookInfo *) 0 ;
  std::string result;
  
  arg1 = (kl::AddressBookInfo *)jarg1; 
  result =  ((arg1)->id);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddressBookInfo_name_set(void * jarg1, wchar_t * jarg2) {
  kl::AddressBookInfo *arg1 = (kl::AddressBookInfo *) 0 ;
  std::string arg2 ;
  
  arg1 = (kl::AddressBookInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  (&arg2)->assign( utf162utf8(jarg2) ); 
  /* %typemap(in, canthrow=1) std::string  C# --> C++ */
  
  if (arg1) (arg1)->name = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AddressBookInfo_name_get(void * jarg1) {
  void * jresult ;
  kl::AddressBookInfo *arg1 = (kl::AddressBookInfo *) 0 ;
  std::string result;
  
  arg1 = (kl::AddressBookInfo *)jarg1; 
  result =  ((arg1)->name);
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AddressBookInfo_isAvailable_set(void * jarg1, unsigned int jarg2) {
  kl::AddressBookInfo *arg1 = (kl::AddressBookInfo *) 0 ;
  bool arg2 ;
  
  arg1 = (kl::AddressBookInfo *)jarg1; 
  arg2 = jarg2 ? true : false; 
  if (arg1) (arg1)->isAvailable = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AddressBookInfo_isAvailable_get(void * jarg1) {
  unsigned int jresult ;
  kl::AddressBookInfo *arg1 = (kl::AddressBookInfo *) 0 ;
  bool result;
  
  arg1 = (kl::AddressBookInfo *)jarg1; 
  result = (bool) ((arg1)->isAvailable);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AddressBookInfo(void * jarg1) {
  kl::AddressBookInfo *arg1 = (kl::AddressBookInfo *) 0 ;
  
  arg1 = (kl::AddressBookInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IMailSMTPInfo() {
  void * jresult ;
  kl::IMailSMTPInfo *result = 0 ;
  
  result = (kl::IMailSMTPInfo *)new kl::IMailSMTPInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IMailSMTPInfo(void * jarg1) {
  kl::IMailSMTPInfo *arg1 = (kl::IMailSMTPInfo *) 0 ;
  
  arg1 = (kl::IMailSMTPInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMailSMTPInfo_setMessageID(void * jarg1, wchar_t * jarg2) {
  kl::IMailSMTPInfo *arg1 = (kl::IMailSMTPInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::IMailSMTPInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setMessageID((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMailSMTPInfo_messageID(void * jarg1) {
  void * jresult ;
  kl::IMailSMTPInfo *arg1 = (kl::IMailSMTPInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::IMailSMTPInfo *)jarg1; 
  result = (std::string *) &((kl::IMailSMTPInfo const *)arg1)->messageID();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMailSMTPInfo_setTitle(void * jarg1, wchar_t * jarg2) {
  kl::IMailSMTPInfo *arg1 = (kl::IMailSMTPInfo *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::IMailSMTPInfo *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setTitle((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_IMailSMTPInfo_title(void * jarg1) {
  void * jresult ;
  kl::IMailSMTPInfo *arg1 = (kl::IMailSMTPInfo *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::IMailSMTPInfo *)jarg1; 
  result = (std::string *) &((kl::IMailSMTPInfo const *)arg1)->title();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IMailSMTPInfo_setAttachmentNum(void * jarg1, int jarg2) {
  kl::IMailSMTPInfo *arg1 = (kl::IMailSMTPInfo *) 0 ;
  int arg2 ;
  
  arg1 = (kl::IMailSMTPInfo *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setAttachmentNum(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_IMailSMTPInfo_attachmentNum(void * jarg1) {
  int jresult ;
  kl::IMailSMTPInfo *arg1 = (kl::IMailSMTPInfo *) 0 ;
  int result;
  
  arg1 = (kl::IMailSMTPInfo *)jarg1; 
  result = (int)(arg1)->attachmentNum();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Geoloc() {
  void * jresult ;
  kl::Geoloc *result = 0 ;
  
  result = (kl::Geoloc *)new kl::Geoloc();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Geoloc(void * jarg1) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setAccuracy(void * jarg1, double jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double arg2 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAccuracy(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Geoloc_accuracy(void * jarg1) {
  double jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double result;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (double)(arg1)->accuracy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setAlt(void * jarg1, double jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double arg2 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setAlt(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Geoloc_alt(void * jarg1) {
  double jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double result;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (double)(arg1)->alt();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setArea(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setArea((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_area(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->area();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setBearing(void * jarg1, double jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double arg2 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setBearing(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Geoloc_bearing(void * jarg1) {
  double jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double result;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (double)(arg1)->bearing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setBuilding(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setBuilding((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_building(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->building();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setCountry(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setCountry((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_country(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->country();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setCountrycode(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setCountrycode((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_countrycode(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->countrycode();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setDatum(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setDatum((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_datum(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->datum();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setDescription(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setDescription((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_description(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->description();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setError(void * jarg1, double jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double arg2 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setError(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Geoloc_error(void * jarg1) {
  double jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double result;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (double)(arg1)->error();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setFloor(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setFloor((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_floor(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->floor();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setLat(void * jarg1, double jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double arg2 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLat(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Geoloc_lat(void * jarg1) {
  double jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double result;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (double)(arg1)->lat();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setLocality(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setLocality((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_locality(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->locality();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setLon(void * jarg1, double jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double arg2 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setLon(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Geoloc_lon(void * jarg1) {
  double jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double result;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (double)(arg1)->lon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setPostalcode(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setPostalcode((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_postalcode(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->postalcode();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setRegion(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setRegion((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_region(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->region();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setRoom(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setRoom((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_room(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->room();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setSpeed(void * jarg1, double jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double arg2 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setSpeed(arg2);
}


SWIGEXPORT double SWIGSTDCALL CSharp_Geoloc_speed(void * jarg1) {
  double jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  double result;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (double)(arg1)->speed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setStreet(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setStreet((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_street(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->street();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setText(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setText((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_text(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->text();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setTimestamp(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setTimestamp((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_timestamp(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->timestamp();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setTzo(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setTzo((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_tzo(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->tzo();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Geoloc_setUri(void * jarg1, wchar_t * jarg2) {
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->setUri((std::string const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Geoloc_uri(void * jarg1) {
  void * jresult ;
  kl::Geoloc *arg1 = (kl::Geoloc *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (kl::Geoloc *)jarg1; 
  result = (std::string *) &((kl::Geoloc const *)arg1)->uri();
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BackgroundInfo() {
  void * jresult ;
  kl::BackgroundInfo *result = 0 ;
  
  result = (kl::BackgroundInfo *)new kl::BackgroundInfo();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BackgroundInfo(void * jarg1) {
  kl::BackgroundInfo *arg1 = (kl::BackgroundInfo *) 0 ;
  
  arg1 = (kl::BackgroundInfo *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_Clear(void * jarg1) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  arg1 = (std::list< std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_Add(void * jarg1, wchar_t * jarg2) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (std::list< std::string > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  (arg1)->push_back((std::string const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string >::size_type result;
  
  arg1 = (std::list< std::string > *)jarg1; 
  result = ((std::list< std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringList__SWIG_0() {
  void * jresult ;
  std::list< std::string > *result = 0 ;
  
  result = (std::list< std::string > *)new std::list< std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< std::string > *arg1 = 0 ;
  std::list< std::string > *result = 0 ;
  
  arg1 = (std::list< std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::list< std::string > *)new std::list< std::string >((std::list< std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  int arg2 ;
  std::string result;
  
  arg1 = (std::list< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_list_Sl_std_string_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  
  /* %typemap(out) std::string  C# --> C++ */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16( (&result)->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result );
  free( temp_result );
  /* %typemap(out) std::string  C# --> C++ */
  
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  int arg2 ;
  std::string *result = 0 ;
  
  arg1 = (std::list< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::string *) &std_list_Sl_std_string_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_setitem(void * jarg1, int jarg2, wchar_t * jarg3) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::list< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  try {
    std_list_Sl_std_string_Sg__setitem(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_AddRange(void * jarg1, void * jarg2) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::list< std::string > *arg2 = 0 ;
  
  arg1 = (std::list< std::string > *)jarg1; 
  arg2 = (std::list< std::string > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< std::string > const & type is null", 0);
    return ;
  } 
  std_list_Sl_std_string_Sg__AddRange(arg1,(std::list< std::string > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_Insert(void * jarg1, int jarg2, wchar_t * jarg3) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  int arg2 ;
  std::string *arg3 = 0 ;
  
  arg1 = (std::list< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  try {
    std_list_Sl_std_string_Sg__Insert(arg1,arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_RemoveAt(void * jarg1, int jarg2) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  int arg2 ;
  
  arg1 = (std::list< std::string > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_list_Sl_std_string_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringList_Reverse(void * jarg1) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  arg1 = (std::list< std::string > *)jarg1; 
  std_list_Sl_std_string_Sg__Reverse(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringList_Contains(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::list< std::string > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)std_list_Sl_std_string_Sg__Contains(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_StringList_IndexOf(void * jarg1, wchar_t * jarg2) {
  int jresult ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  int result;
  
  arg1 = (std::list< std::string > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (int)std_list_Sl_std_string_Sg__IndexOf(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringList_Remove(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  arg1 = (std::list< std::string > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)std_list_Sl_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringList(void * jarg1) {
  std::list< std::string > *arg1 = (std::list< std::string > *) 0 ;
  
  arg1 = (std::list< std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntList_Clear(void * jarg1) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  arg1 = (std::list< int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntList_Add(void * jarg1, int jarg2) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  
  arg1 = (std::list< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((int const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_IntList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int >::size_type result;
  
  arg1 = (std::list< int > *)jarg1; 
  result = ((std::list< int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntList__SWIG_0() {
  void * jresult ;
  std::list< int > *result = 0 ;
  
  result = (std::list< int > *)new std::list< int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IntList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< int > *arg1 = 0 ;
  std::list< int > *result = 0 ;
  
  arg1 = (std::list< int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< int > const & type is null", 0);
    return 0;
  } 
  result = (std::list< int > *)new std::list< int >((std::list< int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntList_getitemcopy(void * jarg1, int jarg2) {
  int jresult ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int arg2 ;
  int result;
  
  arg1 = (std::list< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int)std_list_Sl_int_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntList_getitem(void * jarg1, int jarg2) {
  int jresult ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int arg2 ;
  int *result = 0 ;
  
  arg1 = (std::list< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (int *) &std_list_Sl_int_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntList_setitem(void * jarg1, int jarg2, int jarg3) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::list< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_list_Sl_int_Sg__setitem(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntList_AddRange(void * jarg1, void * jarg2) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  std::list< int > *arg2 = 0 ;
  
  arg1 = (std::list< int > *)jarg1; 
  arg2 = (std::list< int > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< int > const & type is null", 0);
    return ;
  } 
  std_list_Sl_int_Sg__AddRange(arg1,(std::list< int > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntList_Insert(void * jarg1, int jarg2, int jarg3) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int arg2 ;
  int *arg3 = 0 ;
  int temp3 ;
  
  arg1 = (std::list< int > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (int)jarg3; 
  arg3 = &temp3; 
  try {
    std_list_Sl_int_Sg__Insert(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntList_RemoveAt(void * jarg1, int jarg2) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::list< int > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_list_Sl_int_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_IntList_Reverse(void * jarg1) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  arg1 = (std::list< int > *)jarg1; 
  std_list_Sl_int_Sg__Reverse(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntList_Contains(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::list< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_list_Sl_int_Sg__Contains(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_IntList_IndexOf(void * jarg1, int jarg2) {
  int jresult ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  int result;
  
  arg1 = (std::list< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (int)std_list_Sl_int_Sg__IndexOf(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_IntList_Remove(void * jarg1, int jarg2) {
  unsigned int jresult ;
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  int *arg2 = 0 ;
  int temp2 ;
  bool result;
  
  arg1 = (std::list< int > *)jarg1; 
  temp2 = (int)jarg2; 
  arg2 = &temp2; 
  result = (bool)std_list_Sl_int_Sg__Remove(arg1,(int const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IntList(void * jarg1) {
  std::list< int > *arg1 = (std::list< int > *) 0 ;
  
  arg1 = (std::list< int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMap__SWIG_0() {
  void * jresult ;
  std::map< std::string,std::string > *result = 0 ;
  
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_StringMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,std::string > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_StringMap_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::size_type result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = ((std::map< std::string,std::string > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMap_Clear(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMap_getitem(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  try {
    result = (std::map< std::string,std::string >::mapped_type *) &std_map_Sl_std_string_Sc_std_string_Sg__getitem(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMap_setitem(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  std_map_Sl_std_string_Sc_std_string_Sg__setitem(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMap_ContainsKey(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMap_Add(void * jarg1, wchar_t * jarg2, wchar_t * jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  std::map< std::string,std::string >::mapped_type *arg3 = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg3 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg3_str(jarg3);
  arg3 = new std::string( utf162utf8( arg3_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  try {
    std_map_Sl_std_string_Sc_std_string_Sg__Add(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_StringMap_Remove(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  result = (std::map< std::string,std::string >::iterator *)std_map_Sl_std_string_Sc_std_string_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StringMap_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator *arg2 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string >::iterator *)jarg2; 
  result = (std::map< std::string,std::string >::key_type *) &std_map_Sl_std_string_Sc_std_string_Sg__get_next_key(arg1,arg2);
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_StringMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator *arg2 = (std::map< std::string,std::string >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  arg2 = (std::map< std::string,std::string >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_std_string_Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StringMap(void * jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  arg1 = (std::map< std::string,std::string > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Roster__SWIG_0() {
  void * jresult ;
  std::map< std::string,gloox::RosterItem * > *result = 0 ;
  
  result = (std::map< std::string,gloox::RosterItem * > *)new std::map< std::string,gloox::RosterItem * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Roster__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,gloox::RosterItem * > *arg1 = 0 ;
  std::map< std::string,gloox::RosterItem * > *result = 0 ;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,gloox::RosterItem * > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,gloox::RosterItem * > *)new std::map< std::string,gloox::RosterItem * >((std::map< std::string,gloox::RosterItem * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_Roster_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  std::map< std::string,gloox::RosterItem * >::size_type result;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  result = ((std::map< std::string,gloox::RosterItem * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Roster_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  result = (bool)((std::map< std::string,gloox::RosterItem * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roster_Clear(void * jarg1) {
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Roster_getitem(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  std::map< std::string,gloox::RosterItem * >::key_type *arg2 = 0 ;
  std::map< std::string,gloox::RosterItem * >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  try {
    result = (std::map< std::string,gloox::RosterItem * >::mapped_type *) &std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__getitem(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roster_setitem(void * jarg1, wchar_t * jarg2, void * jarg3) {
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  std::map< std::string,gloox::RosterItem * >::key_type *arg2 = 0 ;
  std::map< std::string,gloox::RosterItem * >::mapped_type *arg3 = 0 ;
  std::map< std::string,gloox::RosterItem * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  temp3 = (std::map< std::string,gloox::RosterItem * >::mapped_type)jarg3;
  arg3 = (std::map< std::string,gloox::RosterItem * >::mapped_type *)&temp3; 
  std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__setitem(arg1,(std::string const &)*arg2,(gloox::RosterItem *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Roster_ContainsKey(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  std::map< std::string,gloox::RosterItem * >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roster_Add(void * jarg1, wchar_t * jarg2, void * jarg3) {
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  std::map< std::string,gloox::RosterItem * >::key_type *arg2 = 0 ;
  std::map< std::string,gloox::RosterItem * >::mapped_type *arg3 = 0 ;
  std::map< std::string,gloox::RosterItem * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  temp3 = (std::map< std::string,gloox::RosterItem * >::mapped_type)jarg3;
  arg3 = (std::map< std::string,gloox::RosterItem * >::mapped_type *)&temp3; 
  try {
    std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__Add(arg1,(std::string const &)*arg2,(gloox::RosterItem *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Roster_Remove(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  std::map< std::string,gloox::RosterItem * >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Roster_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  std::map< std::string,gloox::RosterItem * >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  result = (std::map< std::string,gloox::RosterItem * >::iterator *)std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Roster_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  std::map< std::string,gloox::RosterItem * >::iterator *arg2 = (std::map< std::string,gloox::RosterItem * >::iterator *) 0 ;
  std::map< std::string,gloox::RosterItem * >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  arg2 = (std::map< std::string,gloox::RosterItem * >::iterator *)jarg2; 
  result = (std::map< std::string,gloox::RosterItem * >::key_type *) &std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__get_next_key(arg1,arg2);
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Roster_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  std::map< std::string,gloox::RosterItem * >::iterator *arg2 = (std::map< std::string,gloox::RosterItem * >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  arg2 = (std::map< std::string,gloox::RosterItem * >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_gloox_RosterItem_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Roster(void * jarg1) {
  std::map< std::string,gloox::RosterItem * > *arg1 = (std::map< std::string,gloox::RosterItem * > *) 0 ;
  
  arg1 = (std::map< std::string,gloox::RosterItem * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentityList_Clear(void * jarg1) {
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentityList_Add(void * jarg1, void * jarg2) {
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  kl::disco::Identity **arg2 = 0 ;
  kl::disco::Identity *temp2 = 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  temp2 = (kl::disco::Identity *)jarg2;
  arg2 = (kl::disco::Identity **)&temp2; 
  (arg1)->push_back((kl::disco::Identity *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DiscoIdentityList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  std::list< kl::disco::Identity * >::size_type result;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  result = ((std::list< kl::disco::Identity * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DiscoIdentityList__SWIG_0() {
  void * jresult ;
  std::list< kl::disco::Identity * > *result = 0 ;
  
  result = (std::list< kl::disco::Identity * > *)new std::list< kl::disco::Identity * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DiscoIdentityList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< kl::disco::Identity * > *arg1 = 0 ;
  std::list< kl::disco::Identity * > *result = 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::disco::Identity * > const & type is null", 0);
    return 0;
  } 
  result = (std::list< kl::disco::Identity * > *)new std::list< kl::disco::Identity * >((std::list< kl::disco::Identity * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DiscoIdentityList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  int arg2 ;
  kl::disco::Identity *result = 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::disco::Identity *)std_list_Sl_kl_disco_Identity_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DiscoIdentityList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  int arg2 ;
  kl::disco::Identity **result = 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::disco::Identity **) &std_list_Sl_kl_disco_Identity_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentityList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  int arg2 ;
  kl::disco::Identity **arg3 = 0 ;
  kl::disco::Identity *temp3 = 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::disco::Identity *)jarg3;
  arg3 = (kl::disco::Identity **)&temp3; 
  try {
    std_list_Sl_kl_disco_Identity_Sm__Sg__setitem(arg1,arg2,(kl::disco::Identity *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentityList_AddRange(void * jarg1, void * jarg2) {
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  std::list< kl::disco::Identity * > *arg2 = 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  arg2 = (std::list< kl::disco::Identity * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::disco::Identity * > const & type is null", 0);
    return ;
  } 
  std_list_Sl_kl_disco_Identity_Sm__Sg__AddRange(arg1,(std::list< kl::disco::Identity * > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentityList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  int arg2 ;
  kl::disco::Identity **arg3 = 0 ;
  kl::disco::Identity *temp3 = 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::disco::Identity *)jarg3;
  arg3 = (kl::disco::Identity **)&temp3; 
  try {
    std_list_Sl_kl_disco_Identity_Sm__Sg__Insert(arg1,arg2,(kl::disco::Identity *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentityList_RemoveAt(void * jarg1, int jarg2) {
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_list_Sl_kl_disco_Identity_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_DiscoIdentityList_Reverse(void * jarg1) {
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  std_list_Sl_kl_disco_Identity_Sm__Sg__Reverse(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DiscoIdentityList_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  kl::disco::Identity **arg2 = 0 ;
  kl::disco::Identity *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  temp2 = (kl::disco::Identity *)jarg2;
  arg2 = (kl::disco::Identity **)&temp2; 
  result = (bool)std_list_Sl_kl_disco_Identity_Sm__Sg__Contains(arg1,(kl::disco::Identity *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DiscoIdentityList_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  kl::disco::Identity **arg2 = 0 ;
  kl::disco::Identity *temp2 = 0 ;
  int result;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  temp2 = (kl::disco::Identity *)jarg2;
  arg2 = (kl::disco::Identity **)&temp2; 
  result = (int)std_list_Sl_kl_disco_Identity_Sm__Sg__IndexOf(arg1,(kl::disco::Identity *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DiscoIdentityList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  kl::disco::Identity **arg2 = 0 ;
  kl::disco::Identity *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  temp2 = (kl::disco::Identity *)jarg2;
  arg2 = (kl::disco::Identity **)&temp2; 
  result = (bool)std_list_Sl_kl_disco_Identity_Sm__Sg__Remove(arg1,(kl::disco::Identity *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DiscoIdentityList(void * jarg1) {
  std::list< kl::disco::Identity * > *arg1 = (std::list< kl::disco::Identity * > *) 0 ;
  
  arg1 = (std::list< kl::disco::Identity * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceMap__SWIG_0() {
  void * jresult ;
  std::map< std::string,kl::Service * > *result = 0 ;
  
  result = (std::map< std::string,kl::Service * > *)new std::map< std::string,kl::Service * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ServiceMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< std::string,kl::Service * > *arg1 = 0 ;
  std::map< std::string,kl::Service * > *result = 0 ;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< std::string,kl::Service * > const & type is null", 0);
    return 0;
  } 
  result = (std::map< std::string,kl::Service * > *)new std::map< std::string,kl::Service * >((std::map< std::string,kl::Service * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ServiceMap_size(void * jarg1) {
  unsigned long jresult ;
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  std::map< std::string,kl::Service * >::size_type result;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  result = ((std::map< std::string,kl::Service * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ServiceMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  bool result;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  result = (bool)((std::map< std::string,kl::Service * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceMap_Clear(void * jarg1) {
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServiceMap_getitem(void * jarg1, wchar_t * jarg2) {
  void * jresult ;
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  std::map< std::string,kl::Service * >::key_type *arg2 = 0 ;
  std::map< std::string,kl::Service * >::mapped_type *result = 0 ;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  try {
    result = (std::map< std::string,kl::Service * >::mapped_type *) &std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__getitem(arg1,(std::string const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceMap_setitem(void * jarg1, wchar_t * jarg2, void * jarg3) {
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  std::map< std::string,kl::Service * >::key_type *arg2 = 0 ;
  std::map< std::string,kl::Service * >::mapped_type *arg3 = 0 ;
  std::map< std::string,kl::Service * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  temp3 = (std::map< std::string,kl::Service * >::mapped_type)jarg3;
  arg3 = (std::map< std::string,kl::Service * >::mapped_type *)&temp3; 
  std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__setitem(arg1,(std::string const &)*arg2,(kl::Service *const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ServiceMap_ContainsKey(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  std::map< std::string,kl::Service * >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__ContainsKey(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceMap_Add(void * jarg1, wchar_t * jarg2, void * jarg3) {
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  std::map< std::string,kl::Service * >::key_type *arg2 = 0 ;
  std::map< std::string,kl::Service * >::mapped_type *arg3 = 0 ;
  std::map< std::string,kl::Service * >::mapped_type temp3 = 0 ;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return ;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  temp3 = (std::map< std::string,kl::Service * >::mapped_type)jarg3;
  arg3 = (std::map< std::string,kl::Service * >::mapped_type *)&temp3; 
  try {
    std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__Add(arg1,(std::string const &)*arg2,(kl::Service *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ServiceMap_Remove(void * jarg1, wchar_t * jarg2) {
  unsigned int jresult ;
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  std::map< std::string,kl::Service * >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */ 
  if ( !jarg2 ) 
  {
    SWIG_CSharpSetPendingExceptionArgument( SWIG_CSharpArgumentNullException, "null string", 0 );
    return 0;
  }
  std::wstring arg2_str(jarg2);
  arg2 = new std::string( utf162utf8( arg2_str.c_str() ) );
  /* %typemap(in, canthrow=1) const std::string &  C# --> C++ */
  
  result = (bool)std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__Remove(arg1,(std::string const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServiceMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  std::map< std::string,kl::Service * >::iterator *result = 0 ;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  result = (std::map< std::string,kl::Service * >::iterator *)std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ServiceMap_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  std::map< std::string,kl::Service * >::iterator *arg2 = (std::map< std::string,kl::Service * >::iterator *) 0 ;
  std::map< std::string,kl::Service * >::key_type *result = 0 ;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  arg2 = (std::map< std::string,kl::Service * >::iterator *)jarg2; 
  result = (std::map< std::string,kl::Service * >::key_type *) &std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__get_next_key(arg1,arg2);
  
  /* %typemap(out) const std::string &   C++ --> C# */
  wchar_t* temp_result = 0;
  temp_result = utf82utf16 ( result->c_str() );
  jresult = SWIG_csharp_wstring_callback( temp_result ); 
  free( temp_result );
  /* %typemap(out) const std::string &   C++ --> C# */
  
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ServiceMap_destroy_iterator(void * jarg1, void * jarg2) {
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  std::map< std::string,kl::Service * >::iterator *arg2 = (std::map< std::string,kl::Service * >::iterator *) 0 ;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  arg2 = (std::map< std::string,kl::Service * >::iterator *)jarg2; 
  std_map_Sl_std_string_Sc_kl_Service_Sm__Sg__destroy_iterator(arg1,arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ServiceMap(void * jarg1) {
  std::map< std::string,kl::Service * > *arg1 = (std::map< std::string,kl::Service * > *) 0 ;
  
  arg1 = (std::map< std::string,kl::Service * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardEmailList_Clear(void * jarg1) {
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardEmailList_Add(void * jarg1, void * jarg2) {
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  kl::VCardEmail **arg2 = 0 ;
  kl::VCardEmail *temp2 = 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  temp2 = (kl::VCardEmail *)jarg2;
  arg2 = (kl::VCardEmail **)&temp2; 
  (arg1)->push_back((kl::VCardEmail *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VCardEmailList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  std::list< kl::VCardEmail * >::size_type result;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  result = ((std::list< kl::VCardEmail * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardEmailList__SWIG_0() {
  void * jresult ;
  std::list< kl::VCardEmail * > *result = 0 ;
  
  result = (std::list< kl::VCardEmail * > *)new std::list< kl::VCardEmail * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardEmailList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< kl::VCardEmail * > *arg1 = 0 ;
  std::list< kl::VCardEmail * > *result = 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::VCardEmail * > const & type is null", 0);
    return 0;
  } 
  result = (std::list< kl::VCardEmail * > *)new std::list< kl::VCardEmail * >((std::list< kl::VCardEmail * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardEmailList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  int arg2 ;
  kl::VCardEmail *result = 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::VCardEmail *)std_list_Sl_kl_VCardEmail_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardEmailList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  int arg2 ;
  kl::VCardEmail **result = 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::VCardEmail **) &std_list_Sl_kl_VCardEmail_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardEmailList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  int arg2 ;
  kl::VCardEmail **arg3 = 0 ;
  kl::VCardEmail *temp3 = 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::VCardEmail *)jarg3;
  arg3 = (kl::VCardEmail **)&temp3; 
  try {
    std_list_Sl_kl_VCardEmail_Sm__Sg__setitem(arg1,arg2,(kl::VCardEmail *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardEmailList_AddRange(void * jarg1, void * jarg2) {
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  std::list< kl::VCardEmail * > *arg2 = 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  arg2 = (std::list< kl::VCardEmail * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::VCardEmail * > const & type is null", 0);
    return ;
  } 
  std_list_Sl_kl_VCardEmail_Sm__Sg__AddRange(arg1,(std::list< kl::VCardEmail * > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardEmailList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  int arg2 ;
  kl::VCardEmail **arg3 = 0 ;
  kl::VCardEmail *temp3 = 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::VCardEmail *)jarg3;
  arg3 = (kl::VCardEmail **)&temp3; 
  try {
    std_list_Sl_kl_VCardEmail_Sm__Sg__Insert(arg1,arg2,(kl::VCardEmail *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardEmailList_RemoveAt(void * jarg1, int jarg2) {
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_list_Sl_kl_VCardEmail_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardEmailList_Reverse(void * jarg1) {
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  std_list_Sl_kl_VCardEmail_Sm__Sg__Reverse(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardEmailList_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  kl::VCardEmail **arg2 = 0 ;
  kl::VCardEmail *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  temp2 = (kl::VCardEmail *)jarg2;
  arg2 = (kl::VCardEmail **)&temp2; 
  result = (bool)std_list_Sl_kl_VCardEmail_Sm__Sg__Contains(arg1,(kl::VCardEmail *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VCardEmailList_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  kl::VCardEmail **arg2 = 0 ;
  kl::VCardEmail *temp2 = 0 ;
  int result;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  temp2 = (kl::VCardEmail *)jarg2;
  arg2 = (kl::VCardEmail **)&temp2; 
  result = (int)std_list_Sl_kl_VCardEmail_Sm__Sg__IndexOf(arg1,(kl::VCardEmail *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardEmailList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  kl::VCardEmail **arg2 = 0 ;
  kl::VCardEmail *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  temp2 = (kl::VCardEmail *)jarg2;
  arg2 = (kl::VCardEmail **)&temp2; 
  result = (bool)std_list_Sl_kl_VCardEmail_Sm__Sg__Remove(arg1,(kl::VCardEmail *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardEmailList(void * jarg1) {
  std::list< kl::VCardEmail * > *arg1 = (std::list< kl::VCardEmail * > *) 0 ;
  
  arg1 = (std::list< kl::VCardEmail * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddressList_Clear(void * jarg1) {
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddressList_Add(void * jarg1, void * jarg2) {
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  kl::VCardAddress **arg2 = 0 ;
  kl::VCardAddress *temp2 = 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  temp2 = (kl::VCardAddress *)jarg2;
  arg2 = (kl::VCardAddress **)&temp2; 
  (arg1)->push_back((kl::VCardAddress *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VCardAddressList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  std::list< kl::VCardAddress * >::size_type result;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  result = ((std::list< kl::VCardAddress * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardAddressList__SWIG_0() {
  void * jresult ;
  std::list< kl::VCardAddress * > *result = 0 ;
  
  result = (std::list< kl::VCardAddress * > *)new std::list< kl::VCardAddress * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardAddressList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< kl::VCardAddress * > *arg1 = 0 ;
  std::list< kl::VCardAddress * > *result = 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::VCardAddress * > const & type is null", 0);
    return 0;
  } 
  result = (std::list< kl::VCardAddress * > *)new std::list< kl::VCardAddress * >((std::list< kl::VCardAddress * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardAddressList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  int arg2 ;
  kl::VCardAddress *result = 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::VCardAddress *)std_list_Sl_kl_VCardAddress_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardAddressList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  int arg2 ;
  kl::VCardAddress **result = 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::VCardAddress **) &std_list_Sl_kl_VCardAddress_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddressList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  int arg2 ;
  kl::VCardAddress **arg3 = 0 ;
  kl::VCardAddress *temp3 = 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::VCardAddress *)jarg3;
  arg3 = (kl::VCardAddress **)&temp3; 
  try {
    std_list_Sl_kl_VCardAddress_Sm__Sg__setitem(arg1,arg2,(kl::VCardAddress *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddressList_AddRange(void * jarg1, void * jarg2) {
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  std::list< kl::VCardAddress * > *arg2 = 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  arg2 = (std::list< kl::VCardAddress * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::VCardAddress * > const & type is null", 0);
    return ;
  } 
  std_list_Sl_kl_VCardAddress_Sm__Sg__AddRange(arg1,(std::list< kl::VCardAddress * > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddressList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  int arg2 ;
  kl::VCardAddress **arg3 = 0 ;
  kl::VCardAddress *temp3 = 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::VCardAddress *)jarg3;
  arg3 = (kl::VCardAddress **)&temp3; 
  try {
    std_list_Sl_kl_VCardAddress_Sm__Sg__Insert(arg1,arg2,(kl::VCardAddress *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddressList_RemoveAt(void * jarg1, int jarg2) {
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_list_Sl_kl_VCardAddress_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardAddressList_Reverse(void * jarg1) {
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  std_list_Sl_kl_VCardAddress_Sm__Sg__Reverse(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardAddressList_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  kl::VCardAddress **arg2 = 0 ;
  kl::VCardAddress *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  temp2 = (kl::VCardAddress *)jarg2;
  arg2 = (kl::VCardAddress **)&temp2; 
  result = (bool)std_list_Sl_kl_VCardAddress_Sm__Sg__Contains(arg1,(kl::VCardAddress *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VCardAddressList_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  kl::VCardAddress **arg2 = 0 ;
  kl::VCardAddress *temp2 = 0 ;
  int result;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  temp2 = (kl::VCardAddress *)jarg2;
  arg2 = (kl::VCardAddress **)&temp2; 
  result = (int)std_list_Sl_kl_VCardAddress_Sm__Sg__IndexOf(arg1,(kl::VCardAddress *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardAddressList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  kl::VCardAddress **arg2 = 0 ;
  kl::VCardAddress *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  temp2 = (kl::VCardAddress *)jarg2;
  arg2 = (kl::VCardAddress **)&temp2; 
  result = (bool)std_list_Sl_kl_VCardAddress_Sm__Sg__Remove(arg1,(kl::VCardAddress *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardAddressList(void * jarg1) {
  std::list< kl::VCardAddress * > *arg1 = (std::list< kl::VCardAddress * > *) 0 ;
  
  arg1 = (std::list< kl::VCardAddress * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardLabelList_Clear(void * jarg1) {
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardLabelList_Add(void * jarg1, void * jarg2) {
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  kl::VCardLabel **arg2 = 0 ;
  kl::VCardLabel *temp2 = 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  temp2 = (kl::VCardLabel *)jarg2;
  arg2 = (kl::VCardLabel **)&temp2; 
  (arg1)->push_back((kl::VCardLabel *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VCardLabelList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  std::list< kl::VCardLabel * >::size_type result;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  result = ((std::list< kl::VCardLabel * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardLabelList__SWIG_0() {
  void * jresult ;
  std::list< kl::VCardLabel * > *result = 0 ;
  
  result = (std::list< kl::VCardLabel * > *)new std::list< kl::VCardLabel * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardLabelList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< kl::VCardLabel * > *arg1 = 0 ;
  std::list< kl::VCardLabel * > *result = 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::VCardLabel * > const & type is null", 0);
    return 0;
  } 
  result = (std::list< kl::VCardLabel * > *)new std::list< kl::VCardLabel * >((std::list< kl::VCardLabel * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardLabelList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  int arg2 ;
  kl::VCardLabel *result = 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::VCardLabel *)std_list_Sl_kl_VCardLabel_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardLabelList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  int arg2 ;
  kl::VCardLabel **result = 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::VCardLabel **) &std_list_Sl_kl_VCardLabel_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardLabelList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  int arg2 ;
  kl::VCardLabel **arg3 = 0 ;
  kl::VCardLabel *temp3 = 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::VCardLabel *)jarg3;
  arg3 = (kl::VCardLabel **)&temp3; 
  try {
    std_list_Sl_kl_VCardLabel_Sm__Sg__setitem(arg1,arg2,(kl::VCardLabel *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardLabelList_AddRange(void * jarg1, void * jarg2) {
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  std::list< kl::VCardLabel * > *arg2 = 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  arg2 = (std::list< kl::VCardLabel * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::VCardLabel * > const & type is null", 0);
    return ;
  } 
  std_list_Sl_kl_VCardLabel_Sm__Sg__AddRange(arg1,(std::list< kl::VCardLabel * > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardLabelList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  int arg2 ;
  kl::VCardLabel **arg3 = 0 ;
  kl::VCardLabel *temp3 = 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::VCardLabel *)jarg3;
  arg3 = (kl::VCardLabel **)&temp3; 
  try {
    std_list_Sl_kl_VCardLabel_Sm__Sg__Insert(arg1,arg2,(kl::VCardLabel *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardLabelList_RemoveAt(void * jarg1, int jarg2) {
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_list_Sl_kl_VCardLabel_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardLabelList_Reverse(void * jarg1) {
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  std_list_Sl_kl_VCardLabel_Sm__Sg__Reverse(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardLabelList_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  kl::VCardLabel **arg2 = 0 ;
  kl::VCardLabel *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  temp2 = (kl::VCardLabel *)jarg2;
  arg2 = (kl::VCardLabel **)&temp2; 
  result = (bool)std_list_Sl_kl_VCardLabel_Sm__Sg__Contains(arg1,(kl::VCardLabel *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VCardLabelList_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  kl::VCardLabel **arg2 = 0 ;
  kl::VCardLabel *temp2 = 0 ;
  int result;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  temp2 = (kl::VCardLabel *)jarg2;
  arg2 = (kl::VCardLabel **)&temp2; 
  result = (int)std_list_Sl_kl_VCardLabel_Sm__Sg__IndexOf(arg1,(kl::VCardLabel *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardLabelList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  kl::VCardLabel **arg2 = 0 ;
  kl::VCardLabel *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  temp2 = (kl::VCardLabel *)jarg2;
  arg2 = (kl::VCardLabel **)&temp2; 
  result = (bool)std_list_Sl_kl_VCardLabel_Sm__Sg__Remove(arg1,(kl::VCardLabel *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardLabelList(void * jarg1) {
  std::list< kl::VCardLabel * > *arg1 = (std::list< kl::VCardLabel * > *) 0 ;
  
  arg1 = (std::list< kl::VCardLabel * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardTelephponeList_Clear(void * jarg1) {
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardTelephponeList_Add(void * jarg1, void * jarg2) {
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  kl::VCardTelephone **arg2 = 0 ;
  kl::VCardTelephone *temp2 = 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  temp2 = (kl::VCardTelephone *)jarg2;
  arg2 = (kl::VCardTelephone **)&temp2; 
  (arg1)->push_back((kl::VCardTelephone *const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_VCardTelephponeList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  std::list< kl::VCardTelephone * >::size_type result;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  result = ((std::list< kl::VCardTelephone * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardTelephponeList__SWIG_0() {
  void * jresult ;
  std::list< kl::VCardTelephone * > *result = 0 ;
  
  result = (std::list< kl::VCardTelephone * > *)new std::list< kl::VCardTelephone * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_VCardTelephponeList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< kl::VCardTelephone * > *arg1 = 0 ;
  std::list< kl::VCardTelephone * > *result = 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::VCardTelephone * > const & type is null", 0);
    return 0;
  } 
  result = (std::list< kl::VCardTelephone * > *)new std::list< kl::VCardTelephone * >((std::list< kl::VCardTelephone * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardTelephponeList_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  int arg2 ;
  kl::VCardTelephone *result = 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::VCardTelephone *)std_list_Sl_kl_VCardTelephone_Sm__Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VCardTelephponeList_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  int arg2 ;
  kl::VCardTelephone **result = 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (kl::VCardTelephone **) &std_list_Sl_kl_VCardTelephone_Sm__Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardTelephponeList_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  int arg2 ;
  kl::VCardTelephone **arg3 = 0 ;
  kl::VCardTelephone *temp3 = 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::VCardTelephone *)jarg3;
  arg3 = (kl::VCardTelephone **)&temp3; 
  try {
    std_list_Sl_kl_VCardTelephone_Sm__Sg__setitem(arg1,arg2,(kl::VCardTelephone *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardTelephponeList_AddRange(void * jarg1, void * jarg2) {
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  std::list< kl::VCardTelephone * > *arg2 = 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  arg2 = (std::list< kl::VCardTelephone * > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< kl::VCardTelephone * > const & type is null", 0);
    return ;
  } 
  std_list_Sl_kl_VCardTelephone_Sm__Sg__AddRange(arg1,(std::list< kl::VCardTelephone * > const &)*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardTelephponeList_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  int arg2 ;
  kl::VCardTelephone **arg3 = 0 ;
  kl::VCardTelephone *temp3 = 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (kl::VCardTelephone *)jarg3;
  arg3 = (kl::VCardTelephone **)&temp3; 
  try {
    std_list_Sl_kl_VCardTelephone_Sm__Sg__Insert(arg1,arg2,(kl::VCardTelephone *const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardTelephponeList_RemoveAt(void * jarg1, int jarg2) {
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  int arg2 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_list_Sl_kl_VCardTelephone_Sm__Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_VCardTelephponeList_Reverse(void * jarg1) {
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  std_list_Sl_kl_VCardTelephone_Sm__Sg__Reverse(arg1);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephponeList_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  kl::VCardTelephone **arg2 = 0 ;
  kl::VCardTelephone *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  temp2 = (kl::VCardTelephone *)jarg2;
  arg2 = (kl::VCardTelephone **)&temp2; 
  result = (bool)std_list_Sl_kl_VCardTelephone_Sm__Sg__Contains(arg1,(kl::VCardTelephone *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_VCardTelephponeList_IndexOf(void * jarg1, void * jarg2) {
  int jresult ;
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  kl::VCardTelephone **arg2 = 0 ;
  kl::VCardTelephone *temp2 = 0 ;
  int result;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  temp2 = (kl::VCardTelephone *)jarg2;
  arg2 = (kl::VCardTelephone **)&temp2; 
  result = (int)std_list_Sl_kl_VCardTelephone_Sm__Sg__IndexOf(arg1,(kl::VCardTelephone *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_VCardTelephponeList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  kl::VCardTelephone **arg2 = 0 ;
  kl::VCardTelephone *temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  temp2 = (kl::VCardTelephone *)jarg2;
  arg2 = (kl::VCardTelephone **)&temp2; 
  result = (bool)std_list_Sl_kl_VCardTelephone_Sm__Sg__Remove(arg1,(kl::VCardTelephone *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_VCardTelephponeList(void * jarg1) {
  std::list< kl::VCardTelephone * > *arg1 = (std::list< kl::VCardTelephone * > *) 0 ;
  
  arg1 = (std::list< kl::VCardTelephone * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT gloox::Stanza * SWIGSTDCALL CSharp_Message_SWIGUpcast(gloox::Message *jarg1) {
    return (gloox::Stanza *)jarg1;
}

SWIGEXPORT gloox::Stanza * SWIGSTDCALL CSharp_Presence_SWIGUpcast(gloox::Presence *jarg1) {
    return (gloox::Stanza *)jarg1;
}

#ifdef __cplusplus
}
#endif


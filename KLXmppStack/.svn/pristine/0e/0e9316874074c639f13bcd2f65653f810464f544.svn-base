<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.5"/>
<title>KLXmpp API: C:/Users/jyx/Desktop/svn3/KLXmppStack/KLXmpp/include/kl_xmppstack.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">KLXmpp API
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.5 -->
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.html"><span>Namespaces</span></a></li>
      <li><a href="annotated.html"><span>Classes</span></a></li>
      <li class="current"><a href="files.html"><span>Files</span></a></li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>File&#160;List</span></a></li>
      <li><a href="globals.html"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_d44c64559bbebec7f509842c48db8b23.html">include</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">kl_xmppstack.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="kl__xmppstack_8h.html">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="preprocessor">#ifndef KL_XMPPSTACK_H__</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define KL_XMPPSTACK_H__</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="preprocessor">#include &quot;../../KLXmpp/include/kl_common.h&quot;</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/loghandler.h&quot;</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/connectionlistener.h&quot;</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/registrationhandler.h&quot;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/rosterlistener.h&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/presencehandler.h&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/messagehandler.h&quot;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/discohandler.h&quot;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/mucroomhandler.h&quot;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/mucroomconfighandler.h&quot;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/mucinvitationhandler.h&quot;</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/pubsubresulthandler.h&quot;</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/siprofilefthandler.h&quot;</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/bytestreamdatahandler.h&quot;</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor">#include &quot;../../gloox/src/siprofileft.h&quot;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;</div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="keyword">namespace </span>gloox</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    <span class="keyword">class </span>Client;</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;    <span class="keyword">class </span>Registration;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;    <span class="keyword">class </span>SOCKS5BytestreamServer;</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;}</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="keyword">namespace </span>kl</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;{</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <span class="keyword">class </span>XmppEntity;</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;    <span class="keyword">class </span>DiscoInfo;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;    <span class="keyword">class </span>XmppCallback;</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;    <span class="keyword">class </span>PubSubManager;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keyword">class </span>Microblog;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keyword">class </span>AvatarMetadata;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keyword">struct </span>MUCRoomConfig;</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <span class="keyword">struct </span>FileMetadata;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keyword">class </span>XhtmlMessage;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;    <span class="keyword">struct </span>Entity;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="namespacekl.html#a09f8fa82fe99ceab1f5647af58472c19">   42</a></span>&#160;    <span class="keyword">struct </span><a class="code" href="structkl_1_1_i_mail_s_m_t_p_info.html">IMailSMTPInfo</a>;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    <span class="keyword">typedef</span> std::list&lt;kl::XmppCallback*&gt; <a class="code" href="namespacekl.html#a09f8fa82fe99ceab1f5647af58472c19">XmppCallbackList</a>;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html">  138</a></span>&#160;    <span class="keyword">class </span><a class="code" href="kl__common_8h.html#a024386094f519c6b791d23e758a83d11">KLXMPP_API</a> <a class="code" href="classkl_1_1_xmpp_stack.html">XmppStack</a> : <span class="keyword">public</span> gloox::LogHandler,</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;                                 <span class="keyword">public</span> gloox::ConnectionListener,</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;                                 <span class="keyword">public</span> gloox::RosterListener,</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                                 <span class="keyword">public</span> gloox::PresenceHandler,</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;                                 <span class="keyword">public</span> gloox::MessageHandler,</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;                                 <span class="keyword">public</span> gloox::RegistrationHandler,</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;                                 <span class="keyword">public</span> gloox::DiscoHandler,</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;                                 <span class="keyword">public</span> gloox::MUCRoomHandler,</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;                                 <span class="keyword">public</span> gloox::MUCRoomConfigHandler,</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;                                 <span class="keyword">public</span> gloox::MUCInvitationHandler,</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;                                 <span class="keyword">public</span> gloox::PubSub::ResultHandler,</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;                                 <span class="keyword">public</span> gloox::SIProfileFTHandler,</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;                                 <span class="keyword">public</span> gloox::BytestreamDataHandler</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    <span class="keyword">public</span>:</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;        <a class="code" href="classkl_1_1_xmpp_stack.html">XmppStack</a>( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> std::string&amp; password_, <span class="keyword">const</span> std::string&amp; host_ = <span class="stringliteral">&quot;&quot;</span>, <span class="keywordtype">int</span> port_ = 5222 );</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;        </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;        <span class="keyword">virtual</span> ~<a class="code" href="classkl_1_1_xmpp_stack.html">XmppStack</a>();</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="preprocessor">#ifndef SWIG // SWIG过滤以下接口</span></div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="preprocessor"></span>                    </div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;        <span class="comment">/* override gloox::LogHandler */</span></div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;        <span class="keywordtype">void</span> handleLog( gloox::LogLevel level_, gloox::LogArea area_, <span class="keyword">const</span> std::string&amp; message_ );</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;        </div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;        <span class="comment">/* override gloox::ConnectionListener */</span></div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;        <span class="keywordtype">void</span> onConnect();</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        <span class="keywordtype">void</span> onDisconnect( gloox::ConnectionError e_ );</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;        <span class="keywordtype">void</span> onResourceBind( <span class="keyword">const</span> std::string&amp; resource_ );</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;        <span class="keywordtype">void</span> onResourceBindError( <span class="keyword">const</span> gloox::Error* error_ );</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;        <span class="keywordtype">void</span> onSessionCreateError( <span class="keyword">const</span> gloox::Error* error_ );</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;        </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;        <span class="keywordtype">bool</span> onTLSConnect( <span class="keyword">const</span> gloox::CertInfo&amp; info_ );</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;        <span class="keywordtype">void</span> onStreamEvent( gloox::StreamEvent event_ );</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;        <span class="comment">/* override gloox::RosterListener */</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;        <span class="keywordtype">void</span> handleItemAdded( <span class="keyword">const</span> gloox::JID&amp; jid_ );</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;        </div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;        <span class="keywordtype">void</span> handleItemSubscribed( <span class="keyword">const</span> gloox::JID&amp; jid_ );</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;        </div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;        <span class="keywordtype">void</span> handleItemRemoved( <span class="keyword">const</span> gloox::JID&amp; jid_ );</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;        </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;        <span class="keywordtype">void</span> handleItemUpdated( <span class="keyword">const</span> gloox::JID&amp; jid_ );</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;        </div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;        <span class="keywordtype">void</span> handleItemUnsubscribed( <span class="keyword">const</span> gloox::JID&amp; jid_ );</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;        </div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;        <span class="keywordtype">void</span> handleRoster( <span class="keyword">const</span> gloox::Roster&amp; roster_ );</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;        </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;        <span class="keywordtype">void</span> handleRosterPresence( <span class="keyword">const</span> gloox::RosterItem&amp; item_, </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;                                   <span class="keyword">const</span> std::string&amp; resource_, </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;                                   gloox::Presence::PresenceType presence_, </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;                                   <span class="keyword">const</span> std::string&amp; msg_ );</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;        </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;        <span class="keywordtype">void</span> handleSelfPresence( <span class="keyword">const</span> gloox::RosterItem&amp; item_, </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;                                 <span class="keyword">const</span> std::string&amp; resource_, </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;                                 gloox::Presence::PresenceType presence_, </div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;                                 <span class="keyword">const</span> std::string&amp; msg_ );</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;        </div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;        <span class="keywordtype">bool</span> handleSubscriptionRequest( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> std::string&amp; msg_ );</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;        </div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;        <span class="keywordtype">bool</span> handleUnsubscriptionRequest( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> std::string&amp; msg_ );</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordtype">void</span> handleNonrosterPresence( <span class="keyword">const</span> gloox::Presence&amp; presence_ );</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        </div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;        <span class="keywordtype">void</span> handleRosterError( <span class="keyword">const</span> gloox::IQ&amp; iq_ );</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;        </div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;        <span class="comment">/* override gloox::PresenceHandler */</span></div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordtype">void</span> handlePresence( <span class="keyword">const</span> gloox::Presence&amp; presence_ );</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;        <span class="comment">/* override gloox::MessageHandler */</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;        <span class="keywordtype">void</span> handleMessage( <span class="keyword">const</span> gloox::Message&amp; msg_, gloox::MessageSession* session_ );</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;        <span class="comment">/* override gloox::RegistrationHandler */</span></div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;        <span class="keywordtype">void</span> handleRegistrationFields( <span class="keyword">const</span> gloox::JID&amp; from_, <span class="keywordtype">int</span> fields_, std::string instructions_ );</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <span class="keywordtype">void</span> handleAlreadyRegistered( <span class="keyword">const</span> gloox::JID&amp; from_ );</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordtype">void</span> handleRegistrationResult( <span class="keyword">const</span> gloox::JID&amp; from_, gloox::RegistrationResult regResult_ );</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;        <span class="keywordtype">void</span> handleDataForm( <span class="keyword">const</span> gloox::JID&amp; from_, <span class="keyword">const</span> gloox::DataForm&amp; form_ );</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;        <span class="keywordtype">void</span> handleOOB( <span class="keyword">const</span> gloox::JID&amp; from_, <span class="keyword">const</span> gloox::OOB&amp; oob_ );</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;        </div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;        <span class="comment">/* override gloox::DiscoHandler */</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;        <span class="keywordtype">void</span> handleDiscoInfo( <span class="keyword">const</span> gloox::JID&amp; from_, <span class="keyword">const</span> gloox::Disco::Info&amp; info_, <span class="keywordtype">int</span> context_ );</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;        </div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;        <span class="keywordtype">void</span> handleDiscoItems( <span class="keyword">const</span> gloox::JID&amp; from_, <span class="keyword">const</span> gloox::Disco::Items&amp; items_, <span class="keywordtype">int</span> context_ );</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;        </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;        <span class="keywordtype">void</span> handleDiscoError( <span class="keyword">const</span> gloox::JID&amp; from, <span class="keyword">const</span> gloox::Error* error_, <span class="keywordtype">int</span> context_ );</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;        </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;        <span class="comment">/* override gloox::MUCRoomHandler */</span></div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <span class="keywordtype">void</span> handleMUCParticipantPresence( gloox::MUCRoom* room_, <span class="keyword">const</span> gloox::MUCRoomParticipant participant_, <span class="keyword">const</span> gloox::Presence&amp; presence_ );</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;        </div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordtype">void</span> handleMUCMessage( gloox::MUCRoom* room_, <span class="keyword">const</span> gloox::Message&amp; msg_, <span class="keywordtype">bool</span> priv_ );</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;        </div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        <span class="keywordtype">bool</span> handleMUCRoomCreation( gloox::MUCRoom* room_ );</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;        </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordtype">void</span> handleMUCSubject( gloox::MUCRoom* room_, <span class="keyword">const</span> std::string&amp; nick_, <span class="keyword">const</span> std::string&amp; subject_ );</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;        </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        <span class="keywordtype">void</span> handleMUCInviteDecline( gloox::MUCRoom* room_, <span class="keyword">const</span> gloox::JID&amp; invitee_, <span class="keyword">const</span> std::string&amp; reason_ );</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;        </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;        <span class="keywordtype">void</span> handleMUCError( gloox::MUCRoom* room_, gloox::StanzaError error_ );</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;        <span class="keywordtype">void</span> handleMUCInfo( gloox::MUCRoom* room_, <span class="keywordtype">int</span> features_, <span class="keyword">const</span> std::string&amp; name_, <span class="keyword">const</span> gloox::DataForm* infoForm_ );</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;        </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;        <span class="keywordtype">void</span> handleMUCItems( gloox::MUCRoom* room_, <span class="keyword">const</span> gloox::Disco::ItemList&amp; items_ );</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;        <span class="comment">/* override gloox::MUCRoomConfigHandler */</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;        <span class="keywordtype">void</span> handleMUCConfigList( gloox::MUCRoom* room_, <span class="keyword">const</span> gloox::MUCListItemList&amp; items_, gloox::MUCOperation operation_ );</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;        <span class="keywordtype">void</span> handleMUCConfigForm( gloox::MUCRoom* room_, <span class="keyword">const</span> gloox::DataForm&amp; form_ );</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;        <span class="keywordtype">void</span> handleMUCConfigResult( gloox::MUCRoom* room_, <span class="keywordtype">bool</span> success_, gloox::MUCOperation operation_ );</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="keywordtype">void</span> handleMUCRequest( gloox::MUCRoom* room_, <span class="keyword">const</span> gloox::DataForm&amp; form_ );</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        <span class="comment">/* overrride gloox::MUCInvitationHandler */</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;        <span class="keywordtype">void</span> handleMUCInvitation( <span class="keyword">const</span> gloox::JID&amp; room_, </div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;                                  <span class="keyword">const</span> gloox::JID&amp; from_, </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;                                  <span class="keyword">const</span> std::string&amp; reason_, </div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;                                  <span class="keyword">const</span> std::string&amp; body_, </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;                                  <span class="keyword">const</span> std::string&amp; password_,</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;                                  <span class="keywordtype">bool</span> cont_, </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;                                  <span class="keyword">const</span> std::string&amp; thread_ );</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        <span class="comment">/* overrride  gloox::PubSub::ResultHandler */</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        <span class="keywordtype">void</span> handleItem( <span class="keyword">const</span> gloox::JID&amp; service_, <span class="keyword">const</span> std::string&amp; node_, <span class="keyword">const</span> gloox::Tag* entry_ );</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        <span class="keywordtype">void</span> handleItems( <span class="keyword">const</span> std::string&amp; id_, </div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;                          <span class="keyword">const</span> gloox::JID&amp; service_, </div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;                          <span class="keyword">const</span> std::string&amp; node_, </div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;                          <span class="keyword">const</span> gloox::PubSub::ItemList&amp; itemList_, </div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;                          <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;        </div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;        <span class="keywordtype">void</span> handleItemPublication( <span class="keyword">const</span> std::string&amp; id_, </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;                                    <span class="keyword">const</span> gloox::JID&amp; service_, </div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;                                    <span class="keyword">const</span> std::string&amp; node_, </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;                                    <span class="keyword">const</span> gloox::PubSub::ItemList&amp; itemList_,</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;                                    <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;        </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;        <span class="keywordtype">void</span> handleItemDeletion( <span class="keyword">const</span> std::string&amp; id_, </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;                                 <span class="keyword">const</span> gloox::JID&amp; service_, </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;                                 <span class="keyword">const</span> std::string&amp; node_, </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;                                 <span class="keyword">const</span> gloox::PubSub::ItemList&amp; itemList_, </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;                                 <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;        </div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;        <span class="keywordtype">void</span> handleSubscriptionResult( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;                                       <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;                                       <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;                                       <span class="keyword">const</span> std::string&amp; sid_,</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;                                       <span class="keyword">const</span> gloox::JID&amp; jid_,</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;                                       <span class="keyword">const</span> gloox::PubSub::SubscriptionType subType_,</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;                                       <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        </div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;        <span class="keywordtype">void</span> handleUnsubscriptionResult( <span class="keyword">const</span> std::string&amp; id_, <span class="keyword">const</span> gloox::JID&amp; service_, <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;        <span class="keywordtype">void</span> handleSubscriptionOptions( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;                                        <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;                                        <span class="keyword">const</span> gloox::JID&amp; jid_,</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;                                        <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;                                        <span class="keyword">const</span> gloox::DataForm* options_,</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;                                        <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;        </div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;        <span class="keywordtype">void</span> handleSubscriptionOptionsResult( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;                                              <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;                                              <span class="keyword">const</span> gloox::JID&amp; jid_,</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                                              <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                                              <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;        </div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;        <span class="keywordtype">void</span> handleSubscribers( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;                                <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;                                <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;                                <span class="keyword">const</span> gloox::PubSub::SubscriberList* list_,</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;                                <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;        </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;        <span class="keywordtype">void</span> handleSubscribersResult( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;                                      <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;                                      <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;                                      <span class="keyword">const</span> gloox::PubSub::SubscriberList* list_,</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;                                      <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;        </div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;        <span class="keywordtype">void</span> handleAffiliates( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;                               <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;                               <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;                               <span class="keyword">const</span> gloox::PubSub::AffiliateList* list_,</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;                               <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;        </div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;        <span class="keywordtype">void</span> handleAffiliatesResult( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;                                     <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;                                     <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;                                     <span class="keyword">const</span> gloox::PubSub::AffiliateList* list_,</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;                                     <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;        </div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;        <span class="keywordtype">void</span> handleNodeConfig( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;                               <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;                               <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;                               <span class="keyword">const</span> gloox::DataForm* config_,</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;                               <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;        </div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;        <span class="keywordtype">void</span> handleNodeConfigResult( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;                                     <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;                                     <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;                                     <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;        </div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;        <span class="keywordtype">void</span> handleNodeCreation( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;                                 <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;                                 <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;                                 <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;        </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;        <span class="keywordtype">void</span> handleNodeDeletion( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;                                 <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;                                 <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;                                 <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;        </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;        <span class="keywordtype">void</span> handleNodePurge( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;                              <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;                              <span class="keyword">const</span> std::string&amp; node_,</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;                              <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;        </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;        <span class="keywordtype">void</span> handleSubscriptions( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;                                  <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;                                  <span class="keyword">const</span> gloox::PubSub::SubscriptionMap&amp; subMap_,</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;                                  <span class="keyword">const</span> gloox::Error* error_ = 0);</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;        </div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;        <span class="keywordtype">void</span> handleAffiliations( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;                                 <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;                                 <span class="keyword">const</span> gloox::PubSub::AffiliationMap&amp; affMap_,</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;                                 <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;        </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;        <span class="keywordtype">void</span> handleDefaultNodeConfig( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;                                      <span class="keyword">const</span> gloox::JID&amp; service_,</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;                                      <span class="keyword">const</span> gloox::DataForm* config_,</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;                                      <span class="keyword">const</span> gloox::Error* error_ = 0 );</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;        <span class="comment">/* override gloox::SIProfileFTHandler */</span></div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;        <span class="keywordtype">void</span> handleFTRequest( <span class="keyword">const</span> gloox::JID&amp; from_, </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;                              <span class="keyword">const</span> gloox::JID&amp; to_, </div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;                              <span class="keyword">const</span> std::string&amp; sid_,</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;                              <span class="keyword">const</span> std::string&amp; name_, </div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;                              <span class="keywordtype">long</span> size_, </div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;                              <span class="keyword">const</span> std::string&amp; hash_,</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;                              <span class="keyword">const</span> std::string&amp; date_, </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;                              <span class="keyword">const</span> std::string&amp; mimetype_,</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;                              <span class="keyword">const</span> std::string&amp; desc_, </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;                              <span class="keywordtype">int</span> stypes_ );</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;        <span class="keywordtype">void</span> handleFTRequestError( <span class="keyword">const</span> gloox::IQ&amp; iq_, <span class="keyword">const</span> std::string&amp; sid_ );</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;        <span class="keywordtype">void</span> handleFTBytestream( gloox::Bytestream* bs_ );</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;        </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;        <span class="keyword">const</span> std::string handleOOBRequestResult( <span class="keyword">const</span> gloox::JID&amp; from_, <span class="keyword">const</span> gloox::JID&amp; to_, <span class="keyword">const</span> std::string&amp; sid_ );</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <span class="comment">/* override gloox::BytestreamDataHandler */</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordtype">void</span> handleBytestreamData( gloox::Bytestream* bs_, <span class="keyword">const</span> std::string&amp; data_ );</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;        </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;        <span class="keywordtype">void</span> handleBytestreamError( gloox::Bytestream* bs_, <span class="keyword">const</span> gloox::IQ&amp; iq_ );</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;        </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;        <span class="keywordtype">void</span> handleBytestreamOpen( gloox::Bytestream* bs_ );</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;        </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;        <span class="keywordtype">void</span> handleBytestreamClose( gloox::Bytestream* bs_ );</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="preprocessor">#endif // end #ifndef SWIG  </span></div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="preprocessor">#pragma region 配置</span></div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;        <span class="keyword">const</span> gloox::JID&amp; jid() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        <span class="keyword">const</span> std::string&amp; password() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        <span class="keyword">const</span> std::string&amp; host() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;        </div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordtype">int</span> port() <span class="keyword">const</span>;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        </div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        <span class="keywordtype">bool</span> registerXmppCallback( <a class="code" href="classkl_1_1_xmpp_callback.html">XmppCallback</a>* xmppCallback_ );</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;        <span class="keywordtype">void</span> removeXmppCallback( <a class="code" href="classkl_1_1_xmpp_callback.html">XmppCallback</a>* xmppCallback_ );</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;</div>
<div class="line"><a name="l00467"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a008a7f9add29227bf75fce885ea90df5">  467</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classkl_1_1_xmpp_stack.html#a008a7f9add29227bf75fce885ea90df5">isCheckMicrobolgNodeConfig</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_isCheckMicrobolgNodeConfig; }</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div>
<div class="line"><a name="l00472"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a50e729e443a03a44134c3581514ec596">  472</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classkl_1_1_xmpp_stack.html#a50e729e443a03a44134c3581514ec596">enableCheckMicrobolgNodeConfig</a>() { m_isCheckMicrobolgNodeConfig = <span class="keyword">true</span>; }</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;</div>
<div class="line"><a name="l00477"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#aabc282b65bac665e0b7105f92e17759b">  477</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classkl_1_1_xmpp_stack.html#aabc282b65bac665e0b7105f92e17759b">disableCheckMicrobolgNodeConfig</a>() { m_isCheckMicrobolgNodeConfig = <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;</div>
<div class="line"><a name="l00484"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#aa1a8a4df59d27fef0986f65ba3f31bf6">  484</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classkl_1_1_xmpp_stack.html#aa1a8a4df59d27fef0986f65ba3f31bf6">isCheckAvatarDataNodeConfig</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> m_isCheckAvatarDataNodeConfig; }</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;</div>
<div class="line"><a name="l00489"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a30a398e65e1370ca9efe70e8bb46d2ac">  489</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classkl_1_1_xmpp_stack.html#a30a398e65e1370ca9efe70e8bb46d2ac">enableCheckAvatarDataNodeConfig</a>() { m_isCheckAvatarDataNodeConfig = <span class="keyword">true</span>; }</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;</div>
<div class="line"><a name="l00494"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a6e45ada5bbfe36bed3f36d6ad18cbc4e">  494</a></span>&#160;        <span class="keywordtype">void</span> <a class="code" href="classkl_1_1_xmpp_stack.html#a6e45ada5bbfe36bed3f36d6ad18cbc4e">disableCheckAvatarDataNodeConfig</a>() { m_isCheckAvatarDataNodeConfig = <span class="keyword">false</span>; }</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;<span class="preprocessor">#pragma region 登录与登出</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;        <span class="keywordtype">void</span> login();</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;        </div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;        <span class="keywordtype">bool</span> isLogined();</div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;        </div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;        <span class="keywordtype">void</span> logout();</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;<span class="preprocessor">#pragma region 注册信息</span></div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;        <span class="keywordtype">bool</span> requestRegistrationFields();</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        </div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="preprocessor">#pragma region 心跳包</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;        <span class="keywordtype">void</span> ping();</div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;        </div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;<span class="preprocessor">#pragma region 查询</span></div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        <span class="comment">// </span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;        <span class="keywordtype">void</span> discoItems( <span class="keyword">const</span> gloox::JID&amp; to_, <span class="keyword">const</span> std::string&amp; node_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;        <span class="comment">// </span></div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;        <span class="keywordtype">void</span> discoInfo( <span class="keyword">const</span> gloox::JID&amp; to_, <span class="keyword">const</span> std::string&amp; node_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;        </div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;<span class="preprocessor">#pragma region 昵称</span></div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;        <span class="keywordtype">bool</span> publishNickname( <span class="keyword">const</span> std::string&amp; nickname_ );</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;<span class="preprocessor">#pragma region 头像</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;        <span class="keyword">const</span> std::string publishAvatar( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                                         <span class="keyword">const</span> std::string&amp; base64_,</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                                         <span class="keywordtype">int</span> bytes_,</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                                         <span class="keyword">const</span> std::string&amp; type_,</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;                                         <span class="keywordtype">int</span> height_ = -1,</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;                                         <span class="keywordtype">int</span> width_ = -1,</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;                                         <span class="keyword">const</span> std::string&amp; url_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;        </div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <span class="keywordtype">void</span> loadAvatar( <span class="keyword">const</span> gloox::JID&amp; to_, <span class="keyword">const</span> std::string&amp; id_ );</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;<span class="preprocessor">#pragma region 通知</span></div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;        <span class="keyword">const</span> std::string notifyPersonalInfoChanged();</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;        </div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;        <span class="keyword">const</span> std::string notifyAddressBookChanged();</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;<span class="preprocessor">#pragma region 消息与状态</span></div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keywordtype">void</span> send( <span class="keyword">const</span> gloox::Message&amp; msg_ );</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        </div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;        <span class="keywordtype">void</span> send( <span class="keyword">const</span> <a class="code" href="classkl_1_1_xhtml_message.html">kl::XhtmlMessage</a>&amp; msg_ );</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;        </div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;        <span class="keywordtype">bool</span> sendChatMessage( <span class="keyword">const</span> std::string&amp; id_,</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                              <span class="keyword">const</span> gloox::JID&amp; to_, </div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                              <span class="keyword">const</span> std::string&amp; body_,</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                              <span class="keyword">const</span> std::string&amp; xhtml_ = <span class="stringliteral">&quot;&quot;</span>,</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                              <span class="keyword">const</span> std::string&amp; subject_ = <span class="stringliteral">&quot;&quot;</span>, </div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                              <span class="keyword">const</span> std::string&amp; thread_ = <span class="stringliteral">&quot;&quot;</span>,</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                              <span class="keywordtype">bool</span> amp_ = <span class="keyword">false</span>,</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                              <span class="keywordtype">bool</span> receipts_ = <span class="keyword">false</span> );</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;        <span class="keywordtype">bool</span> sendIMailMessage( <span class="keyword">const</span> std::string&amp; id_, </div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                               <span class="keyword">const</span> gloox::JID&amp; to_, </div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                               <span class="keyword">const</span> <a class="code" href="structkl_1_1_i_mail_s_m_t_p_info.html">IMailSMTPInfo</a>&amp; iMailSMTPInfo_, </div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                               <span class="keywordtype">bool</span> receipts_ = <span class="keyword">false</span> );</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;        <span class="keywordtype">bool</span> sendReceiptMessage( <span class="keyword">const</span> std::string&amp; id_, <span class="keyword">const</span> gloox::JID&amp; to_, <span class="keyword">const</span> std::string&amp; receiptId_ ); </div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;        </div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;        <span class="keywordtype">bool</span> sendAttentionMessage( <span class="keyword">const</span> gloox::JID&amp; to_ );</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;        </div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;        <span class="keywordtype">bool</span> sendPresence( gloox::Presence::PresenceType type_, <span class="keyword">const</span> std::string&amp; status_ = <span class="stringliteral">&quot;&quot;</span>, <span class="keywordtype">int</span> priority_ = 0 );</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;<span class="preprocessor">#pragma region 花名册</span></div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        <span class="keywordtype">bool</span> getRoster();</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        </div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;        <span class="keywordtype">bool</span> addRosterItem( <span class="keyword">const</span> gloox::JID&amp; jid_, </div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;                            <span class="keyword">const</span> std::string&amp; name_, </div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;                            <span class="keyword">const</span> gloox::StringList&amp; groups_, </div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;                            <span class="keywordtype">bool</span> subscribe_ = <span class="keyword">true</span>, </div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;                            <span class="keyword">const</span> std::string&amp; msg_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;        <span class="keywordtype">bool</span> moveRosterItemToGroup( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> std::string&amp; group_ );</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;        <span class="keywordtype">bool</span> moveRosterItemToGroups( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> gloox::StringList&amp; groups_ );</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;        </div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        <span class="keywordtype">bool</span> copyRosterItemToGroup( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> std::string&amp; group_ );</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;        <span class="keywordtype">bool</span> copyRosterItemToGroups( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> gloox::StringList&amp; groups_ );</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keywordtype">bool</span> removeRosterItemFromGroup( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> std::string&amp; group_ );</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;        <span class="keywordtype">bool</span> removeRosterItemFromGroups( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> gloox::StringList&amp; groups_ );</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;        <span class="keywordtype">bool</span> removeRosterItemFromAllGroups( <span class="keyword">const</span> gloox::JID&amp; jid_ );</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;        <span class="keywordtype">bool</span> changeRosterItemName( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> std::string&amp; name_ );</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;        <span class="keywordtype">bool</span> updateRosterItem( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> std::string&amp; name_, <span class="keyword">const</span> gloox::StringList&amp; groups_ );</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;        <span class="keywordtype">bool</span> deleteRosterItem( <span class="keyword">const</span> gloox::JID&amp; jid_ );</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        </div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;        <span class="keywordtype">bool</span> subscribeRosterItem( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keyword">const</span> std::string&amp; msg_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        </div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;        <span class="keywordtype">bool</span> approveSubscription( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keywordtype">bool</span> autoSubscribeRemote_ = <span class="keyword">true</span> );</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;        </div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;        <span class="keywordtype">bool</span> denySubscription( <span class="keyword">const</span> gloox::JID&amp; jid_, <span class="keywordtype">bool</span> autoDeleteRosterItem = <span class="keyword">true</span> );</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;        </div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <span class="keywordtype">bool</span> addContact( <span class="keyword">const</span> gloox::JID&amp; contact_, <span class="keyword">const</span> std::string&amp; name_ = <span class="stringliteral">&quot;&quot;</span>, <span class="keyword">const</span> gloox::StringList&amp; groups_ = gloox::StringList(), <span class="keyword">const</span> std::string&amp; msg_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        </div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;        <span class="keywordtype">bool</span> updateContact( <span class="keyword">const</span> gloox::JID&amp; contact_, <span class="keyword">const</span> std::string&amp; nickname_, <span class="keyword">const</span> std::list&lt;std::string&gt;&amp; groups_ );</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;        </div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        <span class="keywordtype">bool</span> removeContact( <span class="keyword">const</span> gloox::JID&amp; contact_ );</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;<span class="preprocessor">#pragma region 发布订阅</span></div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="preprocessor"></span>        <span class="comment">// 创建发布订阅节点</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <span class="keywordtype">void</span> createPubSubNode( <span class="keyword">const</span> gloox::JID&amp; service_, <span class="keyword">const</span> std::string&amp; node_ );</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        <span class="keyword">const</span> std::string publishUserTune( <span class="keyword">const</span> std::string&amp; title_ );</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <span class="keywordtype">void</span> configUserTuneNode();</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        <span class="keywordtype">void</span> getUserTuneNodeConfig();</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        <span class="keywordtype">void</span> deleteUserTuneNode();</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="preprocessor">#pragma region 微博</span></div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;        <span class="keyword">const</span> std::string publish( <span class="keyword">const</span> <a class="code" href="classkl_1_1_microblog.html">Microblog</a>&amp; microblog_ );</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <span class="keyword">const</span> std::string deleteMicroblog( <span class="keyword">const</span> std::string&amp; id_ );</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;        <span class="keywordtype">void</span> deleteSelfMicroblogNode();</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        <span class="keywordtype">void</span> requestMicroblogs( <span class="keyword">const</span> gloox::JID&amp; to_ );</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="preprocessor">#pragma region 群聊</span></div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;        <span class="keywordtype">void</span> createMUCRoom( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> <a class="code" href="structkl_1_1_m_u_c_room_config.html">MUCRoomConfig</a>&amp; config_ );</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        <span class="keywordtype">void</span> destroyMUCRoom( <span class="keyword">const</span> gloox::JID&amp; room_ );</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;        <span class="keywordtype">void</span> modifyMUCRoomMemberList( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> gloox::StringList&amp; members_ );</div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;        </div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;        <span class="keywordtype">void</span> requestMUCRoomMemberList( <span class="keyword">const</span> gloox::JID&amp; room_ );</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        <span class="keywordtype">void</span> modifyMUCRoomOwnerList( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> gloox::StringList&amp; owners_ );</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;</div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;        <span class="keywordtype">void</span> requestMUCRoomOwnerList( <span class="keyword">const</span> gloox::JID&amp; room_ );</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;        <span class="keywordtype">void</span> enterMUCRoom( <span class="keyword">const</span> gloox::JID&amp; room_,</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;                           gloox::Presence::PresenceType presType_ = gloox::Presence::Available,</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;                           <span class="keyword">const</span> std::string&amp; presStatus_ = <span class="stringliteral">&quot;&quot;</span>,</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;                           <span class="keywordtype">int</span> presPriority_ = 0,</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;                           <span class="keyword">const</span> std::string&amp; password_ = <span class="stringliteral">&quot;&quot;</span>,</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;                           <span class="keywordtype">bool</span> requestHistory_ = <span class="keyword">true</span> );</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;                </div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;        <span class="keywordtype">void</span> configMUCRoom( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> <a class="code" href="structkl_1_1_m_u_c_room_config.html">MUCRoomConfig</a>&amp; config_ );</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        <span class="keywordtype">void</span> queryMUCRoomInfo( <span class="keyword">const</span> gloox::JID&amp; room_ );</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        </div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        <span class="keywordtype">void</span> queryMUCRoomConfig( <span class="keyword">const</span> gloox::JID&amp; room_ );</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;        </div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        <span class="keywordtype">void</span> grantMUCRoomMembership( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> gloox::JID&amp; user_ );</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;        </div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;        <span class="keywordtype">void</span> grantMUCRoomMembership( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> std::string&amp; nickname_, <span class="keyword">const</span> std::string&amp; reason_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        </div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;        <span class="keywordtype">void</span> revokeMUCRoomMembership( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> gloox::JID&amp; user_ );</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;        <span class="keywordtype">void</span> revokeMUCRoomOwnership( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> gloox::JID&amp; user_ );</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        </div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;        <span class="keywordtype">void</span> exitMUCRoom( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> std::string&amp; reason_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;</div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;        <span class="keywordtype">void</span> inviteIntoMUCRoom( <span class="keyword">const</span> gloox::JID&amp; room_, </div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;                                <span class="keyword">const</span> gloox::JID&amp; invitee_, </div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;                                <a class="code" href="namespacekl.html#a30a7a36c6f23b923ead408980c5a5bcb">MUCRoomInvitationType</a> type_ = <a class="code" href="namespacekl.html#a30a7a36c6f23b923ead408980c5a5bcbaf4690c10bc9af38a1c7e158c76ed25b9">MUCRoomInvitationType::Mediated</a>, </div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;                                <span class="keyword">const</span> std::string&amp; reason_ = <span class="stringliteral">&quot;&quot;</span>,</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;                                <span class="keywordtype">bool</span> amp_ = <span class="keyword">false</span>,</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;                                <span class="keywordtype">bool</span> receipts_ = <span class="keyword">false</span> );</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;        <span class="keywordtype">void</span> rejectMUCRoomInvitation( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> gloox::JID&amp; invitor_, <span class="keyword">const</span> std::string&amp; reason_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;        </div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;        <span class="keywordtype">void</span> changeSelfNicknameInMUCRoom( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> std::string&amp; nickname_ );</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;        <span class="keywordtype">void</span> requestMUCRoomVoice( <span class="keyword">const</span> gloox::JID&amp; room_ );</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;        </div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;        <span class="keywordtype">void</span> grantMUCRoomVoice( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> std::string&amp; occupantNickname_, <span class="keyword">const</span> std::string&amp; reason_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;        <span class="keywordtype">void</span> revokeMUCRoomVoice( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> std::string&amp; occupantNickname_, <span class="keyword">const</span> std::string&amp; reason_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;        <span class="keywordtype">void</span> changeMUCRoomSubject( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> std::string&amp; subject_ );</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;        <span class="keywordtype">void</span> kickOutMUCRoom( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> std::string&amp; occupantNickname_, <span class="keyword">const</span> std::string&amp; reason_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;        <span class="keywordtype">void</span> banOutMUCRoom( <span class="keyword">const</span> gloox::JID&amp; room_, <span class="keyword">const</span> std::string&amp; occupantNickname_, <span class="keyword">const</span> std::string&amp; reason_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;        <span class="keywordtype">void</span> sendMUCRoomMessage( <span class="keyword">const</span> gloox::JID&amp; room_, </div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;                                 <span class="keyword">const</span> std::string&amp; msg_, </div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;                                 <span class="keyword">const</span> std::string&amp; id_ = <span class="stringliteral">&quot;&quot;</span>, </div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;                                 <span class="keyword">const</span> std::string&amp; xhtml_ = <span class="stringliteral">&quot;&quot;</span>,  </div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;                                 <span class="keywordtype">bool</span> receipts_ = <span class="keyword">false</span> );</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;        <span class="keywordtype">void</span> sendMUCRoomPresence( <span class="keyword">const</span> gloox::JID&amp; room_, gloox::Presence::PresenceType type_ = gloox::Presence::Available, <span class="keyword">const</span> std::string&amp; status_ = <span class="stringliteral">&quot;&quot;</span> );</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="preprocessor">#pragma region 文件传输</span></div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;        <span class="comment">//void acceptIbbFt( const gloox::JID&amp; initiator_, const std::string&amp; sid_ );</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;        </div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;        <span class="comment">//void acceptS5bFt( const gloox::JID&amp; initiator_, const std::string&amp; sid_ );</span></div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;        <span class="comment">//void acceptOobFt( const gloox::JID&amp; initiator_, const std::string&amp; sid_ );</span></div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;        <span class="keywordtype">void</span> acceptFt( <span class="keyword">const</span> gloox::JID&amp; initiator_, <span class="keyword">const</span> std::string&amp; sid_, gloox::SIProfileFT::StreamType type_ );</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;        <span class="keywordtype">void</span> rejectFt( <span class="keyword">const</span> gloox::JID&amp; initiator_, <span class="keyword">const</span> std::string&amp; sid_, <span class="keyword">const</span> std::string&amp; reason_ = <span class="stringliteral">&quot;&quot;</span> ); </div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;        <span class="keywordtype">int</span> recvS5bFtData( <span class="keyword">const</span> std::string&amp; sid_ );</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;        </div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;        <span class="keywordtype">bool</span> sendFtData( <span class="keyword">const</span> std::string&amp; sid_, <span class="keywordtype">void</span>* data_, <span class="keywordtype">long</span> size_ );</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;        </div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;        <span class="keyword">const</span> std::string requestFt( <span class="keyword">const</span> gloox::JID&amp; to_, <span class="keyword">const</span> <a class="code" href="structkl_1_1_file_metadata.html">FileMetadata</a>&amp; file_ );</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;        </div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;        <span class="keywordtype">bool</span> closeFtBytestream( <span class="keyword">const</span> std::string&amp; sid_ );</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;        </div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;        <span class="keywordtype">bool</span> isBytestreamOpened( <span class="keyword">const</span> std::string&amp; sid_ );</div>
<div class="line"><a name="l01152"></a><span class="lineno"> 1152</span>&#160;        </div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;<span class="preprocessor">#pragma region 调试</span></div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;        <span class="keywordtype">void</span> sendXml( <span class="keyword">const</span> std::string&amp; xml_ );</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;<span class="preprocessor">#pragma endregion</span></div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;<span class="preprocessor"></span>        </div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;        <span class="keywordtype">void</span> setIdentity( <span class="keyword">const</span> std::string&amp; category_, <span class="keyword">const</span> std::string&amp; type_, <span class="keyword">const</span> std::string&amp; name_ );</div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;        <span class="keywordtype">void</span> addFeature( <span class="keyword">const</span> std::string&amp; feature_ );</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;        <span class="keywordtype">void</span> removeFeature( <span class="keyword">const</span> std::string&amp; feature_ );</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;<span class="preprocessor">#ifdef KL_XMPPSTACK_TEST</span></div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;<span class="preprocessor"></span>    <span class="keyword">public</span>:</div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;<span class="preprocessor"></span>    <span class="keyword">protected</span>:</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;<span class="preprocessor">#endif </span></div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;        <span class="keywordtype">void</span> init();</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;</div>
<div class="line"><a name="l01179"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a25281d5684577f6a881599308760d0c5"> 1179</a></span>&#160;        gloox::Client*                 <a class="code" href="classkl_1_1_xmpp_stack.html#a25281d5684577f6a881599308760d0c5">m_client</a>;</div>
<div class="line"><a name="l01180"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a3e1732c192879c3d0f1c89adf6d147ab"> 1180</a></span>&#160;        gloox::Registration*           <a class="code" href="classkl_1_1_xmpp_stack.html#a3e1732c192879c3d0f1c89adf6d147ab">m_registration</a>;</div>
<div class="line"><a name="l01181"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a3ea452f2e0fedee198b8a5a2651359b7"> 1181</a></span>&#160;        gloox::SIProfileFT*            <a class="code" href="classkl_1_1_xmpp_stack.html#a3ea452f2e0fedee198b8a5a2651359b7">m_sIProfileFT</a>;</div>
<div class="line"><a name="l01182"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a2b58531216fe1c57581adb68acd45bb2"> 1182</a></span>&#160;        gloox::SOCKS5BytestreamServer* <a class="code" href="classkl_1_1_xmpp_stack.html#a2b58531216fe1c57581adb68acd45bb2">m_sOCKS5BytestreamServer</a>;</div>
<div class="line"><a name="l01183"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a762248efa76076bf1bfae969cb6dac13"> 1183</a></span>&#160;        <a class="code" href="classkl_1_1_pub_sub_manager.html">kl::PubSubManager</a>*             <a class="code" href="classkl_1_1_xmpp_stack.html#a762248efa76076bf1bfae969cb6dac13">m_pubSubManager</a>;</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;        </div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;        <span class="comment">// 观察者集合</span></div>
<div class="line"><a name="l01186"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#aba64d0a859e4a440850d5b82562ed965"> 1186</a></span>&#160;        std::list&lt;XmppCallback*&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#aba64d0a859e4a440850d5b82562ed965">m_xmppCallbacks</a>;</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;</div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;        <span class="comment">// XMPP实体集合 &lt;JID，实体&gt;</span></div>
<div class="line"><a name="l01189"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a2760edbdf3f6ec79b75c2e390d500314"> 1189</a></span>&#160;        std::map&lt;std::string, XmppEntity*&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a2760edbdf3f6ec79b75c2e390d500314">m_xmppEntityTrackMap</a>;</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;        </div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;        <span class="comment">// 发布微博请求集合 &lt;请求ID，微博ID&gt;</span></div>
<div class="line"><a name="l01192"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a2f0ba29679fa81684cfe19d9893c81b0"> 1192</a></span>&#160;        std::map&lt;std::string, std::string&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a2f0ba29679fa81684cfe19d9893c81b0">m_publishMicroblogTrackMap</a>;</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;        </div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;        <span class="comment">// 删除微博请求集合 &lt;请求ID，微博ID&gt;</span></div>
<div class="line"><a name="l01195"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a0597375fda4f2cc865ab7508a24db461"> 1195</a></span>&#160;        std::map&lt;std::string, std::string&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a0597375fda4f2cc865ab7508a24db461">m_deleteMicroblogTrackMap</a>;</div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;        </div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;        <span class="comment">// 字节流对象集合 &lt;SID, 字节流&gt;</span></div>
<div class="line"><a name="l01198"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a4921ebb34d1015e68b002566fee7fa45"> 1198</a></span>&#160;        std::map&lt;std::string, gloox::Bytestream*&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a4921ebb34d1015e68b002566fee7fa45">m_bytestreamTrackMap</a>;</div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;        <span class="comment">// 是否在登录成功后获取并修正微博节点配置</span></div>
<div class="line"><a name="l01201"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a987022362d70a24c46ffe86b9aab0c39"> 1201</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classkl_1_1_xmpp_stack.html#a987022362d70a24c46ffe86b9aab0c39">m_isCheckMicrobolgNodeConfig</a>;</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;        <span class="comment">// 是否在登录成功后获取并修正头像数据节点配置</span></div>
<div class="line"><a name="l01204"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a07cc877af677bc1028c68397220d781b"> 1204</a></span>&#160;        <span class="keywordtype">bool</span> <a class="code" href="classkl_1_1_xmpp_stack.html#a07cc877af677bc1028c68397220d781b">m_isCheckAvatarDataNodeConfig</a>;</div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;        <span class="comment">// 发布昵称请求集合 &lt;请求ID，昵称&gt;</span></div>
<div class="line"><a name="l01207"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#afe171b9ab875afcca28c58aeafd08984"> 1207</a></span>&#160;        std::map&lt;std::string, std::string&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#afe171b9ab875afcca28c58aeafd08984">m_publishNicknameTrackMap</a>;</div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;        <span class="comment">// 发布头像数据的请求集合 &lt;请求ID，头像元数据&gt;</span></div>
<div class="line"><a name="l01210"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a8884d9059554b48b5d2653eae51f5eff"> 1210</a></span>&#160;        std::map&lt;std::string, AvatarMetadata*&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a8884d9059554b48b5d2653eae51f5eff">m_publishAvatarDataTrackMap</a>;</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;        <span class="comment">// 发布头像元数据的请求集合 &lt;请求ID，头像ID&gt;</span></div>
<div class="line"><a name="l01213"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a8a44b28a70ea3842bb4178557d201d67"> 1213</a></span>&#160;        std::map&lt;std::string, std::string&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a8a44b28a70ea3842bb4178557d201d67">m_publishAvatarMetadataTrackMap</a>;</div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;        <span class="comment">// 通知个人信息已修改请求集合 &lt;请求ID&gt;</span></div>
<div class="line"><a name="l01216"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a6991784cc5d3029f85ba142ad127cffc"> 1216</a></span>&#160;        std::list&lt;std::string&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a6991784cc5d3029f85ba142ad127cffc">m_notifyPersonalInfoChangedTrackList</a>;</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        </div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;        <span class="comment">// 通知通讯录已修改请求集合 &lt;请求ID&gt;</span></div>
<div class="line"><a name="l01219"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a4f8710c9e7df21a439177e8aa544d87a"> 1219</a></span>&#160;        std::list&lt;std::string&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a4f8710c9e7df21a439177e8aa544d87a">m_notifyAddressBookChangedTrackList</a>;</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;</div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;        <span class="comment">// 房间集合，&lt;房间JID, 房间&gt;</span></div>
<div class="line"><a name="l01222"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a725b931a88ea55c8cdfbe5e5d872055c"> 1222</a></span>&#160;        std::map&lt;std::string, gloox::MUCRoom*&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a725b931a88ea55c8cdfbe5e5d872055c">m_mUCRoomMap</a>;</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;        <span class="comment">// 创建房间请求集合，&lt;房间JID, 房间配置&gt;</span></div>
<div class="line"><a name="l01225"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a96b78b0903634dc83c24ca7eb9516bdb"> 1225</a></span>&#160;        std::map&lt;std::string, gloox::DataForm*&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a96b78b0903634dc83c24ca7eb9516bdb">m_createMUCRoomTrackMap</a>;</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;                                </div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;        </div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;        </div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;        </div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;        </div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;        </div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;</div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;        <span class="comment">/* 实体能力 jid-ver FIX: change a name may be better */</span></div>
<div class="line"><a name="l01237"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a863d23ddbf2b10a17749f8635a897fe3"> 1237</a></span>&#160;        gloox::StringMap     <a class="code" href="classkl_1_1_xmpp_stack.html#a863d23ddbf2b10a17749f8635a897fe3">m_verificationMap</a>;</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;        <span class="comment">/* 实体能力 ver-discoinfo FIX: change a name may be better */</span></div>
<div class="line"><a name="l01239"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a5cb28f4aa6ca79e5b16347cf58c7875f"> 1239</a></span>&#160;        std::map&lt;std::string, kl::DiscoInfo*&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#a5cb28f4aa6ca79e5b16347cf58c7875f">m_discoInfoMap</a>;</div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;        <span class="comment">// FIX: change a name may be better</span></div>
<div class="line"><a name="l01241"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#a7e614c4549f6850a0fb36885b856205d"> 1241</a></span>&#160;        gloox::StringList    <a class="code" href="classkl_1_1_xmpp_stack.html#a7e614c4549f6850a0fb36885b856205d">m_pendingMucInvitations</a>;</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;        <span class="comment">// 实体能力映射表，包括服务器、对方客户端</span></div>
<div class="line"><a name="l01245"></a><span class="lineno"><a class="line" href="classkl_1_1_xmpp_stack.html#ae7bf885574d874c95cde2171c6bfce11"> 1245</a></span>&#160;        std::map&lt;std::string, kl::Entity*&gt; <a class="code" href="classkl_1_1_xmpp_stack.html#ae7bf885574d874c95cde2171c6bfce11">m_entityMap</a>;</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    }; <span class="comment">// end class KLXMPP_API XmppStack</span></div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;} <span class="comment">// end namespace kl</span></div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;<span class="preprocessor">#endif // KL_XMPPSTACK_H__</span></div>
<div class="ttc" id="classkl_1_1_pub_sub_manager_html"><div class="ttname"><a href="classkl_1_1_pub_sub_manager.html">kl::PubSubManager</a></div><div class="ttdef"><b>Definition:</b> kl_pubsubmanager.h:10</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a3e1732c192879c3d0f1c89adf6d147ab"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a3e1732c192879c3d0f1c89adf6d147ab">kl::XmppStack::m_registration</a></div><div class="ttdeci">gloox::Registration * m_registration</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1180</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a6991784cc5d3029f85ba142ad127cffc"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a6991784cc5d3029f85ba142ad127cffc">kl::XmppStack::m_notifyPersonalInfoChangedTrackList</a></div><div class="ttdeci">std::list&lt; std::string &gt; m_notifyPersonalInfoChangedTrackList</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1216</div></div>
<div class="ttc" id="namespacekl_html_a09f8fa82fe99ceab1f5647af58472c19"><div class="ttname"><a href="namespacekl.html#a09f8fa82fe99ceab1f5647af58472c19">kl::XmppCallbackList</a></div><div class="ttdeci">std::list&lt; kl::XmppCallback * &gt; XmppCallbackList</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:42</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a25281d5684577f6a881599308760d0c5"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a25281d5684577f6a881599308760d0c5">kl::XmppStack::m_client</a></div><div class="ttdeci">gloox::Client * m_client</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1179</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a3ea452f2e0fedee198b8a5a2651359b7"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a3ea452f2e0fedee198b8a5a2651359b7">kl::XmppStack::m_sIProfileFT</a></div><div class="ttdeci">gloox::SIProfileFT * m_sIProfileFT</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1181</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a2760edbdf3f6ec79b75c2e390d500314"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a2760edbdf3f6ec79b75c2e390d500314">kl::XmppStack::m_xmppEntityTrackMap</a></div><div class="ttdeci">std::map&lt; std::string, XmppEntity * &gt; m_xmppEntityTrackMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1189</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html">kl::XmppStack</a></div><div class="ttdoc">封装XMPP相关操作。 </div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:138</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a4921ebb34d1015e68b002566fee7fa45"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a4921ebb34d1015e68b002566fee7fa45">kl::XmppStack::m_bytestreamTrackMap</a></div><div class="ttdeci">std::map&lt; std::string, gloox::Bytestream * &gt; m_bytestreamTrackMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1198</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a4f8710c9e7df21a439177e8aa544d87a"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a4f8710c9e7df21a439177e8aa544d87a">kl::XmppStack::m_notifyAddressBookChangedTrackList</a></div><div class="ttdeci">std::list&lt; std::string &gt; m_notifyAddressBookChangedTrackList</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1219</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a7e614c4549f6850a0fb36885b856205d"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a7e614c4549f6850a0fb36885b856205d">kl::XmppStack::m_pendingMucInvitations</a></div><div class="ttdeci">gloox::StringList m_pendingMucInvitations</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1241</div></div>
<div class="ttc" id="structkl_1_1_file_metadata_html"><div class="ttname"><a href="structkl_1_1_file_metadata.html">kl::FileMetadata</a></div><div class="ttdef"><b>Definition:</b> kl_filemetadata.h:11</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a30a398e65e1370ca9efe70e8bb46d2ac"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a30a398e65e1370ca9efe70e8bb46d2ac">kl::XmppStack::enableCheckAvatarDataNodeConfig</a></div><div class="ttdeci">void enableCheckAvatarDataNodeConfig()</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:489</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_ae7bf885574d874c95cde2171c6bfce11"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#ae7bf885574d874c95cde2171c6bfce11">kl::XmppStack::m_entityMap</a></div><div class="ttdeci">std::map&lt; std::string, kl::Entity * &gt; m_entityMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1245</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a762248efa76076bf1bfae969cb6dac13"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a762248efa76076bf1bfae969cb6dac13">kl::XmppStack::m_pubSubManager</a></div><div class="ttdeci">kl::PubSubManager * m_pubSubManager</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1183</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a0597375fda4f2cc865ab7508a24db461"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a0597375fda4f2cc865ab7508a24db461">kl::XmppStack::m_deleteMicroblogTrackMap</a></div><div class="ttdeci">std::map&lt; std::string, std::string &gt; m_deleteMicroblogTrackMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1195</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a50e729e443a03a44134c3581514ec596"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a50e729e443a03a44134c3581514ec596">kl::XmppStack::enableCheckMicrobolgNodeConfig</a></div><div class="ttdeci">void enableCheckMicrobolgNodeConfig()</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:472</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a8a44b28a70ea3842bb4178557d201d67"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a8a44b28a70ea3842bb4178557d201d67">kl::XmppStack::m_publishAvatarMetadataTrackMap</a></div><div class="ttdeci">std::map&lt; std::string, std::string &gt; m_publishAvatarMetadataTrackMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1213</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a96b78b0903634dc83c24ca7eb9516bdb"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a96b78b0903634dc83c24ca7eb9516bdb">kl::XmppStack::m_createMUCRoomTrackMap</a></div><div class="ttdeci">std::map&lt; std::string, gloox::DataForm * &gt; m_createMUCRoomTrackMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1225</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_aabc282b65bac665e0b7105f92e17759b"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#aabc282b65bac665e0b7105f92e17759b">kl::XmppStack::disableCheckMicrobolgNodeConfig</a></div><div class="ttdeci">void disableCheckMicrobolgNodeConfig()</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:477</div></div>
<div class="ttc" id="classkl_1_1_xmpp_callback_html"><div class="ttname"><a href="classkl_1_1_xmpp_callback.html">kl::XmppCallback</a></div><div class="ttdoc">XMPP回调，作为XmppStack的观察者。 </div><div class="ttdef"><b>Definition:</b> kl_xmppcallback.h:17</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a725b931a88ea55c8cdfbe5e5d872055c"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a725b931a88ea55c8cdfbe5e5d872055c">kl::XmppStack::m_mUCRoomMap</a></div><div class="ttdeci">std::map&lt; std::string, gloox::MUCRoom * &gt; m_mUCRoomMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1222</div></div>
<div class="ttc" id="structkl_1_1_i_mail_s_m_t_p_info_html"><div class="ttname"><a href="structkl_1_1_i_mail_s_m_t_p_info.html">kl::IMailSMTPInfo</a></div><div class="ttdoc">即时邮件信息实体。 </div><div class="ttdef"><b>Definition:</b> kl_imailsmtpinfo.h:11</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a8884d9059554b48b5d2653eae51f5eff"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a8884d9059554b48b5d2653eae51f5eff">kl::XmppStack::m_publishAvatarDataTrackMap</a></div><div class="ttdeci">std::map&lt; std::string, AvatarMetadata * &gt; m_publishAvatarDataTrackMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1210</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a008a7f9add29227bf75fce885ea90df5"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a008a7f9add29227bf75fce885ea90df5">kl::XmppStack::isCheckMicrobolgNodeConfig</a></div><div class="ttdeci">bool isCheckMicrobolgNodeConfig() const </div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:467</div></div>
<div class="ttc" id="namespacekl_html_a30a7a36c6f23b923ead408980c5a5bcb"><div class="ttname"><a href="namespacekl.html#a30a7a36c6f23b923ead408980c5a5bcb">kl::MUCRoomInvitationType</a></div><div class="ttdeci">MUCRoomInvitationType</div><div class="ttdef"><b>Definition:</b> kl_common.h:45</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_afe171b9ab875afcca28c58aeafd08984"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#afe171b9ab875afcca28c58aeafd08984">kl::XmppStack::m_publishNicknameTrackMap</a></div><div class="ttdeci">std::map&lt; std::string, std::string &gt; m_publishNicknameTrackMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1207</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a2f0ba29679fa81684cfe19d9893c81b0"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a2f0ba29679fa81684cfe19d9893c81b0">kl::XmppStack::m_publishMicroblogTrackMap</a></div><div class="ttdeci">std::map&lt; std::string, std::string &gt; m_publishMicroblogTrackMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1192</div></div>
<div class="ttc" id="kl__common_8h_html_a024386094f519c6b791d23e758a83d11"><div class="ttname"><a href="kl__common_8h.html#a024386094f519c6b791d23e758a83d11">KLXMPP_API</a></div><div class="ttdeci">#define KLXMPP_API</div><div class="ttdef"><b>Definition:</b> kl_common.h:18</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_aa1a8a4df59d27fef0986f65ba3f31bf6"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#aa1a8a4df59d27fef0986f65ba3f31bf6">kl::XmppStack::isCheckAvatarDataNodeConfig</a></div><div class="ttdeci">bool isCheckAvatarDataNodeConfig() const </div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:484</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a07cc877af677bc1028c68397220d781b"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a07cc877af677bc1028c68397220d781b">kl::XmppStack::m_isCheckAvatarDataNodeConfig</a></div><div class="ttdeci">bool m_isCheckAvatarDataNodeConfig</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1204</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_aba64d0a859e4a440850d5b82562ed965"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#aba64d0a859e4a440850d5b82562ed965">kl::XmppStack::m_xmppCallbacks</a></div><div class="ttdeci">std::list&lt; XmppCallback * &gt; m_xmppCallbacks</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1186</div></div>
<div class="ttc" id="classkl_1_1_microblog_html"><div class="ttname"><a href="classkl_1_1_microblog.html">kl::Microblog</a></div><div class="ttdoc">微博实体。 </div><div class="ttdef"><b>Definition:</b> kl_microblog.h:15</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a2b58531216fe1c57581adb68acd45bb2"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a2b58531216fe1c57581adb68acd45bb2">kl::XmppStack::m_sOCKS5BytestreamServer</a></div><div class="ttdeci">gloox::SOCKS5BytestreamServer * m_sOCKS5BytestreamServer</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1182</div></div>
<div class="ttc" id="structkl_1_1_m_u_c_room_config_html"><div class="ttname"><a href="structkl_1_1_m_u_c_room_config.html">kl::MUCRoomConfig</a></div><div class="ttdoc">MUC房间配置参数。 </div><div class="ttdef"><b>Definition:</b> kl_mucroomconfig.h:16</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a5cb28f4aa6ca79e5b16347cf58c7875f"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a5cb28f4aa6ca79e5b16347cf58c7875f">kl::XmppStack::m_discoInfoMap</a></div><div class="ttdeci">std::map&lt; std::string, kl::DiscoInfo * &gt; m_discoInfoMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1239</div></div>
<div class="ttc" id="classkl_1_1_xhtml_message_html"><div class="ttname"><a href="classkl_1_1_xhtml_message.html">kl::XhtmlMessage</a></div><div class="ttdef"><b>Definition:</b> kl_xhtmlmessage.h:11</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a987022362d70a24c46ffe86b9aab0c39"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a987022362d70a24c46ffe86b9aab0c39">kl::XmppStack::m_isCheckMicrobolgNodeConfig</a></div><div class="ttdeci">bool m_isCheckMicrobolgNodeConfig</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1201</div></div>
<div class="ttc" id="namespacekl_html_a30a7a36c6f23b923ead408980c5a5bcbaf4690c10bc9af38a1c7e158c76ed25b9"><div class="ttname"><a href="namespacekl.html#a30a7a36c6f23b923ead408980c5a5bcbaf4690c10bc9af38a1c7e158c76ed25b9">kl::Mediated</a></div><div class="ttdef"><b>Definition:</b> kl_common.h:47</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a863d23ddbf2b10a17749f8635a897fe3"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a863d23ddbf2b10a17749f8635a897fe3">kl::XmppStack::m_verificationMap</a></div><div class="ttdeci">gloox::StringMap m_verificationMap</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:1237</div></div>
<div class="ttc" id="classkl_1_1_xmpp_stack_html_a6e45ada5bbfe36bed3f36d6ad18cbc4e"><div class="ttname"><a href="classkl_1_1_xmpp_stack.html#a6e45ada5bbfe36bed3f36d6ad18cbc4e">kl::XmppStack::disableCheckAvatarDataNodeConfig</a></div><div class="ttdeci">void disableCheckAvatarDataNodeConfig()</div><div class="ttdef"><b>Definition:</b> kl_xmppstack.h:494</div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Fri Jun 6 2014 09:50:14 for KLXmpp API by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.5
</small></address>
</body>
</html>

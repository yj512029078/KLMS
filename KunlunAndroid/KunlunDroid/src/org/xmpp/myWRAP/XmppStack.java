/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.xmpp.myWRAP;

public class XmppStack {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected XmppStack(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(XmppStack obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        klcppwrapJNI.delete_XmppStack(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public XmppStack(JID jid_, String password_, String host_, int port_) {
    this(klcppwrapJNI.new_XmppStack__SWIG_0(JID.getCPtr(jid_), jid_, password_, host_, port_), true);
  }

  public XmppStack(JID jid_, String password_, String host_) {
    this(klcppwrapJNI.new_XmppStack__SWIG_1(JID.getCPtr(jid_), jid_, password_, host_), true);
  }

  public XmppStack(JID jid_, String password_) {
    this(klcppwrapJNI.new_XmppStack__SWIG_2(JID.getCPtr(jid_), jid_, password_), true);
  }

  public JID jid() {
    return new JID(klcppwrapJNI.XmppStack_jid(swigCPtr, this), false);
  }

  public String password() {
    return klcppwrapJNI.XmppStack_password(swigCPtr, this);
  }

  public String host() {
    return klcppwrapJNI.XmppStack_host(swigCPtr, this);
  }

  public int port() {
    return klcppwrapJNI.XmppStack_port(swigCPtr, this);
  }

  public String localip() {
    return klcppwrapJNI.XmppStack_localip(swigCPtr, this);
  }

  public int localport() {
    return klcppwrapJNI.XmppStack_localport(swigCPtr, this);
  }

  public JID mucService() {
    return new JID(klcppwrapJNI.XmppStack_mucService(swigCPtr, this), false);
  }

  public JID s5bService() {
    return new JID(klcppwrapJNI.XmppStack_s5bService(swigCPtr, this), false);
  }

  public void enableSelfAsSOCKS5BytestreamServer() {
    klcppwrapJNI.XmppStack_enableSelfAsSOCKS5BytestreamServer(swigCPtr, this);
  }

  public void disableSelfAsSOCKS5BytestreamServer() {
    klcppwrapJNI.XmppStack_disableSelfAsSOCKS5BytestreamServer(swigCPtr, this);
  }

  public void disableUseSOCKS5BytestreamProxyServer() {
    klcppwrapJNI.XmppStack_disableUseSOCKS5BytestreamProxyServer(swigCPtr, this);
  }

  public void enableUseSOCKS5BytestreamProxyServer() {
    klcppwrapJNI.XmppStack_enableUseSOCKS5BytestreamProxyServer(swigCPtr, this);
  }

  public void setIdentity(String category_, String type_, String name_) {
    klcppwrapJNI.XmppStack_setIdentity(swigCPtr, this, category_, type_, name_);
  }

  public void queryEntityInfo(JID jid_) {
    klcppwrapJNI.XmppStack_queryEntityInfo(swigCPtr, this, JID.getCPtr(jid_), jid_);
  }

  public boolean registerXmppCallback(XmppCallback xmppCallback_) {
    return klcppwrapJNI.XmppStack_registerXmppCallback(swigCPtr, this, XmppCallback.getCPtr(xmppCallback_), xmppCallback_);
  }

  public void removeXmppCallback(XmppCallback xmppCallback_) {
    klcppwrapJNI.XmppStack_removeXmppCallback(swigCPtr, this, XmppCallback.getCPtr(xmppCallback_), xmppCallback_);
  }

  public void addS5bStreamHost(JID jid_, String host_, int port_) {
    klcppwrapJNI.XmppStack_addS5bStreamHost(swigCPtr, this, JID.getCPtr(jid_), jid_, host_, port_);
  }

  public void clearAllS5bStreamHosts() {
    klcppwrapJNI.XmppStack_clearAllS5bStreamHosts(swigCPtr, this);
  }

  public void login() {
    klcppwrapJNI.XmppStack_login(swigCPtr, this);
  }

  public boolean isLogined() {
    return klcppwrapJNI.XmppStack_isLogined(swigCPtr, this);
  }

  public void logout() {
    klcppwrapJNI.XmppStack_logout(swigCPtr, this);
  }

  public boolean publishNickname(String nickname_) {
    return klcppwrapJNI.XmppStack_publishNickname(swigCPtr, this, nickname_);
  }

  public String publishAvatar(String id_, String base64_, int bytes_, String type_, int height_, int width_, String url_) {
    return klcppwrapJNI.XmppStack_publishAvatar__SWIG_0(swigCPtr, this, id_, base64_, bytes_, type_, height_, width_, url_);
  }

  public String publishAvatar(String id_, String base64_, int bytes_, String type_, int height_, int width_) {
    return klcppwrapJNI.XmppStack_publishAvatar__SWIG_1(swigCPtr, this, id_, base64_, bytes_, type_, height_, width_);
  }

  public String publishAvatar(String id_, String base64_, int bytes_, String type_, int height_) {
    return klcppwrapJNI.XmppStack_publishAvatar__SWIG_2(swigCPtr, this, id_, base64_, bytes_, type_, height_);
  }

  public String publishAvatar(String id_, String base64_, int bytes_, String type_) {
    return klcppwrapJNI.XmppStack_publishAvatar__SWIG_3(swigCPtr, this, id_, base64_, bytes_, type_);
  }

  public void loadAvatar(JID to_, String id_) {
    klcppwrapJNI.XmppStack_loadAvatar(swigCPtr, this, JID.getCPtr(to_), to_, id_);
  }

  public boolean sendChatMessage(String id_, JID to_, String body_, String xhtml_, String subject_, String thread_, boolean amp_, boolean receipts_) {
    return klcppwrapJNI.XmppStack_sendChatMessage__SWIG_0(swigCPtr, this, id_, JID.getCPtr(to_), to_, body_, xhtml_, subject_, thread_, amp_, receipts_);
  }

  public boolean sendChatMessage(String id_, JID to_, String body_, String xhtml_, String subject_, String thread_, boolean amp_) {
    return klcppwrapJNI.XmppStack_sendChatMessage__SWIG_1(swigCPtr, this, id_, JID.getCPtr(to_), to_, body_, xhtml_, subject_, thread_, amp_);
  }

  public boolean sendChatMessage(String id_, JID to_, String body_, String xhtml_, String subject_, String thread_) {
    return klcppwrapJNI.XmppStack_sendChatMessage__SWIG_2(swigCPtr, this, id_, JID.getCPtr(to_), to_, body_, xhtml_, subject_, thread_);
  }

  public boolean sendChatMessage(String id_, JID to_, String body_, String xhtml_, String subject_) {
    return klcppwrapJNI.XmppStack_sendChatMessage__SWIG_3(swigCPtr, this, id_, JID.getCPtr(to_), to_, body_, xhtml_, subject_);
  }

  public boolean sendChatMessage(String id_, JID to_, String body_, String xhtml_) {
    return klcppwrapJNI.XmppStack_sendChatMessage__SWIG_4(swigCPtr, this, id_, JID.getCPtr(to_), to_, body_, xhtml_);
  }

  public boolean sendChatMessage(String id_, JID to_, String body_) {
    return klcppwrapJNI.XmppStack_sendChatMessage__SWIG_5(swigCPtr, this, id_, JID.getCPtr(to_), to_, body_);
  }

  public boolean sendIMailMessage(String id_, JID to_, IMailSMTPInfo iMailSMTPInfo_, boolean receipts_) {
    return klcppwrapJNI.XmppStack_sendIMailMessage__SWIG_0(swigCPtr, this, id_, JID.getCPtr(to_), to_, IMailSMTPInfo.getCPtr(iMailSMTPInfo_), iMailSMTPInfo_, receipts_);
  }

  public boolean sendIMailMessage(String id_, JID to_, IMailSMTPInfo iMailSMTPInfo_) {
    return klcppwrapJNI.XmppStack_sendIMailMessage__SWIG_1(swigCPtr, this, id_, JID.getCPtr(to_), to_, IMailSMTPInfo.getCPtr(iMailSMTPInfo_), iMailSMTPInfo_);
  }

  public boolean sendLocationMessage(String id_, JID to_, Geoloc geoloc) {
    return klcppwrapJNI.XmppStack_sendLocationMessage(swigCPtr, this, id_, JID.getCPtr(to_), to_, Geoloc.getCPtr(geoloc), geoloc);
  }

  public boolean sendReceiptMessage(String id_, JID to_, String receiptId_) {
    return klcppwrapJNI.XmppStack_sendReceiptMessage(swigCPtr, this, id_, JID.getCPtr(to_), to_, receiptId_);
  }

  public boolean sendAttentionMessage(String id_, JID to_) {
    return klcppwrapJNI.XmppStack_sendAttentionMessage(swigCPtr, this, id_, JID.getCPtr(to_), to_);
  }

  public boolean sendPresence(Presence.PresenceType type_, String status_, int priority_) {
    return klcppwrapJNI.XmppStack_sendPresence__SWIG_0(swigCPtr, this, type_.swigValue(), status_, priority_);
  }

  public boolean sendPresence(Presence.PresenceType type_, String status_) {
    return klcppwrapJNI.XmppStack_sendPresence__SWIG_1(swigCPtr, this, type_.swigValue(), status_);
  }

  public boolean sendPresence(Presence.PresenceType type_) {
    return klcppwrapJNI.XmppStack_sendPresence__SWIG_2(swigCPtr, this, type_.swigValue());
  }

  public boolean addRosterItem(JID jid_, String name_, StringList groups_, boolean subscribe_, String msg_) {
    return klcppwrapJNI.XmppStack_addRosterItem__SWIG_0(swigCPtr, this, JID.getCPtr(jid_), jid_, name_, StringList.getCPtr(groups_), groups_, subscribe_, msg_);
  }

  public boolean addRosterItem(JID jid_, String name_, StringList groups_, boolean subscribe_) {
    return klcppwrapJNI.XmppStack_addRosterItem__SWIG_1(swigCPtr, this, JID.getCPtr(jid_), jid_, name_, StringList.getCPtr(groups_), groups_, subscribe_);
  }

  public boolean moveRosterItemToGroup(JID jid_, String group_) {
    return klcppwrapJNI.XmppStack_moveRosterItemToGroup(swigCPtr, this, JID.getCPtr(jid_), jid_, group_);
  }

  public boolean moveRosterItemToGroups(JID jid_, StringList groups_) {
    return klcppwrapJNI.XmppStack_moveRosterItemToGroups(swigCPtr, this, JID.getCPtr(jid_), jid_, StringList.getCPtr(groups_), groups_);
  }

  public boolean copyRosterItemToGroup(JID jid_, String group_) {
    return klcppwrapJNI.XmppStack_copyRosterItemToGroup(swigCPtr, this, JID.getCPtr(jid_), jid_, group_);
  }

  public boolean copyRosterItemToGroups(JID jid_, StringList groups_) {
    return klcppwrapJNI.XmppStack_copyRosterItemToGroups(swigCPtr, this, JID.getCPtr(jid_), jid_, StringList.getCPtr(groups_), groups_);
  }

  public boolean removeRosterItemFromGroup(JID jid_, String group_) {
    return klcppwrapJNI.XmppStack_removeRosterItemFromGroup(swigCPtr, this, JID.getCPtr(jid_), jid_, group_);
  }

  public boolean removeRosterItemFromGroups(JID jid_, StringList groups_) {
    return klcppwrapJNI.XmppStack_removeRosterItemFromGroups(swigCPtr, this, JID.getCPtr(jid_), jid_, StringList.getCPtr(groups_), groups_);
  }

  public boolean removeRosterItemFromAllGroups(JID jid_) {
    return klcppwrapJNI.XmppStack_removeRosterItemFromAllGroups(swigCPtr, this, JID.getCPtr(jid_), jid_);
  }

  public boolean changeRosterItemName(JID jid_, String name_) {
    return klcppwrapJNI.XmppStack_changeRosterItemName(swigCPtr, this, JID.getCPtr(jid_), jid_, name_);
  }

  public boolean updateRosterItem(JID jid_, String name_, StringList groups_) {
    return klcppwrapJNI.XmppStack_updateRosterItem(swigCPtr, this, JID.getCPtr(jid_), jid_, name_, StringList.getCPtr(groups_), groups_);
  }

  public boolean deleteRosterItem(JID jid_) {
    return klcppwrapJNI.XmppStack_deleteRosterItem(swigCPtr, this, JID.getCPtr(jid_), jid_);
  }

  public boolean subscribeRosterItem(JID jid_, String msg_) {
    return klcppwrapJNI.XmppStack_subscribeRosterItem__SWIG_0(swigCPtr, this, JID.getCPtr(jid_), jid_, msg_);
  }

  public boolean subscribeRosterItem(JID jid_) {
    return klcppwrapJNI.XmppStack_subscribeRosterItem__SWIG_1(swigCPtr, this, JID.getCPtr(jid_), jid_);
  }

  public boolean approveSubscription(JID jid_, boolean autoSubscribeRemote_) {
    return klcppwrapJNI.XmppStack_approveSubscription__SWIG_0(swigCPtr, this, JID.getCPtr(jid_), jid_, autoSubscribeRemote_);
  }

  public boolean approveSubscription(JID jid_) {
    return klcppwrapJNI.XmppStack_approveSubscription__SWIG_1(swigCPtr, this, JID.getCPtr(jid_), jid_);
  }

  public boolean denySubscription(JID jid_, boolean autoDeleteRosterItem) {
    return klcppwrapJNI.XmppStack_denySubscription__SWIG_0(swigCPtr, this, JID.getCPtr(jid_), jid_, autoDeleteRosterItem);
  }

  public boolean denySubscription(JID jid_) {
    return klcppwrapJNI.XmppStack_denySubscription__SWIG_1(swigCPtr, this, JID.getCPtr(jid_), jid_);
  }

  public String publish(Microblog microblog_) {
    return klcppwrapJNI.XmppStack_publish(swigCPtr, this, Microblog.getCPtr(microblog_), microblog_);
  }

  public String deleteMicroblog(String id_) {
    return klcppwrapJNI.XmppStack_deleteMicroblog(swigCPtr, this, id_);
  }

  public void createMUCRoom(JID room_, MUCRoomConfig config_) {
    klcppwrapJNI.XmppStack_createMUCRoom(swigCPtr, this, JID.getCPtr(room_), room_, MUCRoomConfig.getCPtr(config_), config_);
  }

  public void destroyMUCRoom(JID room_) {
    klcppwrapJNI.XmppStack_destroyMUCRoom(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void modifyMUCRoomMemberList(JID room_, StringList members_) {
    klcppwrapJNI.XmppStack_modifyMUCRoomMemberList(swigCPtr, this, JID.getCPtr(room_), room_, StringList.getCPtr(members_), members_);
  }

  public void requestMUCRoomMemberList(JID room_) {
    klcppwrapJNI.XmppStack_requestMUCRoomMemberList(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void modifyMUCRoomOwnerList(JID room_, StringList owners_) {
    klcppwrapJNI.XmppStack_modifyMUCRoomOwnerList(swigCPtr, this, JID.getCPtr(room_), room_, StringList.getCPtr(owners_), owners_);
  }

  public void requestMUCRoomOwnerList(JID room_) {
    klcppwrapJNI.XmppStack_requestMUCRoomOwnerList(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void enterMUCRoom(JID room_, String nickname_, Presence.PresenceType presType_, String presStatus_, int presPriority_, String password_, boolean requestHistory_) {
    klcppwrapJNI.XmppStack_enterMUCRoom__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, nickname_, presType_.swigValue(), presStatus_, presPriority_, password_, requestHistory_);
  }

  public void enterMUCRoom(JID room_, String nickname_, Presence.PresenceType presType_, String presStatus_, int presPriority_, String password_) {
    klcppwrapJNI.XmppStack_enterMUCRoom__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_, nickname_, presType_.swigValue(), presStatus_, presPriority_, password_);
  }

  public void enterMUCRoom(JID room_, String nickname_, Presence.PresenceType presType_, String presStatus_, int presPriority_) {
    klcppwrapJNI.XmppStack_enterMUCRoom__SWIG_2(swigCPtr, this, JID.getCPtr(room_), room_, nickname_, presType_.swigValue(), presStatus_, presPriority_);
  }

  public void enterMUCRoom(JID room_, String nickname_, Presence.PresenceType presType_, String presStatus_) {
    klcppwrapJNI.XmppStack_enterMUCRoom__SWIG_3(swigCPtr, this, JID.getCPtr(room_), room_, nickname_, presType_.swigValue(), presStatus_);
  }

  public void enterMUCRoom(JID room_, String nickname_, Presence.PresenceType presType_) {
    klcppwrapJNI.XmppStack_enterMUCRoom__SWIG_4(swigCPtr, this, JID.getCPtr(room_), room_, nickname_, presType_.swigValue());
  }

  public void enterMUCRoom(JID room_, String nickname_) {
    klcppwrapJNI.XmppStack_enterMUCRoom__SWIG_5(swigCPtr, this, JID.getCPtr(room_), room_, nickname_);
  }

  public void enterMUCRoom(JID room_) {
    klcppwrapJNI.XmppStack_enterMUCRoom__SWIG_6(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void configMUCRoom(JID room_, MUCRoomConfig config_) {
    klcppwrapJNI.XmppStack_configMUCRoom(swigCPtr, this, JID.getCPtr(room_), room_, MUCRoomConfig.getCPtr(config_), config_);
  }

  public void queryMUCRoomInfo(JID room_) {
    klcppwrapJNI.XmppStack_queryMUCRoomInfo(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void queryMUCRoomConfig(JID room_) {
    klcppwrapJNI.XmppStack_queryMUCRoomConfig(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void grantMUCRoomMembership(JID room_, JID user_) {
    klcppwrapJNI.XmppStack_grantMUCRoomMembership__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(user_), user_);
  }

  public void grantMUCRoomMembership(JID room_, String nickname_, String reason_) {
    klcppwrapJNI.XmppStack_grantMUCRoomMembership__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_, nickname_, reason_);
  }

  public void grantMUCRoomMembership(JID room_, String nickname_) {
    klcppwrapJNI.XmppStack_grantMUCRoomMembership__SWIG_2(swigCPtr, this, JID.getCPtr(room_), room_, nickname_);
  }

  public void revokeMUCRoomMembership(JID room_, JID user_) {
    klcppwrapJNI.XmppStack_revokeMUCRoomMembership(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(user_), user_);
  }

  public void revokeMUCRoomOwnership(JID room_, JID user_) {
    klcppwrapJNI.XmppStack_revokeMUCRoomOwnership(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(user_), user_);
  }

  public void exitMUCRoom(JID room_, String reason_) {
    klcppwrapJNI.XmppStack_exitMUCRoom__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, reason_);
  }

  public void exitMUCRoom(JID room_) {
    klcppwrapJNI.XmppStack_exitMUCRoom__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void inviteIntoMUCRoom(JID room_, JID invitee_, MUCRoomInvitationType type_, String reason_, boolean amp_, boolean receipts_) {
    klcppwrapJNI.XmppStack_inviteIntoMUCRoom__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(invitee_), invitee_, type_.swigValue(), reason_, amp_, receipts_);
  }

  public void inviteIntoMUCRoom(JID room_, JID invitee_, MUCRoomInvitationType type_, String reason_, boolean amp_) {
    klcppwrapJNI.XmppStack_inviteIntoMUCRoom__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(invitee_), invitee_, type_.swigValue(), reason_, amp_);
  }

  public void inviteIntoMUCRoom(JID room_, JID invitee_, MUCRoomInvitationType type_, String reason_) {
    klcppwrapJNI.XmppStack_inviteIntoMUCRoom__SWIG_2(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(invitee_), invitee_, type_.swigValue(), reason_);
  }

  public void inviteIntoMUCRoom(JID room_, JID invitee_, MUCRoomInvitationType type_) {
    klcppwrapJNI.XmppStack_inviteIntoMUCRoom__SWIG_3(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(invitee_), invitee_, type_.swigValue());
  }

  public void inviteIntoMUCRoom(JID room_, JID invitee_) {
    klcppwrapJNI.XmppStack_inviteIntoMUCRoom__SWIG_4(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(invitee_), invitee_);
  }

  public void rejectMUCRoomInvitation(JID room_, JID invitor_, String reason_) {
    klcppwrapJNI.XmppStack_rejectMUCRoomInvitation__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(invitor_), invitor_, reason_);
  }

  public void rejectMUCRoomInvitation(JID room_, JID invitor_) {
    klcppwrapJNI.XmppStack_rejectMUCRoomInvitation__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_, JID.getCPtr(invitor_), invitor_);
  }

  public void changeSelfNicknameInMUCRoom(JID room_, String nickname_) {
    klcppwrapJNI.XmppStack_changeSelfNicknameInMUCRoom(swigCPtr, this, JID.getCPtr(room_), room_, nickname_);
  }

  public void requestMUCRoomVoice(JID room_) {
    klcppwrapJNI.XmppStack_requestMUCRoomVoice(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void grantMUCRoomVoice(JID room_, String occupantNickname_, String reason_) {
    klcppwrapJNI.XmppStack_grantMUCRoomVoice__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, occupantNickname_, reason_);
  }

  public void grantMUCRoomVoice(JID room_, String occupantNickname_) {
    klcppwrapJNI.XmppStack_grantMUCRoomVoice__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_, occupantNickname_);
  }

  public void revokeMUCRoomVoice(JID room_, String occupantNickname_, String reason_) {
    klcppwrapJNI.XmppStack_revokeMUCRoomVoice__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, occupantNickname_, reason_);
  }

  public void revokeMUCRoomVoice(JID room_, String occupantNickname_) {
    klcppwrapJNI.XmppStack_revokeMUCRoomVoice__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_, occupantNickname_);
  }

  public void changeMUCRoomSubject(JID room_, String subject_) {
    klcppwrapJNI.XmppStack_changeMUCRoomSubject(swigCPtr, this, JID.getCPtr(room_), room_, subject_);
  }

  public void kickOutMUCRoom(JID room_, String occupantNickname_, String reason_) {
    klcppwrapJNI.XmppStack_kickOutMUCRoom__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, occupantNickname_, reason_);
  }

  public void kickOutMUCRoom(JID room_, String occupantNickname_) {
    klcppwrapJNI.XmppStack_kickOutMUCRoom__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_, occupantNickname_);
  }

  public void banOutMUCRoom(JID room_, String occupantNickname_, String reason_) {
    klcppwrapJNI.XmppStack_banOutMUCRoom__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, occupantNickname_, reason_);
  }

  public void banOutMUCRoom(JID room_, String occupantNickname_) {
    klcppwrapJNI.XmppStack_banOutMUCRoom__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_, occupantNickname_);
  }

  public void sendMUCRoomMessage(String id_, JID room_, String msg_, String xhtml_) {
    klcppwrapJNI.XmppStack_sendMUCRoomMessage__SWIG_0(swigCPtr, this, id_, JID.getCPtr(room_), room_, msg_, xhtml_);
  }

  public void sendMUCRoomMessage(String id_, JID room_, String msg_) {
    klcppwrapJNI.XmppStack_sendMUCRoomMessage__SWIG_1(swigCPtr, this, id_, JID.getCPtr(room_), room_, msg_);
  }

  public void sendMUCRoomLocationMessage(String id_, JID room_, Geoloc geoloc_) {
    klcppwrapJNI.XmppStack_sendMUCRoomLocationMessage(swigCPtr, this, id_, JID.getCPtr(room_), room_, Geoloc.getCPtr(geoloc_), geoloc_);
  }

  public void sendMUCRoomAttentionMessage(String id_, JID room_) {
    klcppwrapJNI.XmppStack_sendMUCRoomAttentionMessage(swigCPtr, this, id_, JID.getCPtr(room_), room_);
  }

  public void sendMUCRoomPresence(JID room_, Presence.PresenceType type_, String status_) {
    klcppwrapJNI.XmppStack_sendMUCRoomPresence__SWIG_0(swigCPtr, this, JID.getCPtr(room_), room_, type_.swigValue(), status_);
  }

  public void sendMUCRoomPresence(JID room_, Presence.PresenceType type_) {
    klcppwrapJNI.XmppStack_sendMUCRoomPresence__SWIG_1(swigCPtr, this, JID.getCPtr(room_), room_, type_.swigValue());
  }

  public void sendMUCRoomPresence(JID room_) {
    klcppwrapJNI.XmppStack_sendMUCRoomPresence__SWIG_2(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void registerWithMUCRoom(JID room_) {
    klcppwrapJNI.XmppStack_registerWithMUCRoom(swigCPtr, this, JID.getCPtr(room_), room_);
  }

  public void acceptFt(JID initiator_, String sid_, SIProfileFT.StreamType type_) {
    klcppwrapJNI.XmppStack_acceptFt(swigCPtr, this, JID.getCPtr(initiator_), initiator_, sid_, type_.swigValue());
  }

  public void rejectFt(JID initiator_, String sid_, String reason_) {
    klcppwrapJNI.XmppStack_rejectFt__SWIG_0(swigCPtr, this, JID.getCPtr(initiator_), initiator_, sid_, reason_);
  }

  public void rejectFt(JID initiator_, String sid_) {
    klcppwrapJNI.XmppStack_rejectFt__SWIG_1(swigCPtr, this, JID.getCPtr(initiator_), initiator_, sid_);
  }

  public int recvS5bFtData(String sid_) {
    return klcppwrapJNI.XmppStack_recvS5bFtData(swigCPtr, this, sid_);
  }

  public boolean sendFtData(SID sid_, byte[] data_, int size_) {
    return klcppwrapJNI.XmppStack_sendFtData(swigCPtr, this, SID.getCPtr(sid_), sid_, data_, size_);
  }

  public String requestFt(String sid_, JID to_, SIProfileFT.StreamType type_, FileMetadata file_) {
    return klcppwrapJNI.XmppStack_requestFt(swigCPtr, this, sid_, JID.getCPtr(to_), to_, type_.swigValue(), FileMetadata.getCPtr(file_), file_);
  }

  public boolean closeFtBytestream(String sid_) {
    return klcppwrapJNI.XmppStack_closeFtBytestream(swigCPtr, this, sid_);
  }

  public boolean isBytestreamOpened(String sid_) {
    return klcppwrapJNI.XmppStack_isBytestreamOpened(swigCPtr, this, sid_);
  }

  public String notifyAddressBookChanged(String id_, String name_, boolean isAvailable_) {
    return klcppwrapJNI.XmppStack_notifyAddressBookChanged(swigCPtr, this, id_, name_, isAvailable_);
  }

}

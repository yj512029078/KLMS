/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.xmpp.myWRAP;

public final class AuthenticationError {
  public final static AuthenticationError AuthErrorUndefined = new AuthenticationError("AuthErrorUndefined");
  public final static AuthenticationError SaslAborted = new AuthenticationError("SaslAborted");
  public final static AuthenticationError SaslIncorrectEncoding = new AuthenticationError("SaslIncorrectEncoding");
  public final static AuthenticationError SaslInvalidAuthzid = new AuthenticationError("SaslInvalidAuthzid");
  public final static AuthenticationError SaslInvalidMechanism = new AuthenticationError("SaslInvalidMechanism");
  public final static AuthenticationError SaslMalformedRequest = new AuthenticationError("SaslMalformedRequest");
  public final static AuthenticationError SaslMechanismTooWeak = new AuthenticationError("SaslMechanismTooWeak");
  public final static AuthenticationError SaslNotAuthorized = new AuthenticationError("SaslNotAuthorized");
  public final static AuthenticationError SaslTemporaryAuthFailure = new AuthenticationError("SaslTemporaryAuthFailure");
  public final static AuthenticationError NonSaslConflict = new AuthenticationError("NonSaslConflict");
  public final static AuthenticationError NonSaslNotAcceptable = new AuthenticationError("NonSaslNotAcceptable");
  public final static AuthenticationError NonSaslNotAuthorized = new AuthenticationError("NonSaslNotAuthorized");

  public final int swigValue() {
    return swigValue;
  }

  public String toString() {
    return swigName;
  }

  public static AuthenticationError swigToEnum(int swigValue) {
    if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
      return swigValues[swigValue];
    for (int i = 0; i < swigValues.length; i++)
      if (swigValues[i].swigValue == swigValue)
        return swigValues[i];
    throw new IllegalArgumentException("No enum " + AuthenticationError.class + " with value " + swigValue);
  }

  private AuthenticationError(String swigName) {
    this.swigName = swigName;
    this.swigValue = swigNext++;
  }

  private AuthenticationError(String swigName, int swigValue) {
    this.swigName = swigName;
    this.swigValue = swigValue;
    swigNext = swigValue+1;
  }

  private AuthenticationError(String swigName, AuthenticationError swigEnum) {
    this.swigName = swigName;
    this.swigValue = swigEnum.swigValue;
    swigNext = this.swigValue+1;
  }

  private static AuthenticationError[] swigValues = { AuthErrorUndefined, SaslAborted, SaslIncorrectEncoding, SaslInvalidAuthzid, SaslInvalidMechanism, SaslMalformedRequest, SaslMechanismTooWeak, SaslNotAuthorized, SaslTemporaryAuthFailure, NonSaslConflict, NonSaslNotAcceptable, NonSaslNotAuthorized };
  private static int swigNext = 0;
  private final int swigValue;
  private final String swigName;
}

